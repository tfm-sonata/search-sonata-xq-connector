// Code generated by gowsdl DO NOT EDIT.
package search

import (
	"encoding/xml"
	"git-codecommit.eu-central-1.amazonaws.com/search-sonata-xq-connector/wsdl2goEdit"
)

/*Header part goes here*/
type HeaderSimpleType string
type HeaderRelationshipType string
type HeaderRelatesToValue string
type AirShoppingRQVersion string
type AirShoppingRQCorrelationID string
type HeaderMessageID string

//type TourCode string
type AirShopingHeader struct {
	TrackingMessageHeader *TrackingMessageHeader `xml:"trackingMessageHeader,omitempty"`
	MessageID             *MessageID             `xml:"MessageID,omitempty"`
	RelatesTo             *RelatesTo             `xml:"RelatesTo,omitempty"`
}
type AirShoppingBody struct {
	AirShoppingRQ *AirShoppingRQ `xml:"AirShoppingRQ,omitempty"`
}
type AirShoppingResponse struct {
	AirShoppingRS *AirShoppingRS `xml:"AirShoppingRS,omitempty"`
}

type TrackingMessageHeader struct {
	XMLName     xml.Name     `xml:"http://www.af-klm.com/soa/xsd/MessageHeader-V1_0 trackingMessageHeader"`
	ConsumerRef *ConsumerRef `xml:"consumerRef,omitempty"`
}
type ConsumerRef struct {
	XMLName          xml.Name          `xml:"http://www.af-klm.com/soa/xsd/MessageHeader-V1_0 consumerRef"`
	UserID           *HeaderSimpleType `xml:"userID,omitempty"`
	PartyID          *HeaderSimpleType `xml:"partyID,omitempty"`
	ConsumerID       *HeaderSimpleType `xml:"consumerID,omitempty"`
	ConsumerLocation *HeaderSimpleType `xml:"consumerLocation,omitempty"`
	ConsumerType     *HeaderSimpleType `xml:"consumerType,omitempty"`
	ConsumerTime     *HeaderSimpleType `xml:"consumerTime,omitempty"`
}

type MessageID struct {
	XMLName xml.Name `xml:"http://www.w3.org/2005/08/addressing MessageID"`
	Value   string   `xml:",chardata"`
}
type RelatesTo struct {
	XMLName          xml.Name                `xml:"http://www.w3.org/2005/08/addressing RelatesTo"`
	RelationshipType *HeaderRelationshipType `xml:"RelationshipType,attr,omitempty"`
	Value            *HeaderRelatesToValue   `xml:",chardata"`
}

/*Header part ends here*/

/*autogenerated code starts here */

type AgencyFOPAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 AgencyFOPAugPoint"`

	// This field should be encrypted with the supplied public key
	// Max Length: 8
	Password string `xml:"password,omitempty"`
}

type GroupPaxAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 GroupPaxAugPoint"`

	PaxCountDetails []*PaxCountAugPoint `xml:"PaxCountDetails,omitempty"`

	// GroupQuoteNumber. Max Length: 64

	GroupQuoteNumber string `xml:"GroupQuoteNumber,omitempty"`

	// Language that should be used for communications via mail
	PreferredLanguage string `xml:"PreferredLanguage,omitempty"`
}

type TravellerAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 TravellerAugPoint"`

	// Type of pnr that is to be created.
	PnrType string `xml:"PnrType,omitempty"`

	// First name of the guest in Unicode for local language support. Max Length: 50
	LocalGivenName string `xml:"LocalGivenName,omitempty"`

	// Last name of the guest in Unicode for local language support. Max Length: 50
	LocalSurName string `xml:"LocalSurName,omitempty"`

	// Language that should be used for communications via mail
	PreferredLanguage string `xml:"PreferredLanguage,omitempty"`

	// Status of the PNR
	PnrStatus string `xml:"PnrStatus,omitempty"`

	// Guest Amount Details.
	GuestAmountDetails *GuestAmountDetailsType `xml:"GuestAmountDetails,omitempty"`

	// Passenger Type.
	PaxType string `xml:"PaxType,omitempty"`

	// Passenger Sub Type.
	PaxSubType string `xml:"PaxSubType,omitempty"`

	// The field used for identifying  it is service booking or not. In service booking call it is set as true otherwise false.
	IsServiceBooking bool `xml:"isServiceBooking,omitempty"`

	// Used for capturing tour operator code details.
	TourOperatorCode string `xml:"TourOperatorCode,omitempty"`

	// Used for capturing tour operator reference number.
	TourOperatorBookingNo string `xml:"TourOperatorBookingNo,omitempty"`
}

type ContactAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 ContactAugPoint"`

	// The boolean that decides that email need to be send to the agency email when an itenary is created
	SendItineraryToEmailId bool `xml:"SendItineraryToEmailId,omitempty"`

	// Indicates to send Itinerary to source cell number as SMS. Max Length: 50
	SendItineraryToSMS bool `xml:"SendItineraryToSMS,omitempty"`
}

type FareDetailAugPoint struct {

	// Fare type family definition of a fare
	// eg. FLEXI, INCLUSIVE, NORMAL etc...
	FareType string `xml:"FareType,omitempty"`

	// Fare sub type definition of a fare
	FareSubType string `xml:"FareSubType,omitempty"`

	// This defines the fares that can accessed by the Sender
	FareLevel string `xml:"FareLevel,omitempty"`

	// This defines the fares that can accessed by the Sender
	FareBasis string `xml:"FareBasis,omitempty"`

	// This defines the fare id that can accessed by the Sender
	FareId int64 `xml:"FareId,omitempty"`

	// Object association(s) between this actor object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`
}

type PricingUnitAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 PricingUnitAugPoint"`

	// The PricingUnitId to map the onward and return flights in a OandD list. Pricing unit ID will be same for round-trip flights.
	// Max Length: 5
	PricingUnitID string `xml:"PricingUnitID,omitempty"`
}

type JourneyDataAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 JourneyDataAugPoint"`

	// This element will have details of flight segment in the PNR.
	FlightSegmentDetails []*FlightSegmentDetailsType `xml:"FlightSegmentDetails,omitempty"`

	// This element will have details of flight segment in the PNR.
	FareComponentDetails []*FareComponentDetailType `xml:"FareComponentDetails,omitempty"`
}

type FareComponentAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 FareComponentAugPoint"`

	// Base Fare for the pax type.
	BaseFare *CurrencyAmountType `xml:"BaseFare,omitempty"`

	// (Base Fare - Discount) in point of sale currrency (For Display).
	AppliedFare *CurrencyAmountType `xml:"AppliedFare,omitempty"`

	// (Base Fare - Discount) + DisplayTax + DisplaySurcharge in point of sale currency.
	DisplayFare *CurrencyAmountType `xml:"DisplayFare,omitempty"`

	// Discount in point of Sale currency
	Discount *CurrencyAmountType `xml:"Discount,omitempty"`
}

type OfferPriceAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 OfferPriceAugPoint"`

	// Base Fare for a pax type.
	AppliedFare *CurrencyAmountType `xml:"AppliedFare,omitempty"`

	// (Base Fare - Discount) for a pax type.
	DisplayFare *CurrencyAmountType `xml:"DisplayFare,omitempty"`
}

type TaxDetailAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 TaxDetailAugPoint"`

	// iFlyRes tax code.
	DisplayTaxCode string `xml:"DisplayTaxCode,omitempty"`
}

type FareRefreshAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 FareRefreshAugPoint"`

	// This is a boolean value and indicates whether fare refresh is required.
	IsFareRefreshRequired bool `xml:"IsFareRefreshRequired,omitempty"`
}

type FlightAncillaryAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 FlightAncillaryAugPoint"`

	ServiceAttributes *ServiceAttributes__1 `xml:"ServiceAttributes,omitempty"`

	// This field holds the selected Bundle SSR code for an OD
	Bundle string `xml:"Bundle,omitempty"`
}

type ItineraryAmountDetailAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 ItineraryAmountDetailAugPoint"`

	// Holds the total price amount for the PNR
	TotalPriceAmount *CurrencyAmountType `xml:"TotalPriceAmount,omitempty"`

	// Holds the total fee amount for the PNR
	TotalFeeAmount *CurrencyAmountType `xml:"TotalFeeAmount,omitempty"`

	// Holds the total amount for the PNR
	TotalAmount *CurrencyAmountType `xml:"TotalAmount,omitempty"`

	// Holds the total amount pending for the PNR for the corresponding currency code.
	TotalAmountToBePaid *CurrencyAmountType `xml:"TotalAmountToBePaid,omitempty"`

	// Holds the total amount paid  for the PNR for the corresponding currency code.
	TotalAmountPaid *CurrencyAmountType `xml:"TotalAmountPaid,omitempty"`
}

type CashBackResAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 CashBackResAugPoint"`

	// Holds the cashback types.
	CashBackResParam *CashbackResParamType `xml:"CashBackResParam,omitempty"`
}

type LoyaltyAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 LoyaltyAugPoint"`

	// This field holds the tier level
	TierLevel string `xml:"TierLevel,omitempty"`
}

type AgencyAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 AgencyAugPoint"`

	// This field holds the corporate ID
	CorporateId string `xml:"CorporateId,omitempty"`

	// This field holds the tour operator code
	TourOperatorCode string `xml:"TourOperatorCode,omitempty"`

	// This field holds the travel agency code
	TravelAgencyCode string `xml:"TravelAgencyCode,omitempty"`
}

type ConvenienceStoreFOPAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 ConvenienceStoreFOPAugPoint"`

	// This field holds the Convenience Store Type
	ConvenienceStoreType string `xml:"ConvenienceStoreType,omitempty"`

	// This field holds the Convenience Store Code
	ConvenienceStoreCode string `xml:"ConvenienceStoreCode,omitempty"`

	// This field holds the Convenience Store Name
	ConvenienceStoreName string `xml:"ConvenienceStoreName,omitempty"`

	// This field holds the Customer Firs tName
	CustomerFirstName string `xml:"CustomerFirstName,omitempty"`

	// This field holds the Customer Last Name
	CustomerLastName string `xml:"CustomerLastName,omitempty"`

	// This field holds the Customer Phone number
	CustomerPhonenumber string `xml:"CustomerPhonenumber,omitempty"`
}

type EftFOPAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 EftFOPAugPoint"`

	// This field holds the OriginalAuthCode Type
	OriginalAuthCode string `xml:"OriginalAuthCode,omitempty"`

	// This field holds the Authorisation Code
	AuthorisationCode string `xml:"AuthorisationCode,omitempty"`

	// This field holds the Original Authorisation Date
	OriginalAuthDate string `xml:"OriginalAuthDate,omitempty"`

	// This field holds the Authentication Transaction Id
	AuthenticationTxnId string `xml:"AuthenticationTxnId,omitempty"`

	// This field holds the Payment Status
	PaymentStatus string `xml:"PaymentStatus,omitempty"`

	// This field holds the Token Number
	TokenNumber string `xml:"TokenNumber,omitempty"`

	// This field holds the Proc Return Code
	ProcReturnCode string `xml:"ProcReturnCode,omitempty"`

	// This field holds the Payment Method
	PaymentMethod string `xml:"PaymentMethod,omitempty"`

	// This field holds the Exchange Rate
	ExchangeRate string `xml:"ExchangeRate,omitempty"`

	// This field holds the Payment Description
	PaymentDescription string `xml:"PaymentDescription,omitempty"`
}

type PayPalFOPAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 PayPalFOPAugPoint"`

	// This field holds the Payment Type Number
	PaymentTypeNumber string `xml:"PaymentTypeNumber,omitempty"`

	// This field holds the Authentication Transaction Id
	AuthenticationTxnId string `xml:"AuthenticationTxnId,omitempty"`

	// This field holds the Payment Description
	PaymentDescription string `xml:"PaymentDescription,omitempty"`

	// This field holds the Exchange Rate
	ExchangeRate string `xml:"ExchangeRate,omitempty"`
}

type NotifiableServiceAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 NotifiableServiceAugPoint"`

	// The boolean that decides that only services which needs to be prompted or notified to end customer is to be provided
	IsNotifiableService bool `xml:"isNotifiableService,omitempty"`
}

type SegmentRefsAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 SegmentRefsAugPoint"`

	Value InstanceClassRefSimpleType `xml:",chardata"`
}

type PaymentCardAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 PaymentCardAugPoint"`

	// This field is used for setting the card payment parameters.
	ExtraParam []*ExtraParamType `xml:"ExtraParam,omitempty"`
}

type OfferMetadataAugPoint struct {
	XMLName xml.Name `xml:"http://www.ibsplc.com/iFlyRes/simpleTypes/2017.2 OfferMetadataAugPoint"`

	Value string `xml:",chardata"`
}

type PaxCountAugPoint struct {

	// A data type for Passenger Type Code (PTC) encoding constraint: IATA (three character) Passenger Type Codes

	PTC string `xml:"PTC,omitempty"`

	// Number of Traveler(s) for associated passenger type.
	// Example: 2
	Quantity int32 `xml:"Quantity,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type GuestAmountDetailsType struct {

	// The fare to be Paid by the guest. Max Length: 18,5
	PriceAmount *CurrencyAmountType `xml:"PriceAmount,omitempty"`

	// Total Fee amount to be Paid by the guest. Max Length: 18,5
	FeeAmount *CurrencyAmountType `xml:"FeeAmount,omitempty"`

	// Total Amount to be Paid by the guest. Max Length: 18,5
	TotalAmount *CurrencyAmountType `xml:"TotalAmount,omitempty"`

	// The amount that the guest has to pay. Max Length: 18,5
	AmountToBePaid *CurrencyAmountType `xml:"AmountToBePaid,omitempty"`

	// The amount Paid by the guest. Max Length: 18,5
	AmountPaid *CurrencyAmountType `xml:"AmountPaid,omitempty"`

	// The fare to be Returned to the guest. Max Length: 18,5
	AmountToBeReturned *CurrencyAmountType `xml:"AmountToBeReturned,omitempty"`
}

type FlightSegmentDetailsType struct {

	// Unique Identifier for the flight.
	FlightIDRef string `xml:"FlightIDRef,omitempty"`

	// The Segment Id to uniquely identify the segment.
	// Max Length: 25
	SegmentId string `xml:"SegmentId,omitempty"`

	// Carrier Code of the Operationg airline
	// Max Length: 6
	MarketingCarrierCode string `xml:"MarketingCarrierCode,omitempty"`

	// The number assigned to a particular flight in the system.
	// Max Length: 5
	MarketingFlightNumber string `xml:"MarketingFlightNumber,omitempty"`

	// Carrier Code of the Operationg airline
	// Max Length: 6
	OperatingCarrierCode string `xml:"OperatingCarrierCode,omitempty"`

	// The number assigned to a particular flight in the system.
	// Max Length: 5
	OperatingFlightNumber string `xml:"OperatingFlightNumber,omitempty"`

	// Airport code for the starting point of the segment.
	// Max Length: 5
	DepartureAirport string `xml:"DepartureAirport,omitempty"`

	// Departure Date. Example: 2017-01-11
	DepartureDate string `xml:"DepartureDate,omitempty"`

	// Arrival time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	DepartureTime *TimeSimpleType `xml:"DepartureTime,omitempty"`

	// Airport code for the starting point of the segment.
	// Max Length: 5
	ArrivalAirport string `xml:"ArrivalAirport,omitempty"`

	// Departure Date. Example: 2017-01-11
	ArrivalDate string `xml:"ArrivalDate,omitempty"`

	// Arrival time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	ArrivalTime *TimeSimpleType `xml:"ArrivalTime,omitempty"`
}

type FareComponentDetailType struct {

	// The farebasis in which the booking is made for the passengers.
	// Max Length: 8
	FareBasisCode string `xml:"FareBasisCode,omitempty"`

	// The Segment Id to uniquely identify the segment.
	// Max Length: 25
	SegmentIDRefs []string `xml:"SegmentIDRefs,omitempty"`

	// The PricingUnitId to map the onward and return flights in a OandD list. Pricing unit ID will be same for round-trip flights.
	// Max Length: 5
	PricingUnitID string `xml:"PricingUnitID,omitempty"`

	// The Fare component id
	FareComponentId string `xml:"FareComponentId,omitempty"`
}

type CurrencyAmountType struct {
	Value float64 `xml:",chardata"`
}

type CashbackResParamType struct {

	// Holds the payback name possible values are basic point or promo pints.
	Name string `xml:"Name,omitempty"`

	// Holds the value.
	Value string `xml:"Value,omitempty"`
}

type ExtraParamType struct {

	// Name of the parameter
	// Max Length: 20
	Name string `xml:"Name,omitempty"`

	// Value of the parameter
	// Max Length: 20
	Value string `xml:"Value,omitempty"`
}

// A data type definition for Globally Unique XML Instance or Other Class ID size constraint.

type InstanceClassSimpleType string

// A data type definition for Airline Carrier or Entity Owner.

type OwnerSimpleType string

// A data type definition for Owner Entity size constraint.

type OwnerTextSimpleType string

// A data type definition for Reference Association Token type and size constraint.

type TokenID_SimpleType string

// A data type definition for Named NDC Domain list constraint.
//
// Examples: Shopping, OrderManagement, PaymentTicketing, AirlineProfile, Utility
//
// Note: Supports pre-defined enumerated list and/ or bilaterally-agreed upon values.

type DomainListType string

// A data type definition for Encoding Scheme Source Provider Type list constraint.

type EncSchemeSimpleType string

const (
	EncSchemeSimpleTypeAirline EncSchemeSimpleType = "Airline"

	EncSchemeSimpleTypeFiled EncSchemeSimpleType = "Filed"

	EncSchemeSimpleTypeThirdParty EncSchemeSimpleType = "ThirdParty"
)

// A data type definition for Encoding Scheme Source Provider Type.
//
// Examples: Airline, Filed, ThirdParty
//
// Note: Supports pre-defined enumerated list and/ or bilaterally-agreed upon values.

type EncSchemeListType string

// A data type definition for Globally Unique XML Instance or Other Class Reference Association size constraint.

type InstanceClassRefSimpleType string

// A data type for an xsd:ID unique instance identifier.

type KeyIdentifier string

// A data type definition for List Application size constraint.

type ListApplicationSimpleType string

// A data type for an InstanceClassRefSimpleType Association.

type MultiAssocSimpleType InstanceClassRefSimpleType

// A data type definition for Service, Offer, Order and Order Item ID size constraint.

type UniqueID_SimpleType string

//
// A data type for 3DS Program ACS Customer Authentication contextual list. Examples: Y- Customer authenticated N- Customer not authenticated A- An authentication attempt occurred but could not be completed U- Unable to perform authentication
//

type CustomerAuthStatusListType string

const (

	//
	// A- An authentication attempt occurred but could not be completed
	//
	CustomerAuthStatusListTypeA CustomerAuthStatusListType = "A"

	// N- Customer not authenticated
	CustomerAuthStatusListTypeN CustomerAuthStatusListType = "N"

	// U- Unable to perform authentication
	CustomerAuthStatusListTypeU CustomerAuthStatusListType = "U"

	// Y- Customer authenticated
	CustomerAuthStatusListTypeY CustomerAuthStatusListType = "Y"
)

//
// A data type for 3DS Program ACS Customer Authentication status. Examples: Y- Customer authenticated N- Customer not authenticated A- An authentication attempt occurred but could not be completed U- Unable to perform authentication
//

type CustomerAuthStatusSimpleType string

//
// A data type for 3DS Program Enrollment Status contextual list. Examples: CardNotEnrolled, CardEnrolled, CardMayBeEnrolled, Unknown
//

type EnrollStatusListType string

const (
	EnrollStatusListTypeDisable EnrollStatusListType = "Disable"

	EnrollStatusListTypeEnable EnrollStatusListType = "Enable"
)

//
// A data type for 3DS Program Enrollment Status. Examples: CardNotEnrolled, CardEnrolled, CardMayBeEnrolled, Unknown
//

type EnrollStatusSimpleType string

//
// A data type for 3DS Transaction Type contextual list. Examples: Authorize: Authorize amount (no funds transferred) Complete: Complete a previous authorization (funds are transferred) Purchase: Purchase (funds are transferred immediately) Refund: Refund (funds transferred immediately) Validate: Validation Transaction (a small authorized transaction amount to validate card details including expiry date and address)
//

type SecureTransactionListType string

const (

	// Amount is authorized. No funds are transferred.
	SecureTransactionListTypeAuthorize SecureTransactionListType = "Authorize"

	SecureTransactionListTypeCheckEnrollment SecureTransactionListType = "CheckEnrollment"

	//
	// Complete a previous authorization. Funds are transferred.
	//
	SecureTransactionListTypeComplete SecureTransactionListType = "Complete"

	// Purchase. Funds are transferred immediately.
	SecureTransactionListTypePurchase SecureTransactionListType = "Purchase"

	// Refund. Funds transferred immediately.
	SecureTransactionListTypeRefund SecureTransactionListType = "Refund"

	//
	// Validation Transaction. Effects a $1.00 Authorization to validate card details including expiry date, address.
	//
	SecureTransactionListTypeValidate SecureTransactionListType = "Validate"
)

//
// A data type for 3DS Transaction Type. Examples: Purchase, Refund, Authorization, Complete, Validate
//

type SecureTransactionSimpleType string

//
// A data type for 3DS Secure Authorization Client Type contextual list. Examples: InteractiveVoiceResponse (IVR) Internet MailOrTelephoneOrder (MOTO) Recurring Unattended
//

type SecureTrxClientListType string

const (

	// IVR
	SecureTrxClientListTypeInteractiveVoiceResponse SecureTrxClientListType = "InteractiveVoiceResponse"

	SecureTrxClientListTypeInternet SecureTrxClientListType = "Internet"

	// MOTO
	SecureTrxClientListTypeMailOrTelephoneOrder SecureTrxClientListType = "MailOrTelephoneOrder"

	SecureTrxClientListTypeRecurring SecureTrxClientListType = "Recurring"

	SecureTrxClientListTypeUnattended SecureTrxClientListType = "Unattended"
)

//
// A data type for 3DS Secure Authorization Client Type. Examples: InteractiveVoiceResponse (IVR) Internet MailOrTelephoneOrder (MOTO) Recurring Unattended
//

type SecureTrxClientSimpleType string

// A data type for Advanced Purchase list constraint.
//
// Examples: EARLIEST, LATEST, Other

type AdvPurchListType string

const (
	AdvPurchListTypeEARLIEST AdvPurchListType = "EARLIEST"

	AdvPurchListTypeLATEST AdvPurchListType = "LATEST"

	AdvPurchListTypeOther AdvPurchListType = "Other"
)

// A data type for Fare Application.

type AdvPurchaseSimpleType string

// A data type for Application size constraint.

type ApplicationSimpleType string

// Aircraft row number.

type AirRowNbrSimpleType string

// A data type for Aircraft Equipment Code encoding constraint: IATA/ A4A Aircraft Equipment Code

type AircraftEquipSimpleType string

// A data type for Airline Designator Code encoding constraint: IATA/ A4A (two or three character) Airline Designator Code

type AirlineDesigSimpleType string

// Examples: JFK, NYC

type AirportCitySimpleType string

// A data type for Baggage Applicable To contextual list.

type BagAppListType string

const (
	BagAppListTypeParty BagAppListType = "Party"

	BagAppListTypeTraveler BagAppListType = "Traveler"

	BagAppListTypeOther BagAppListType = "Other"
)

// A data type for Baggage Application.

type BagAppSimpleType string

// A data type for Baggage Dimension contextual list.

type BagDimensionListType string

const (
	BagDimensionListTypeLength BagDimensionListType = "Length"

	BagDimensionListTypeHeight BagDimensionListType = "Height"

	BagDimensionListTypeWidth BagDimensionListType = "Width"
)

// A data type for Baggage Dimension Unit.

type BagDimensionSimpleType string

// A data type for Baggage Disclosure Rule Code contextual list.

type BagDiscloseRuleListType string

const (

	// Disclosure with NO US DOT Reservation
	BagDiscloseRuleListTypeD BagDiscloseRuleListType = "D"

	// No Disclosure or US DOT Reservation
	BagDiscloseRuleListTypeN BagDiscloseRuleListType = "N"

	// Disclosure AND US DOT Reservation
	BagDiscloseRuleListTypeY BagDiscloseRuleListType = "Y"

	BagDiscloseRuleListTypeOther BagDiscloseRuleListType = "Other"
)

// A data type for Baggage Disclosure Rule.

type BagDiscloseRuleSimpleType string

// Examples: A, ABC, 1

type CodesetValueSimpleType string

// Examples: A, ABC, 1

type OtherCodeSimpleType string

// A data type for Currency Code Application constrained list.
//
// Examples: Actual, Display, Requested, Conversion, Other

type ConnectMethodListType string

const (
	ConnectMethodListTypeDirectWithAirline ConnectMethodListType = "DirectWithAirline"

	ConnectMethodListTypeDirectWithOther ConnectMethodListType = "DirectWithOther"

	ConnectMethodListTypeGateway ConnectMethodListType = "Gateway"
)

// A data type for Currency Code Application.
//
// Examples: Actual, Display, Requested, Conversion, Other

type ConnectMethodSimpleType string

// A data type for Currency Code Application constrained list.
//
// Examples: Actual, Display, Requested, Conversion, Other

type ContactListType string

const (
	ContactListTypeBilling ContactListType = "Billing"

	ContactListTypeBusiness ContactListType = "Business"

	ContactListTypeHome ContactListType = "Home"

	ContactListTypeServiceLocation ContactListType = "ServiceLocation"

	ContactListTypeStayLocation ContactListType = "StayLocation"
)

// A data type for Currency Code Application.
//
// Examples: Actual, Display, Requested, Conversion, Other

type ContactAppSimpleType string

// A data type for Email Application list constraints.
// Example: Account, Business, Personal, SMS, Other

type EmailListType string

const (
	EmailListTypeAccount EmailListType = "Account"

	EmailListTypeBusiness EmailListType = "Business"

	EmailListTypePersonal EmailListType = "Personal"

	EmailListTypeSMS EmailListType = "SMS"

	EmailListTypeOther EmailListType = "Other"
)

// A data type for Email Application.

type EmailAppSimpleType string

// Examples: Provider, tablename.field

type ContextSimpleType string

// A data type for Country Code encoding constraint: ISO 3166-1 (two character) Country Code

type CountrySimpleType string

// A data type for Coupon Media Type contextual list.

type CouponMediaListType string

const (
	CouponMediaListTypeElectronic CouponMediaListType = "Electronic"

	CouponMediaListTypePaper CouponMediaListType = "Paper"

	CouponMediaListTypeOther CouponMediaListType = "Other"
)

// A data type for Baggage Application.

type CouponMediaSimpleType string

// A data type for a Coupon Purpose.

type CouponPurposeListType string

const (
	CouponPurposeListTypeAdditional CouponPurposeListType = "Additional"

	CouponPurposeListTypeBase CouponPurposeListType = "Base"

	CouponPurposeListTypeNet CouponPurposeListType = "Net"

	CouponPurposeListTypeRefund CouponPurposeListType = "Refund"

	CouponPurposeListTypeSell CouponPurposeListType = "Sell"
)

// A data type for Fare Rule Modification or Override Type contextual list.

type FareWaiverRuleListType string

const (
	FareWaiverRuleListTypeExchangedReissued FareWaiverRuleListType = "ExchangedReissued"

	FareWaiverRuleListTypeFareComponent FareWaiverRuleListType = "FareComponent"

	FareWaiverRuleListTypeOther FareWaiverRuleListType = "Other"
)

// A data type for Baggage Application.

type FareWaiverRuleSimpleType string

// A data type for Currency Code Application list constraint.
//
// Examples: Actual, Display, Requested, Conversion, Other

type CurrencyListType string

const (
	CurrencyListTypeActual CurrencyListType = "Actual"

	CurrencyListTypeConversion CurrencyListType = "Conversion"

	CurrencyListTypeDisplay CurrencyListType = "Display"

	CurrencyListTypeRequested CurrencyListType = "Requested"

	CurrencyListTypeOther CurrencyListType = "Other"
)

// A data type for Currency Code Application.
//
// Examples: Actual, Display, Requested, Conversion, Other

type CurrencyAppSimpleType string

// A data type for Currency Code encoding constraint: ISO 4217 (three alpha character) Currency Code

type CurrencySimpleType string

// A data type for Day of Week encoding constraint:String, 1 - 7 length

type DayOfWeekMaskType string

// A data type for Day of Week encoding constraint:Positive Integer 1 - 7

type DayOfWeekSimpleType string

// A data type for Month Number encoding constraint: 01 through 12

type MonthNumberSimpleType string

// A data type for Time encoding constraint: SO 8601 Military/ 24 Hour (HH:MM)
// Example: 14:00

type TimeSimpleType string

// A data type for Description encoding constraint: Minimum Length of 1

type DescriptionSimpleType string

// A data type for a Short Description size constraint.

type ShortDescSimpleType string

// A data type for NDC Domain List.

type DomainSimpleType string

const (
	DomainSimpleTypeAirlineProfile DomainSimpleType = "AirlineProfile"

	DomainSimpleTypeOrderManagement DomainSimpleType = "OrderManagement"

	DomainSimpleTypePaymentTicketing DomainSimpleType = "PaymentTicketing"

	DomainSimpleTypeShopping DomainSimpleType = "Shopping"

	DomainSimpleTypeUtility DomainSimpleType = "Utility"
)

// A data type for Distance Unit of Measure contextual list.
// Examples: Miles, Kilometers

type DistanceUnitListType string

const (
	DistanceUnitListTypeFeet DistanceUnitListType = "Feet"

	// K = KILOMETERS
	DistanceUnitListTypeKilometers DistanceUnitListType = "Kilometers"

	DistanceUnitListTypeMeters DistanceUnitListType = "Meters"

	// M = MILES
	DistanceUnitListTypeMiles DistanceUnitListType = "Miles"

	DistanceUnitListTypeOther DistanceUnitListType = "Other"
)

// A data type for Currency Code Application.
//
// Examples: Actual, Display, Requested, Conversion, Other

type DistanceUnitSimpleType string

// A data type for an Image UOM constrained list.

type ImageUnitListType string

const (
	ImageUnitListTypeInch ImageUnitListType = "Inch"

	ImageUnitListTypeMillimeter ImageUnitListType = "Millimeter"

	ImageUnitListTypePixel ImageUnitListType = "Pixel"

	ImageUnitListTypePoint ImageUnitListType = "Point"

	ImageUnitListTypeOther ImageUnitListType = "Other"
)

// A data type for an Image UOM Description.

type ImageUnitSimpleType string

// A data type for Language Code Application list constraint.
//
// Examples: Display, Requested, Spoken, Written, Other

type LanguageAppListType string

const (
	LanguageAppListTypeActual LanguageAppListType = "Actual"

	LanguageAppListTypeRequested LanguageAppListType = "Requested"

	LanguageAppListTypeSpoken LanguageAppListType = "Spoken"

	LanguageAppListTypeWritten LanguageAppListType = "Written"

	LanguageAppListTypeOther LanguageAppListType = "Other"
)

// A data type for Language Code Application.
//
// Examples: Display, Requested, Spoken, Written, Other

type LanguageAppSimpleType string

// A data type for a Rendering Type constrained list.

type RenderingTypeListType string

const (
	RenderingTypeListTypeNarrative RenderingTypeListType = "Narrative"

	RenderingTypeListTypeXSLT RenderingTypeListType = "XSLT"

	RenderingTypeListTypeOther RenderingTypeListType = "Other"
)

// A data type for Language Code Application.
//
// Examples: Display, Requested, Spoken, Written, Other

type RenderingTypeSimpleType string

// A data type for Passenger Type Code (PTC) encoding constraint: IATA (three character) Passenger Type Codes

type PaxSimpleType string

// A data type for a Credit Card Type constraint.

type PayCardTypeSimpleType string

// A data type for a Credit Card Code constraint.

type PayCardCodeSimpleType string

// A data type for a Credit Card Number constraint.

type PayCardNmbrSimpleType string

// A data type for a Payment Card Series Code constraint.

type PayCardCVV_SimpleType string

// A data type for a Payment Card Date constraint.

type PayCardDateSimpleType string

//
// A data type for Payment Status contextual list. Examples: Canceled, Complete, Failed, MoreInformation, Partial
//

type PaymentStatusListType string

const (
	PaymentStatusListTypeCanceled PaymentStatusListType = "Canceled"

	PaymentStatusListTypeComplete PaymentStatusListType = "Complete"

	PaymentStatusListTypeFailed PaymentStatusListType = "Failed"

	PaymentStatusListTypeMoreInformation PaymentStatusListType = "MoreInformation"

	PaymentStatusListTypePartial PaymentStatusListType = "Partial"
)

// A data type for a Masked Payment Card Number constraint.

type MaskedCardNmbrSimpleType string

// A data type for Offer Penalty Amount Application list constraint.

type PenaltyAppListType string

const (
	PenaltyAppListTypeMaximumPenaltyAmount PenaltyAppListType = "MaximumPenaltyAmount"

	PenaltyAppListTypeMinimumPenaltyAmount PenaltyAppListType = "MinimumPenaltyAmount"

	PenaltyAppListTypeOther PenaltyAppListType = "Other"
)

// A data type for Offer Penalty Amount Application.

type PenaltyAppSimpleType string

// A data type for Offer Penalty Type list constraint.

type PenaltyListType string

const (
	PenaltyListTypeCancellation PenaltyListType = "Cancellation"

	PenaltyListTypeChange PenaltyListType = "Change"

	PenaltyListTypeNoShow PenaltyListType = "NoShow"

	PenaltyListTypeUpgrade PenaltyListType = "Upgrade"

	PenaltyListTypeOther PenaltyListType = "Other"
)

// A data type for Offer Penalty Type.

type PenaltySimpleType string

// A data type for  Whole Percentage encoding constraint.

type WholePercentageSimpleType float64

// A data type for Preference Type list constraint.

type PreferencesLevelListType string

const (
	PreferencesLevelListTypePreferred PreferencesLevelListType = "Preferred"

	PreferencesLevelListTypeRequired PreferencesLevelListType = "Required"

	PreferencesLevelListTypeExclude PreferencesLevelListType = "Exclude"
)

// A data type for Language Code Application.
//
// Examples: Display, Requested, Spoken, Written, Other

type PreferencesLevelSimpleType string

// A data type for Proper Name size constraint.

type ProperNameSimpleType string

// A data type for Carrier Name size constraint.

type CarrierNameType string

// A data type for Property Name size constraint.

type PropertyNameSimpleType_ string

// A data type for Proximity Data Application list constraint.

type ProximityAppListType string

const (
	ProximityAppListTypeActualProximity ProximityAppListType = "ActualProximity"

	ProximityAppListTypeSearchRadius ProximityAppListType = "SearchRadius"

	ProximityAppListTypeOther ProximityAppListType = "Other"
)

// A data type for Proximity Data Application.

type ProximityAppSimpleType string

// A data type for  Pseudo City Code encoding constraint. Example: AAA2

type PseudoCitySimpleType string

// A data type for a Redemption Unit List.

type RedempUnitListType string

const (
	RedempUnitListTypeMiles RedempUnitListType = "Miles"

	RedempUnitListTypePoints RedempUnitListType = "Points"

	RedempUnitListTypeOther RedempUnitListType = "Other"
)

// A data type for Language Code Application.
//
// Examples: Display, Requested, Spoken, Written, Other

type RedemptionUnitSimpleType string

// A data type for Rule Status contextual list.

type RuleStatusListType string

const (
	RuleStatusListTypeActionRequired RuleStatusListType = "ActionRequired"

	RuleStatusListTypeRuleExecuted RuleStatusListType = "RuleExecuted"
)

// A data type for Language Code Application.
//
// Examples: Display, Requested, Spoken, Written, Other

type RuleStatusSimpleType string

// A data type for Special Service or Request Code constraint.

type SpecialSrvcSimpleType string

// A data type for Special Service Request Code encoding constraint: IATA
// Examples:
// EXST (EXTRA SEAT REQUIRED)
// INFT (INFANT ACCOMPANYING ADULT PASSENGER)
// PETC (PASSENGER TRAVELING WITH PET IN CABIN)
// UMNR (UNACCOMPANIED MINOR)

type SSR_SimpleType string

// A data type for IATA Company Number encoding constraint. Example: 98417900

type IATA_NbrSimpleType string

// A data type for ICAO Location Code encoding constraint. Example: K (CONTIGUOUS UNITED STATES)

type ICAO_LocSimpleType string

// A data type for Ticket Designator Application list constraint.
//
// Examples: Requested, Ticketed, Other

type TicketDesigAppListType string

const (
	TicketDesigAppListTypeRequested TicketDesigAppListType = "Requested"

	TicketDesigAppListTypeTicketed TicketDesigAppListType = "Ticketed"

	TicketDesigAppListTypeOther TicketDesigAppListType = "Other"
)

// A data type for Language Code Application.
//
// Examples: Display, Requested, Spoken, Written, Other

type TicketDesigAppSimpleType string

//
// A data type for Ticket Number Constraint. Examples: String, Length 1 to 16.
//

type TicketNumberSimpleType string

// A data type for Trip Purpose contextual list.

type TripPurposeListType string

const (
	TripPurposeListTypeBusiness TripPurposeListType = "Business"

	TripPurposeListTypeLeisure TripPurposeListType = "Leisure"

	TripPurposeListTypeBusinessAndLeisure TripPurposeListType = "BusinessAndLeisure"

	TripPurposeListTypeOther TripPurposeListType = "Other"

	TripPurposeListTypeUnknown TripPurposeListType = "Unknown"
)

// A data type for a Unique String Identifier constraint.

type UniqueStringID_SimpleType string

// A data type for Size Values list constraint. Examples: Centimeter, Inch

type SizeUnitSimpleType string

const (
	SizeUnitSimpleTypeCentimeter SizeUnitSimpleType = "Centimeter"

	SizeUnitSimpleTypeInch SizeUnitSimpleType = "Inch"
)

//
// A data type for Policy Type list constraint. Examples: Privacy_PII, Payment_PCI, Credentialing
//

type PolicyTypeSimpleType string

const (

	//
	// Personnally Identifting Information Privacy Policy.
	//
	PolicyTypeSimpleTypePrivacy_PII PolicyTypeSimpleType = "Privacy_PII"

	PolicyTypeSimpleTypePayment_PCI PolicyTypeSimpleType = "Payment_PCI"

	PolicyTypeSimpleTypeCredentialing PolicyTypeSimpleType = "Credentialing"
)

//
// A data type for Policy Type. Examples: Privacy_PII, Payment_PCI, Credentialing
//

type PolicyTypeListType string

// Used for Alpha-Numeric Strings, length 1 to 3

type AlphaNumericStringLength1to3 string

// Used for Alphabetic Strings, length exactly 3

type AlphaLength3 string

// Type definition for IATA airline designator (2-alphanumeric) or ICAO airline code (3-alpha).

type AirlineType string

// Used for Alpha-Numeric Strings, length 1 to 71

type AlphaNumericStringLength1to71 string

// Used forAlpha-Numeric Strings, length 1 to 4.

type AlphaNumericStringLength1to4 string

// Use for numeric values, from 0 to 99 inclusive.

type Numeric0to99 int32

// Used for Numeric Strings, length 1 to 19.

type NumericStringLength1to19 string

//
// A data type for an Order Action list constraint. Examples: Cancel, Create, Divide, Delete, Reissue, Reprice, Update
//

type OrderItemActionSimpleType string

const (
	OrderItemActionSimpleTypeCancel OrderItemActionSimpleType = "Cancel"

	OrderItemActionSimpleTypeCreate OrderItemActionSimpleType = "Create"

	OrderItemActionSimpleTypeDelete OrderItemActionSimpleType = "Delete"

	OrderItemActionSimpleTypeDivide OrderItemActionSimpleType = "Divide"

	OrderItemActionSimpleTypeReissue OrderItemActionSimpleType = "Reissue"

	OrderItemActionSimpleTypeReprice OrderItemActionSimpleType = "Reprice"

	OrderItemActionSimpleTypeUpdate OrderItemActionSimpleType = "Update"
)

//
// Examples: Imperial, Metric
//

type MeasurementTypeListType string

const (
	MeasurementTypeListTypeImperial MeasurementTypeListType = "Imperial"

	MeasurementTypeListTypeMetric MeasurementTypeListType = "Metric"
)

//
// A data type for an Order Action. Examples: Create, Update, Delete, Reissue, Reprice
//

type OrderItemActionListType string

type BaggageCategoryListType string

const (
	BaggageCategoryListTypeCarryOn BaggageCategoryListType = "CarryOn"

	BaggageCategoryListTypeChecked BaggageCategoryListType = "Checked"
)

type BeforeOrAfterListType string

const (
	BeforeOrAfterListTypeBefore BeforeOrAfterListType = "Before"

	BeforeOrAfterListTypeAfter BeforeOrAfterListType = "After"
)

type AugmentationPoint AugPointInfoType

type Month MonthRepType

type DatePeriod DatePeriodRepType

type DateTimePeriod DateTimePeriodRepType

type DayPeriod DayPeriodRepType

type MonthPeriod MonthPeriodRepType

type QuarterPeriod QuarterPeriodRepType

type TimePeriod TimePeriodRepType

type YearPeriod YearPeriodRepType

type YearMonthPeriod YearMonthPeriodRepType

type ActorObjectType struct {

	// Association between this object and metadata instance(s).

	Metadata *MultiAssocSimpleType `xml:"metadata,attr,omitempty"`

	// Object association(s) between this actor object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`
}

type CoreBaseType struct {

	// Object Augmentation Point(s).
	AugPointAssocs *AugPointAssocType `xml:"AugPointAssocs,omitempty"`

	// Globally Unique Object instance/ class Key.
	//
	// Example: 2B75C565-5BB0- 4DCE-8DE6-67CB7B4F25A7

	Key *InstanceClassSimpleType `xml:"Key,attr,omitempty"`

	// Source Entity Code or ID. Examples: BA, WIDGETCO

	Owner *OwnerSimpleType `xml:"Owner,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type ListBaseType struct {

	// Unique List Token.
	//
	// Example: jZhJu7SORZeO MNpifElIkA
	//
	// Note: This token pertains to all specified List instances, e.g. the list collection.

	ListToken *DescriptionSimpleType `xml:"ListToken,attr,omitempty"`

	// Source Entity Code or ID. Examples: BA, WIDGETCO

	Owner *OwnerSimpleType `xml:"Owner,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type MetaBaseType struct {
}

type AssociatedObjectBaseType struct {

	// When true, this fee is approximate.

	ApproxInd bool `xml:"ApproxInd,attr,omitempty"`

	// When true, all fee amounts are refundable.

	RefundAllInd bool `xml:"RefundAllInd,attr,omitempty"`

	// When true, price is exempt from all taxes.

	ExemptAllInd bool `xml:"ExemptAllInd,attr,omitempty"`

	// When true, ALL associated inventory has been guaranteed for this and the guarantee information specified in the InventoryGuarantee node.

	AllGuaranteeInd bool `xml:"AllGuaranteeInd,attr,omitempty"`

	// When true, one or more associated Offer Item(s) are subject to regulatory disclosure.

	DisclosureInd bool `xml:"DisclosureInd,attr,omitempty"`

	// When true, the attachment can be displayed in a browser.

	BrowserInd bool `xml:"BrowserInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AugPointType struct {

	// Globally Unique Object instance/ class Key.
	//
	// Example: 2B75C565-5BB0- 4DCE-8DE6-67CB7B4F25A7
	FareDetailAugPoint *FareDetailAugPoint `xml:"FareDetailAugPoint,omitempty"`

	FareComponentAugPoint *FareComponentAugPoint `xml:"FareComponentAugPoint,omitempty"`

	Key *InstanceClassSimpleType `xml:"Key,attr,omitempty"`

	// Source Entity Code or ID. Examples: BA, WIDGETCO

	Owner *OwnerSimpleType `xml:"Owner,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`

	TaxDetailAugPoint TaxDetailAugPoint `xml:"TaxDetailAugPoint,omitempty"`
}

type AugPointAssocType struct {
	AugPointAssoc []*AugPointAssoc__1 `xml:"AugPointAssoc,omitempty"`

	// Owner Airline (or other entity) Code. Examples: BA, WIDGETCO

	Owner *OwnerSimpleType `xml:"Owner,attr,omitempty"`
}

type AugPointListType struct {
	*ListBaseType

	List []*List__1 `xml:"List,omitempty"`
}

type AugPointInfoType struct {

	// Augmentation Point Definition.
	AugPoint []*AugPointType `xml:"AugPoint,omitempty"`

	// Augmentation Point Reference/ Association Lists.
	Lists *AugPointListType `xml:"Lists,omitempty"`
}

type NamedAssocType struct {
	NamedAssoc []*NamedAssoc__1 `xml:"NamedAssoc,omitempty"`
}

type MetadataObjectBaseType struct {
	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// A globally unique identifier for this Metadata instance.

	MetadataKey string `xml:"MetadataKey,attr,omitempty"`
}

type KeyObjectBaseType struct {

	// When true, Corporate Fare Information was used for Pricing.

	PricedInd bool `xml:"PricedInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type CoreDateGrpType struct {

	// Date and time. Example: 2017-01-03T13:20:00

	DateTime string `xml:"DateTime,attr,omitempty"`

	// Short date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)

	ShortDate string `xml:"ShortDate,attr,omitempty"`

	// Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Time. Example: 14:00
	//
	// [Encoding Scheme] ISO 8601 Military/ 24 Hour (HH:MM)

	Time *TimeSimpleType `xml:"Time,attr,omitempty"`
}

type TrxProcessObjectBaseType struct {

	// When true, Payer Authentication Response information is specified in the PayerAuth node.

	AuthResponseInd bool `xml:"AuthResponseInd,attr,omitempty"`

	// When true, the maximum payment authentication attemps have been exceeded.

	MaximumTryInd bool `xml:"MaximumTryInd,attr,omitempty"`

	// When true, the Payment information has not been processed.

	NotProcessedInd bool `xml:"NotProcessedInd,attr,omitempty"`

	// When true, the payment transaction should be resent.

	RetryInd bool `xml:"RetryInd,attr,omitempty"`

	// When true, Payer Authentication Request information is specified in the PayerAuth node.

	AuthRequestInd bool `xml:"AuthRequestInd,attr,omitempty"`

	//
	// Object association(s) between this object and any object instance(s).
	//

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	//
	// Globally unique id for this Transaction Processing object instance.
	//

	TrxItemKey string `xml:"trxItemKey,attr,omitempty"`
}

type UniqueIDContextType struct {
	Value UniqueStringID_SimpleType `xml:",chardata"`

	// Airline designator or CRS code of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline or CRS Designator Code

	Owner *ContextSimpleType `xml:"Owner,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CorePeriodGrpType struct {

	// Effective (start) and expiration (end) Dates.
	Date *DatePeriodType `xml:"Date,omitempty"`

	// Effective (start) and expiration (end) Date and Time.
	DateTime *DateTimePeriodType `xml:"DateTime,omitempty"`

	TimeStamp *TimeStamp__1 `xml:"TimeStamp,omitempty"`
}

type DateTimePeriodType struct {

	// Effective (start) Date/ Time. Example: 2017-01-13T06:00:00

	Effective string `xml:"Effective,attr,omitempty"`

	// Expiration (end) Date/ Time. Example: 2017-03-13T23:00:00

	Expiration string `xml:"Expiration,attr,omitempty"`
}

type DatePeriodType struct {

	// Effective (start) Date.  Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)

	Effective string `xml:"Effective,attr,omitempty"`

	// Expiration (end) Date.  Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)

	Expiration string `xml:"Expiration,attr,omitempty"`
}

type DayRepType struct {
	Value DayOfWeekSimpleType `xml:",chardata"`

	// Day Name.  Example: Monday

	Name *ContextSimpleType `xml:"Name,attr,omitempty"`
}

type DatePeriodRepType struct {

	// Effective (start) date.  Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Effective string `xml:"Effective,omitempty"`

	// Expiration (end) date.  Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Expiration string `xml:"Expiration,omitempty"`
}

type DateTimePeriodRepType struct {

	// Effective (start) date/ time.  Example: 2017-01-13T06:00:00
	Effective string `xml:"Effective,omitempty"`

	// Expiration (end) date/ time.  Example: 2017-03-13T23:00:00
	Expiration string `xml:"Expiration,omitempty"`
}

type DayPeriodRepType struct {

	// Effective (start) day of the week number.  Example: 01
	Effective *DayRepType `xml:"Effective,omitempty"`

	// Expiration (end) day of the week number.  Example: 04
	Expiration *DayRepType `xml:"Expiration,omitempty"`
}

type MonthRepType struct {
	Value MonthNumberSimpleType `xml:",chardata"`

	// Month Name.  Example: January

	Name *ContextSimpleType `xml:"Name,attr,omitempty"`
}

type MonthPeriodRepType struct {

	// Effective (start) month number.  Example: 01
	Effective *MonthRepType `xml:"Effective,omitempty"`

	// Expiration (end) month number.  Example: 04
	Expiration *MonthRepType `xml:"Expiration,omitempty"`
}

type QuarterPeriodRepType struct {

	// Effective (start) quarter.
	// Example: 1Q (JAN-MAR)

	Effective string `xml:"Effective,omitempty"`

	// Expiration (end) quarter.
	// Example: 3Q (JUL-SEP)

	Expiration string `xml:"Expiration,omitempty"`
}

type TimePeriodRepType struct {

	// Effective (start) time.  Example: 09:00
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	Effective *TimeSimpleType `xml:"Effective,omitempty"`

	// Expiration time.  Example: 18:00
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	Expiration *TimeSimpleType `xml:"Expiration,omitempty"`
}

type TimestampRepType struct {
	Value string `xml:",chardata"`
}

type YearPeriodRepType struct {

	// Effective (start) year.
	// Example: 2014
	Effective string `xml:"Effective,omitempty"`

	// Expiration (end) year.
	// Example: 2016
	Expiration string `xml:"Expiration,omitempty"`
}

type YearMonthPeriodRepType struct {

	// Effective (start) year and month.  Example: 2017-01
	Effective string `xml:"Effective,omitempty"`

	// Expiration (end) year and month.  Example: 2017-12
	Expiration string `xml:"Expiration,omitempty"`
}

// A data type for Partner Company Type contextual list.
// Examples: ServiceProvider, ServiceFulfillment, Merchandise

type PartnerTypeListType string

const (
	PartnerTypeListTypeAirPassProgramHolder PartnerTypeListType = "AirPassProgramHolder"

	PartnerTypeListTypeMerchandise PartnerTypeListType = "Merchandise"

	PartnerTypeListTypeServiceFulfillment PartnerTypeListType = "ServiceFulfillment"

	PartnerTypeListTypeServiceProvider PartnerTypeListType = "ServiceProvider"

	PartnerTypeListTypeOther PartnerTypeListType = "Other"
)

// A data type for Partner Company Type.

type PartnerTypeSimpleType string

// A data type for Agency Seller Type contextual list.
// Examples: TravelAgency, OnlineTravelAgency, TravelManagementCompany

type AgencyCatListType string

const (
	AgencyCatListTypeOnlineTravelAgency AgencyCatListType = "OnlineTravelAgency"

	// Travel agency.
	AgencyCatListTypeTravelAgency AgencyCatListType = "TravelAgency"

	AgencyCatListTypeTravelManagementCompany AgencyCatListType = "TravelManagementCompany"
)

// A data type for Agency Seller Type.
// Examples: TravelAgency, OnlineTravelAgency, TravelManagementCompany

type AgencyCategorySimpleType string

// A data type for Marketing Message Association Base List.

type MarketMsgAssocSimpleType string

const (
	MarketMsgAssocSimpleTypeMedia MarketMsgAssocSimpleType = "Media"

	MarketMsgAssocSimpleTypeOfferItem MarketMsgAssocSimpleType = "OfferItem"

	MarketMsgAssocSimpleTypeOrder MarketMsgAssocSimpleType = "Order"

	MarketMsgAssocSimpleTypeOrderItem MarketMsgAssocSimpleType = "OrderItem"

	MarketMsgAssocSimpleTypePayment MarketMsgAssocSimpleType = "Payment"

	MarketMsgAssocSimpleTypeService MarketMsgAssocSimpleType = "Service"

	MarketMsgAssocSimpleTypeServiceBundle MarketMsgAssocSimpleType = "ServiceBundle"
)

// A data type for Marketing Message Association List.

type MarketMsgBagAssocListType string

// Used for codes in the IATA code tables. Possible values of this pattern are 1, 101, EQP

type IATA_CodeType string

// Used for strings, length 1 to 64.

type StringLength1to64 string

// Used for strings, length 1 to 32.

type StringLength1to32 string

// A data type for Fare Amount Type list
//
// Examples: BT (Bulk); IT (Tour Inclusive)

type FareAmountType string

const (

	// Additional collection
	FareAmountTypeADC FareAmountType = "ADC"

	FareAmountTypeBulk FareAmountType = "Bulk"

	FareAmountTypeIT FareAmountType = "IT"

	FareAmountTypeNOADC FareAmountType = "NOADC"
)

// A data type for Fare Global Indicator contextual list.

type FareIndicatorListType string

const (

	// FareByRule, All fares included (EH/TS)
	//
	FareIndicatorListTypeAL FareIndicatorListType = "AL"

	// Via Atlantic Pacific
	FareIndicatorListTypeAP FareIndicatorListType = "AP"

	// Via Atlantic
	FareIndicatorListTypeAT FareIndicatorListType = "AT"

	// Within Canada.
	FareIndicatorListTypeCA FareIndicatorListType = "CA"

	// Circle trip.
	FareIndicatorListTypeCT FareIndicatorListType = "CT"

	// Within Eastern Hemisphere
	//
	FareIndicatorListTypeEH FareIndicatorListType = "EH"

	// Far East
	FareIndicatorListTypeFE FareIndicatorListType = "FE"

	// FareByRule - For int'l incl.
	// AT/PA/WH/CT/RW
	FareIndicatorListTypeIN FareIndicatorListType = "IN"

	// FareByRule for North America incl
	// US/CA/TB/PV
	FareIndicatorListTypeNA FareIndicatorListType = "NA"

	// Via Pacific
	FareIndicatorListTypePA FareIndicatorListType = "PA"

	// Via Pacific and via North America
	//
	FareIndicatorListTypePN FareIndicatorListType = "PN"

	// Via Polar Route.
	FareIndicatorListTypePO FareIndicatorListType = "PO"

	// Russia - Area 3
	FareIndicatorListTypeRU FareIndicatorListType = "RU"

	// Round The World.
	FareIndicatorListTypeRW FareIndicatorListType = "RW"

	// South Atlantic only
	FareIndicatorListTypeSA FareIndicatorListType = "SA"

	// Via South Polar Route
	FareIndicatorListTypeSP FareIndicatorListType = "SP"

	// Trans-border
	FareIndicatorListTypeTB FareIndicatorListType = "TB"

	// Via Siberia.
	FareIndicatorListTypeTS FareIndicatorListType = "TS"

	// Within the United States.
	//
	FareIndicatorListTypeUS FareIndicatorListType = "US"

	// Within Western Hemisphere
	//
	FareIndicatorListTypeWH FareIndicatorListType = "WH"

	// Any Global
	FareIndicatorListTypeZZ FareIndicatorListType = "ZZ"

	FareIndicatorListTypeOther FareIndicatorListType = "Other"
)

// A data type for Fare Application.

type FareIndicatorSimpleType string

// A data type for Fare Application list constraint.
//
// Examples: Requested, Ticketed, Other

type FareBasisListType string

const (
	FareBasisListTypeRequested FareBasisListType = "Requested"

	FareBasisListTypeTicketed FareBasisListType = "Ticketed"

	FareBasisListTypeOther FareBasisListType = "Other"
)

// A data type for Fare Basis Application.

type FareBasisAppSimpleType string

// A data type for Class of Service Optional Associations.

type COS_AssocListItemType string

const (
	COS_AssocListItemTypeEquipment COS_AssocListItemType = "Equipment"

	COS_AssocListItemTypeFlightGroup COS_AssocListItemType = "FlightGroup"

	COS_AssocListItemTypeFlightOriginDestination COS_AssocListItemType = "FlightOriginDestination"

	COS_AssocListItemTypeFlightSegment COS_AssocListItemType = "FlightSegment"

	COS_AssocListItemTypeMediaGroup COS_AssocListItemType = "MediaGroup"

	COS_AssocListItemTypeMediaItem COS_AssocListItemType = "MediaItem"
)

// A data type for Class of Service Association Type Name.

type COS_AssocListType string

// A data type for Flight Class of Service encoding constraint.

type Flight_COS_SimpleType string

// A data type for Flight Duration Application contextual list.
// Examples: FlightTime, ConnectionTime, StopTime, TotalJourneyTime

type FlightDurationListType string

const (
	FlightDurationListTypeConnectionTime FlightDurationListType = "ConnectionTime"

	FlightDurationListTypeFlightTime FlightDurationListType = "FlightTime"

	FlightDurationListTypeStopTime FlightDurationListType = "StopTime"

	FlightDurationListTypeTotalJourneyTime FlightDurationListType = "TotalJourneyTime"

	FlightDurationListTypeOther FlightDurationListType = "Other"
)

// A data type for Flight Duration Application.
// Examples: FlightTime, ConnectionTime, StopTime, TotalJourneyTime

type FlightDurationAppSimpleType string

// A data type for Flight Segment Type list constraint.

type FlightMileageListType string

const (
	FlightMileageListTypeArrival FlightMileageListType = "Arrival"

	FlightMileageListTypeDeparture FlightMileageListType = "Departure"

	FlightMileageListTypeDestination FlightMileageListType = "Destination"

	FlightMileageListTypeOrigin FlightMileageListType = "Origin"

	FlightMileageListTypeOther FlightMileageListType = "Other"
)

// A data type for Flight Mileage Application.

type FlightMileageAppSimpleType string

// Identifies a flight number (1 to 4 numbers) or OPEN or ARNK.

type FlightNumberType string

// Used for percentage values

type Percentage float64

// A data type for Offer Match Application.

type MatchAppListType string

const (
	MatchAppListTypeATTRIBUTE MatchAppListType = "ATTRIBUTE"

	MatchAppListTypeAFFINITY MatchAppListType = "AFFINITY"

	MatchAppListTypeOther MatchAppListType = "Other"
)

// A data type for Offer Match Results.
//
// Examples: Full, None, Partial, Others

type MatchAppSimpleType string

// A data type for Offer Match Results.

type MatchResultsListType string

const (
	MatchResultsListTypeFull MatchResultsListType = "Full"

	MatchResultsListTypeNone MatchResultsListType = "None"

	MatchResultsListTypePartial MatchResultsListType = "Partial"

	MatchResultsListTypeOther MatchResultsListType = "Other"
)

// A data type for Offer Match Results.
//
// Examples: Full, None, Partial, Others

type MatchResultsSimpleType string

// A data type for Other Offer Optional Associations.

type OtherOfferAssocSimpleType string

const (
	OtherOfferAssocSimpleTypeAircraftEquipment OtherOfferAssocSimpleType = "AircraftEquipment"

	OtherOfferAssocSimpleTypeBaggageDisclosure OtherOfferAssocSimpleType = "BaggageDisclosure"

	OtherOfferAssocSimpleTypeCarryOnAllowance OtherOfferAssocSimpleType = "CarryOnAllowance"

	OtherOfferAssocSimpleTypeCheckedBagAllowance OtherOfferAssocSimpleType = "CheckedBagAllowance"

	OtherOfferAssocSimpleTypeMediaGroup OtherOfferAssocSimpleType = "MediaGroup"

	OtherOfferAssocSimpleTypeMediaItem OtherOfferAssocSimpleType = "MediaItem"

	OtherOfferAssocSimpleTypeOfferDisclosure OtherOfferAssocSimpleType = "OfferDisclosure"

	OtherOfferAssocSimpleTypeOfferInstructions OtherOfferAssocSimpleType = "OfferInstructions"

	OtherOfferAssocSimpleTypeOfferTerms OtherOfferAssocSimpleType = "OfferTerms"

	OtherOfferAssocSimpleTypePenalty OtherOfferAssocSimpleType = "Penalty"
)

// A data type Other Offer Association Type Name.

type OtherAssocListType string

// A data type for Other Order Optional Associations.

type OtherOrderAssocSimpleType string

const (
	OtherOrderAssocSimpleTypePaymentForm OtherOrderAssocSimpleType = "PaymentForm"

	OtherOrderAssocSimpleTypePenalty OtherOrderAssocSimpleType = "Penalty"
)

// A data type Other Order Association Type Name.

type OtherOrderAssocListType string

// A data type forService Combination Rule constrained list.

type SrvcCombineRuleListType string

const (
	SrvcCombineRuleListTypeNotPermitted SrvcCombineRuleListType = "NotPermitted"

	SrvcCombineRuleListTypePermitted SrvcCombineRuleListType = "Permitted"

	SrvcCombineRuleListTypeOther SrvcCombineRuleListType = "Other"
)

// A data type for Service Combination Rule.
//
// Examples: CombinationOK, DoNotCombine, Other

type SrvcCombineRuleSimpleType string

// A data type for Service Coupon Type constrained list.

type SrvceCouponListType string

const (
	SrvceCouponListTypeETicket SrvceCouponListType = "E-Ticket"

	SrvceCouponListTypeFlight SrvceCouponListType = "Flight"

	SrvceCouponListTypeNo_EMD SrvceCouponListType = "No_EMD"

	SrvceCouponListTypeStandalone SrvceCouponListType = "Standalone"

	SrvceCouponListTypeTicket SrvceCouponListType = "Ticket"

	SrvceCouponListTypeOther SrvceCouponListType = "Other"
)

// A data type for Service Coupon Type.
//
// Examples: E-Ticket, Flight, No_EMD, Standalone, Ticket, Other

type SrvceCouponSimpleType string

// A data type for Service Associations.

type ServiceAssocListItemType string

const (
	ServiceAssocListItemTypeAirport ServiceAssocListItemType = "Airport"

	ServiceAssocListItemTypeDisclosure ServiceAssocListItemType = "Disclosure"

	ServiceAssocListItemTypeMediaGroup ServiceAssocListItemType = "MediaGroup"

	ServiceAssocListItemTypeMediaItem ServiceAssocListItemType = "MediaItem"

	ServiceAssocListItemTypeOffer ServiceAssocListItemType = "Offer"

	ServiceAssocListItemTypeOfferItem ServiceAssocListItemType = "OfferItem"

	ServiceAssocListItemTypePenalty ServiceAssocListItemType = "Penalty"
)

// A data type Service Association Type Name.

type ServiceAssocListType string

// Used for strings, length 1 to 8.

type StringLength1to8 string

// Used for strings, length 1 to 16.

type StringLength1to16 string

// Used for strings, length 1 to 5.

type StringLength1to5 string

// Use for numeric values, from 1 to 4 inclusive.

type Numeric1to4 int32

// Used for Alpha-Numeric Strings, length 1 to 19

type AlphaNumericStringLength1to19 string

// Used for strings, length 1 to 128.

type StringLength1to128 string

type PointOfSaleCodeType string

type GeoSpecCodeType string

type OfferedServiceType string

const (
	OfferedServiceTypeTransportation OfferedServiceType = "Transportation"

	OfferedServiceTypeBaggage OfferedServiceType = "Baggage"

	OfferedServiceTypeSeats OfferedServiceType = "Seats"

	OfferedServiceTypeOther OfferedServiceType = "Other"
)

// Used for strings, length 1 to 255.

type StringLength1to255 string

type Address struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Address"`

	AddressCore *AddressCore `xml:"AddressCore,omitempty"`

	AddressDetail *AddressDetail `xml:"AddressDetail,omitempty"`
}

type AddressCore AddressCoreType

type AddressDetail AddressDetailType

type PaymentAddress PaymentAddrType

type SimpleAddress SimpleAddrType

type StructuredAddress StructuredAddrType

type AirportCode struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AirportCode"`

	Value AirportCitySimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Attributes AttributesType

type AllowanceDescription BagAllowanceDescType

type CarryOnBags struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CarryOnBags"`

	*CarryOnAllowanceType
}

type CheckedBags struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CheckedBags"`

	*CheckedBagAllowanceType
}

type DimensionAllowance BagAllowanceDimensionType

type PieceAllowance struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PieceAllowance"`

	*BagAllowancePieceType
}

type WeightAllowance struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 WeightAllowance"`

	*BagAllowanceWeightType

	DimensionAllowance []*DimensionAllowance `xml:"DimensionAllowance,omitempty"`
}

type BookingReference struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BookingReference"`

	*BookingReferenceType
}

type BookingReferences struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BookingReferences"`

	// Booking Reference detail.
	BookingReference []*BookingReferenceType `xml:"BookingReference,omitempty"`
}

type CityCode struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CityCode"`

	*CityCodeType
}

type CityName string

type AddressContact AddressContactType

type Contacts struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Contacts"`

	Contact []*Contact__1 `xml:"Contact,omitempty"`
}

type EmailContact EmailType

type PhoneContact PhoneContactType

type PhoneNumber PhoneType

type OtherContactMethod OtherContactMethodType

type Commission CommissionType

type CountryCode struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CountryCode"`

	*CountryCodeType
}

type CurrencyAmount CurrencyAmountOptType

type CurrCode struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CurrCode"`

	Value CurrencySimpleType `xml:",chardata"`

	// A globally unique identifier for this object instance.

	Id string `xml:"id,attr,omitempty"`

	// Association(s) between this object and any metadata instance(s).

	Metadata *InstanceClassRefSimpleType `xml:"metadata,attr,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Currency code Application.
	// Examples: Actual, Display, Requested, Conversion, Other

	Application *CurrencyAppSimpleType `xml:"application,attr,omitempty"`

	// Decimal position in fare amount.  Example: 2

	NumberOfDecimals int32 `xml:"NumberOfDecimals,attr,omitempty"`
}

type EncodedCurrencyAmount CurrencyAmountEncodedType

type Description struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Description"`

	*DescriptionType

	OriginDestinationReference []*OriginDestinationReference `xml:"OriginDestinationReference,omitempty"`
}

type DescriptionReferences string

type MediaLink struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 MediaLink"`

	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type Directions struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Directions"`

	Direction []*Direction `xml:"Direction,omitempty"`
}

type Direction DirectionsType

type Disclosures struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Disclosures"`

	*DisclosureType
}

type DiscountAmount CurrencyAmountOptType

type DiscountPercent int32

type InstantPurchase IATA_CodeType

type KeyWord struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 KeyWord"`

	*KeyWordType
}

type LanguageCode LanguageCodeType

type Languages struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Languages"`

	LanguageCode *LanguageCode `xml:"LanguageCode,omitempty"`
}

type NodePath NodePathType

type BankAccount BankAccountType

type Cash struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Cash"`

	// When true, payment is being made in cash.

	CashInd bool `xml:"CashInd,attr,omitempty"`
}

type Check struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Check"`

	// Cheque number
	Number int32 `xml:"Number,omitempty"`

	// Cheque signed date
	SignedDate string `xml:"SignedDate,omitempty"`

	// Name of the Payee
	OrderTo string `xml:"OrderTo,omitempty"`
}

type DirectBill DirectBillType

type LoyaltyRedemption struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 LoyaltyRedemption"`

	// The quantity of loyalty units being redeemed. Example: 15000
	RedemptionQuantity int32 `xml:"RedemptionQuantity,omitempty"`

	Certificates *Certificates__1 `xml:"Certificates,omitempty"`

	MemberNumber *MemberNumber__1 `xml:"MemberNumber,omitempty"`

	// Promotion Code.
	//
	// Note: Promotion code is the identifier used by the host to link directly with a specific named advertising campaign. By including the required code, the client is able to gain access to special offers which may have been created for a specifically targeted group via a CRM system or for a wider advertising campaign using Television or press adverts.
	PromotionCode *ContextSimpleType `xml:"PromotionCode,omitempty"`

	// List of vendor codes associated with the promotion.
	PromoVendorCode []*ContextSimpleType `xml:"PromoVendorCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MiscChargeOrder struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 MiscChargeOrder"`

	// The ticket number of the miscellaneous charge order (MCO).
	TicketNumber *ContextSimpleType `xml:"TicketNumber,omitempty"`
}

type Other struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Other"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type PaymentCard PaymentCardType

type Voucher struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Voucher"`

	// Voucher ID or Number. Example: XX12345
	Number *ShortDescSimpleType `xml:"Number,omitempty"`

	EffectiveExpireDate *EffectiveExpireDate__1 `xml:"EffectiveExpireDate,omitempty"`

	Name *Name__1 `xml:"Name,omitempty"`
}

type Penalty PenaltyDetailType

type Position struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Position"`

	*PositionType
}

type DetailCurrencyPrice DetailCurrencyPriceType

type AwardPricing AwardPriceUnitType

type CombinationPricing CombinationPriceType

type EncodedCurrencyPrice EncodedPriceType

type SimpleCurrencyPrice SimpleCurrencyPriceType

type CurrencyAmountValue CurrencyAmountOptType

type PercentageValue WholePercentageSimpleType

type Remarks RemarkType

type ShoppingResponseID ShoppingResponseID_Type

type TaxExemption TaxExemptionType

type TicketDesig TicketDesignatorType

type BilateralTimeLimits BilateralTimeLimitsType

type DepositTimeLimit struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 DepositTimeLimit"`

	*DepositTimeLimitType
}

type InventoryGuaranteeTimeLimits struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 InventoryGuaranteeTimeLimits"`

	*CoreDateGrpType
}

type NamingTimeLimit struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 NamingTimeLimit"`

	*NamingTimeLimitType
}

type PaymentTimeLimit PaymentTimeLimitType

type PriceGuaranteeTimeLimits PriceGuaranteeTimeLimitType

type TicketingTimeLimits struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 TicketingTimeLimits"`

	*TicketingTimeLimitType
}

type PrimaryContact struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PrimaryContact"`

	Name *Name__2 `xml:"Name,omitempty"`

	Contact []*Contact__2 `xml:"Contact,omitempty"`
}

type AirlineID struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AirlineID"`

	*AirlineID_Type
}

type RetailerID RetailerID_Type

type MarketingCarrierAirline MarketingCarrierType

type ValidatingCarrier AirlineDesigSimpleType

type AggregatorID AggregatorID_Type

type RoleOfIntermediaryReference RoleOfIntermediaryReferenceType

type SystemID SystemID_Type

type AgentUser AgentUserType

type AgencyID AgencyID_Type

type AgentUserID AgentUserID_Type

type PartnerID PartnerCompanyID_Type

type Document MsgDocumentType

type DefaultPolicy PolicyDefaultType

type Policies struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Policies"`

	Policy []*Policy__1 `xml:"Policy,omitempty"`
}

type PolicyAugmentation PolicyAugmentationType

type PolicyLink string

type PointOfSale PointOfSaleType

type Party MsgPartiesType

type ORA_Sender ORA_AirlineSenderType

type POA_Sender POA_AirlineSenderType

type AggregatorSender AggregatorSenderType

type AgentUserSender AgentUserSenderType

type EnabledSystemSender EnabledSysSenderType

type MarketingCarrierSender MarketingCarrierSenderType

type OperatingCarrierSender OperatingCarrierSenderType

type RetailPartnerSender RetailSupplierSenderType

type TravelAgencySender TravelAgencySenderType

type CorporateSender struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CorporateSender"`

	// Corporate name
	// Example:  XYZ Corporation
	Name *PropertyNameSimpleType_ `xml:"Name,omitempty"`

	// Corporate ID
	ID string `xml:"ID,omitempty"`

	// Corporate code used for pricing special fares
	CorporateCode *ProperNameSimpleType `xml:"CorporateCode,omitempty"`

	// Agency Seller IATA number. Example: 98417900
	IATA_Number *IATA_NbrSimpleType `xml:"IATA_Number,omitempty"`
}

type CorporateParticipant struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CorporateParticipant"`

	// Corporate name
	// Example:  XYZ Corporation
	Name *PropertyNameSimpleType_ `xml:"Name,omitempty"`

	// Corporate ID
	ID string `xml:"ID,omitempty"`

	// Corporate code used for pricing special fares
	CorporateCode *ProperNameSimpleType `xml:"CorporateCode,omitempty"`

	// Agency Seller IATA number. Example: 98417900
	IATA_Number *IATA_NbrSimpleType `xml:"IATA_Number,omitempty"`
}

type AggregatorRecipient AggregatorRecipientType

type AgentUserRecipient AgentUserRecipientType

type EnabledSystemRecipient EnabledSysRecipientType

type MarketingCarrierRecipient MarketingCarrierRecipientType

type OperatingCarrierRecipient OperatingCarrierRecipientType

type ORA_Recipient ORA_AirlineRecipientType

type POA_Recipient POA_AirlineRecipientType

type RetailPartnerRecipient RetailSupplierRecipientType

type TravelAgencyRecipient TravelAgencyRecipientType

type AggregatorParticipant AggregatorParticipantType

type EnabledSystemParticipant EnabledSysParticipantType

type MarketingCarrierParticipant MarketingCarrierParticipantType

type OperatingCarrierParticipant OperatingCarrierParticipantType

type ORA_Participant ORA_AirlineParticipantType

type POA_Participant POA_AirlineParticipantType

type RetailSupplierParticipant RetailSupplierParticipantType

type TravelAgencyParticipant TravelAgencyParticipantType

type Errors ErrorsType

type Alerts AlertsType

type InventoryDiscrepancyAlert InvDiscrepencyAlertType

type PIN_AuthenticationAlert PIN_AuthTravelerType

type SecurePaymentAlert SecurePaymentAlertType

type ACS_TxnReference struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ACS_TxnReference"`

	Value string `xml:",chardata"`

	// Transaction Reference context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type ReservationInfo struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ReservationInfo"`

	*SecurePaymentPaxInfoType
}

type SPM_TxnReference struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SPM_TxnReference"`

	Value string `xml:",chardata"`

	// Transaction Reference context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type MarketingMessages struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 MarketingMessages"`

	MarketMessage []*MarketMessage__1 `xml:"MarketMessage,omitempty"`
}

type Notices struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Notices"`

	Notice []*Notice__1 `xml:"Notice,omitempty"`
}

type InventoryGuaranteeNotif InvGuaranteeNoticeType

type PaymentRulesNotice PaymentRulesNoticeType

type PriceVarianceNotice struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PriceVarianceNotice"`

	*PriceVarianceRuleNoticeType
}

type PricingParametersNotice PricingParametersNoticeType

type ServiceFilterNotice ServiceFilterNoticeType

type TaxExemptionNotice TaxExemptionNoticeType

type BagDisclosureList ListOfBagDisclosureType

type ContentSourceList ListOfContentSourceType

type DisclosureList ListOfDisclosureType

type FareList struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FareList"`

	FareGroup []*FareGroup__1 `xml:"FareGroup,omitempty"`
}

type ClassOfServiceList ListOfClassOfServiceType

type MediaList ListOfMediaType

type InstructionsList ListOfOfferInstructionsType

type PenaltyList ListOfOfferPenaltyType

type TermsList ListOfOfferTermsType

type PriceClassList ListOfPriceClassType

type ServiceList struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ServiceList"`

	Service []*ServiceDetailType `xml:"Service,omitempty"`
}

type ServiceBundleList ListOfServiceBundleType

type FareCode IATA_CodeType

type FareBasisCode FareBasisCodeType

type Fare FareType

type FareDetail FareDetailType

type AdvancePurchase struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AdvancePurchase"`

	Value string `xml:",chardata"`

	// Restriction context. Example: EARLIEST, LATEST, Other

	Context *AdvPurchaseSimpleType `xml:"Context,attr,omitempty"`
}

type AdvanceTicketing struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AdvanceTicketing"`

	AdvanceReservation *AdvanceReservation__1 `xml:"AdvanceReservation,omitempty"`

	AdvanceDeparture *AdvanceDeparture__1 `xml:"AdvanceDeparture,omitempty"`
}

type CorporateFare struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CorporateFare"`

	*KeyObjectBaseType

	Contract *Contract__1 `xml:"Contract,omitempty"`

	Account *Account__1 `xml:"Account,omitempty"`

	CompanyIndex *CompanyIndex__1 `xml:"CompanyIndex,omitempty"`
}

type FareRules FareRulesType

type MinimumStay struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 MinimumStay"`

	DayQuantity *DayQuantity__1 `xml:"DayQuantity,omitempty"`

	// Minimum  stay represented as a week day number. Example: 1 (Monday)

	DayOfWeek int32 `xml:"DayOfWeek,omitempty"`
}

type MaximumStay struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 MaximumStay"`

	DayQuantity *DayQuantity__2 `xml:"DayQuantity,omitempty"`

	// Maximum stay represented as a week day number. Example: 1 (Monday)

	DayOfWeek int32 `xml:"DayOfWeek,omitempty"`
}

type TourCode ContextSimpleType

type FareRulesRemarks struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FareRulesRemarks"`

	FareRulesRemark []*FareRulesRemark__1 `xml:"FareRulesRemark,omitempty"`
}

type FareBasisCityPair ContextSimpleType

type FareFiledIn FareFilingType

type FiledFare struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FiledFare"`

	*FileFareType
}

type FareInd IATA_CodeType

type FareQualifierCodes struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FareQualifierCodes"`

	FareQualifierCode []*FareQualifierType `xml:"FareQualifierCode,omitempty"`
}

type FareReferenceKey struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FareReferenceKey"`

	Value ShortDescSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FareRuleCategory IATA_CodeType

type FareTextInd string

const (
	FareTextIndFullText FareTextInd = "FullText"

	FareTextIndMiniRule FareTextInd = "MiniRule"
)

type FlightNumber struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FlightNumber"`

	Value FlightNumberType `xml:",chardata"`

	// Flight Operational Suffix

	OperationalSuffix string `xml:"OperationalSuffix,attr,omitempty"`
}

type ClassOfService FlightCOS_CoreType

type StopLocations StopLocationType

type Arrival FlightArrivalType

type ArrivalCode struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ArrivalCode"`

	Value AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type Departure struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Departure"`

	*FlightDepartureType
}

type DepartureCode struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 DepartureCode"`

	Value AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type DepartureDate string

type FlightDistance FlightDistanceType

type FlightDuration FlightDurationType

type TotalJourney TotalJourneyType

type FlightStatus IATA_CodeType

type Frequency FlightFrequencyType

type OnTimePerformance struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OnTimePerformance"`

	// Accuracy percentage of on time performance of a leg.

	Percent *Percentage `xml:"Percent,attr,omitempty"`

	// Month and year for which the on-time performance has been calculated.

	Period string `xml:"Period,attr,omitempty"`

	// Used if unable to provide information or is not applicable.

	Type string `xml:"Type,attr,omitempty"`

	// The percentage of arrivals that were more than 30 minutes late.

	LatePercent *Percentage `xml:"LatePercent,attr,omitempty"`

	// The percentage of cancellations.

	CancelledPercent *Percentage `xml:"CancelledPercent,attr,omitempty"`

	// When true, the flight was late more than 30 minutes of scheduled arrival more than 50 percent of the time.

	SpecialHighlightInd bool `xml:"SpecialHighlightInd,attr,omitempty"`
}

type FlightMileage FlightMileageType

type ResDateTime struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ResDateTime"`

	// Reservation (order/ booking) timestamp.  Example: 2017-01-13T13:20:00
	Timestamp string `xml:"Timestamp,omitempty"`

	Date *Date__1 `xml:"Date,omitempty"`
}

type FlightSegmentType IATA_CodeType

type AircraftCode struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AircraftCode"`

	*AircraftCodeType
}

type Equipment AircraftSummaryType

type CabinType struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CabinType"`

	*CodesetType

	// Cabin class marketing name. Example: Premium Economy
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	OriginDestinationReferences []*OriginDestinationReferences `xml:"OriginDestinationReferences,omitempty"`
}

type OriginDestination struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OriginDestination"`

	*OriginDestinationType

	TotalJourney *TotalJourney `xml:"TotalJourney,omitempty"`

	FlightReferences *FlightReferences `xml:"FlightReferences,omitempty"`
}

type OfferItemID ItemID_Type

type OrderItemID ItemID_Type

type BagDetailAssociation struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BagDetailAssociation"`

	BagDisclosureReferences *BagDisclosureReferences `xml:"BagDisclosureReferences,omitempty"`

	CheckedBagReferences *CheckedBagReferences `xml:"CheckedBagReferences,omitempty"`

	CarryOnReferences *CarryOnReferences `xml:"CarryOnReferences,omitempty"`
}

type BagDisclosureKey string

type BagDisclosureReferences InstanceClassRefSimpleType

type CheckedBagReferences InstanceClassRefSimpleType

type CarryOnReferences InstanceClassRefSimpleType

type EquivalentID_Key string

type OriginDestinationKey string

type OriginDestinationReference string

type OriginDestinationReferences InstanceClassRefSimpleType

type FlightReferences struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FlightReferences"`

	Value InstanceClassRefSimpleType `xml:",chardata"`

	// Flight slice on point. Example: TPA
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code

	OnPoint *AirportCitySimpleType `xml:"OnPoint,attr,omitempty"`

	// Flight slice off point. Example: LHR
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code

	OffPoint *AirportCitySimpleType `xml:"OffPoint,attr,omitempty"`
}

type FlightSegmentReference struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FlightSegmentReference"`

	Cabin *SimpleAircraftCabinType `xml:"Cabin,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Ref string `xml:"ref,attr,omitempty"`

	ClassOfService *FlightCOS_CoreType `xml:"ClassOfService,omitempty"`

	BagDetailAssociation *BagDetailAssociation `xml:"BagDetailAssociation,omitempty"`

	// To indicate married segment group number.
	// Exmple 5
	MarriedSegmentGroup int32 `xml:"MarriedSegmentGroup,omitempty"`
}

type SegmentKey string

type SegmentReferences struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SegmentReferences"`

	Value InstanceClassRefSimpleType `xml:",chardata"`

	// Flight slice on point. Example: TPA
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code

	OnPoint *AirportCitySimpleType `xml:"OnPoint,attr,omitempty"`

	// Flight slice off point. Example: LHR
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code

	OffPoint *AirportCitySimpleType `xml:"OffPoint,attr,omitempty"`
}

type GroupReference string

type MediaGroupreference string

type MediaItemReference string

type OfferReferences InstanceClassRefSimpleType

type OfferInstructionReferences string

type OfferPenaltyReferences string

type OfferTermReferences InstanceClassRefSimpleType

type PassengerReference string

type PassengerReferences InstanceClassRefSimpleType

type PriceClassReference string

type SeatReference string

type ServiceReference string

type ServiceReferences InstanceClassRefSimpleType

type BundleReference string

type AddressMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AddressMetadatas"`

	AddressMetadata []*AddressMetadata `xml:"AddressMetadata,omitempty"`
}

type AddressMetadata AddressMetadataType

type AircraftMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AircraftMetadatas"`

	AircraftMetadata []*AircraftMetadata `xml:"AircraftMetadata,omitempty"`
}

type AircraftMetadata AircraftMetadataType

type AirportMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AirportMetadatas"`

	AirportMetadata []*AirportMetadata `xml:"AirportMetadata,omitempty"`
}

type AirportMetadata AirportMetadataType

type CityMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CityMetadatas"`

	CityMetadata []*CityMetadata `xml:"CityMetadata,omitempty"`
}

type CityMetadata CityMetadataType

type CodesetMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CodesetMetadatas"`

	CodesetMetadata []*CodesetMetadata `xml:"CodesetMetadata,omitempty"`
}

type CodesetMetadata CodesetMetadataType

type ContactMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ContactMetadatas"`

	ContactMetadata []*ContactMetadata `xml:"ContactMetadata,omitempty"`
}

type ContactMetadata ContactMetadataType

type ContentMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ContentMetadatas"`

	ContentMetadata []*ContentMetadata `xml:"ContentMetadata,omitempty"`
}

type ContentMetadata ContentMetadataType

type CountryMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CountryMetadatas"`

	CountryMetadata []*CountryMetadata `xml:"CountryMetadata,omitempty"`
}

type CountryMetadata CountryMetadataType

type CurrencyMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CurrencyMetadatas"`

	CurrencyMetadata []*CurrencyMetadata `xml:"CurrencyMetadata,omitempty"`
}

type CurrencyMetadata struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CurrencyMetadata"`

	*CurrencyMetadataType
}

type DescriptionMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 DescriptionMetadatas"`

	DescriptionMetadata []*DescriptionMetadata `xml:"DescriptionMetadata,omitempty"`
}

type DescriptionMetadata DescriptionMetadataType

type EquivalentID_Metadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 EquivalentID_Metadatas"`

	EquivalentID_Metadata []*EquivalentID_Metadata `xml:"EquivalentID_Metadata,omitempty"`
}

type EquivalentID_Metadata EquivalentID_MetadataType

type LanguageMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 LanguageMetadatas"`

	LanguageMetadata []*LanguageMetadata `xml:"LanguageMetadata,omitempty"`
}

type LanguageMetadata LanguageMetadataType

type MediaMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 MediaMetadatas"`

	MediaMetadata []*MediaMetadata `xml:"MediaMetadata,omitempty"`
}

type MediaMetadata MediaMetadataType

type PaymentCardMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PaymentCardMetadatas"`

	PaymentCardMetadata []*PaymentCardMetadata `xml:"PaymentCardMetadata,omitempty"`
}

type PaymentCardMetadata PaymentCardMetadataType

type PaymentFormMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PaymentFormMetadatas"`

	PaymentFormMetadata []*PaymentFormMetadata `xml:"PaymentFormMetadata,omitempty"`
}

type PaymentFormMetadata PaymentFormMetadataType

type PriceMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PriceMetadatas"`

	PriceMetadata []*PriceMetadata `xml:"PriceMetadata,omitempty"`
}

type PriceMetadata PriceMetadataType

type RuleMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 RuleMetadatas"`

	RuleMetadata []*RuleMetadata `xml:"RuleMetadata,omitempty"`
}

type RuleMetadata RuleMetadataType

type StateProvMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 StateProvMetadatas"`

	StateProvMetadata []*StateProvMetadata `xml:"StateProvMetadata,omitempty"`
}

type StateProvMetadata StateProvMetadataType

type ZoneMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ZoneMetadatas"`

	ZoneMetadata []*ZoneMetadata `xml:"ZoneMetadata,omitempty"`
}

type ZoneMetadata ZoneMetadataType

type Baggage struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Baggage"`

	CheckedBagMetadatas *CheckedBagMetadatas `xml:"CheckedBagMetadatas,omitempty"`

	CarryOnBagMetadatas *CarryOnBagMetadatas `xml:"CarryOnBagMetadatas,omitempty"`

	BaggageDisclosureMetadatas *BaggageDisclosureMetadatas `xml:"BaggageDisclosureMetadatas,omitempty"`

	BaggageDetailMetadata *BaggageDetailMetadata `xml:"BaggageDetailMetadata,omitempty"`

	BaggageQueryMetadata *BaggageQueryMetadata `xml:"BaggageQueryMetadata,omitempty"`
}

type Flight struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Flight"`

	FlightMetadatas *FlightMetadatas `xml:"FlightMetadatas,omitempty"`

	ItineraryMetadata *ItineraryMetadata `xml:"ItineraryMetadata,omitempty"`
}

type Location struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Location"`

	DirectionMetadatas *DirectionMetadatas `xml:"DirectionMetadatas,omitempty"`
}

type Offer struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Offer"`

	DisclosureMetadatas *DisclosureMetadatas `xml:"DisclosureMetadatas,omitempty"`

	OfferMetadatas *OfferMetadatas `xml:"OfferMetadatas,omitempty"`

	OfferInstructionMetadatas *OfferInstructionMetadatas `xml:"OfferInstructionMetadatas,omitempty"`

	OfferPenaltyMetadatas *OfferPenaltyMetadatas `xml:"OfferPenaltyMetadatas,omitempty"`

	OfferTermsMetadatas *OfferTermsMetadatas `xml:"OfferTermsMetadatas,omitempty"`
}

type Pricing struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Pricing"`

	DiscountMetadatas *DiscountMetadatas `xml:"DiscountMetadatas,omitempty"`
}

type Qualifier struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Qualifier"`

	BaggagePricingQualifier *BaggagePricingQualifier `xml:"BaggagePricingQualifier,omitempty"`

	ExistingOrderQualifier *ExistingOrderQualifier `xml:"ExistingOrderQualifier,omitempty"`

	PaymentCardQualifiers []*PaymentCardQualifiers `xml:"PaymentCardQualifiers,omitempty"`

	ProgramQualifiers *ProgramQualifiers `xml:"ProgramQualifiers,omitempty"`

	PromotionQualifiers *PromotionQualifiers `xml:"PromotionQualifiers,omitempty"`

	SeatQualifier *SeatQualifier `xml:"SeatQualifier,omitempty"`

	ServiceQualifier *ServiceQualifier `xml:"ServiceQualifier,omitempty"`

	SocialMediaQualifiers *SocialMediaQualifiers `xml:"SocialMediaQualifiers,omitempty"`

	SpecialFareQualifiers *SpecialFareQualifiers `xml:"SpecialFareQualifiers,omitempty"`

	SpecialNeedQualifiers *SpecialNeedQualifiers `xml:"SpecialNeedQualifiers,omitempty"`

	TripPurposeQualifier *TripPurposeQualifier `xml:"TripPurposeQualifier,omitempty"`
}

type Seat struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Seat"`

	SeatMetadatas *SeatMetadatas `xml:"SeatMetadatas,omitempty"`

	SeatMapMetadatas *SeatMapMetadatas `xml:"SeatMapMetadatas,omitempty"`
}

type ShopMetadataGroup struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ShopMetadataGroup"`

	Baggage *Baggage `xml:"Baggage,omitempty"`

	Fare *Fare `xml:"Fare,omitempty"`

	Flight *Flight `xml:"Flight,omitempty"`

	Location *Location `xml:"Location,omitempty"`

	Offer *Offer `xml:"Offer,omitempty"`

	Pricing *Pricing `xml:"Pricing,omitempty"`

	Qualifier *Qualifier `xml:"Qualifier,omitempty"`

	Seat *Seat `xml:"Seat,omitempty"`
}

type BaggageDetailMetadata BaggageDetailMetadataType

type BaggageDisclosureMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BaggageDisclosureMetadatas"`

	BaggageDisclosureMetadata []*BaggageDisclosureMetadata `xml:"BaggageDisclosureMetadata,omitempty"`
}

type BaggageDisclosureMetadata BaggageDisclosureMetadataType

type BaggageQueryMetadata BaggageQueryMetadataType

type CarryOnBagMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CarryOnBagMetadatas"`

	CarryOnBagMetadata []*CarryOnBagMetadata `xml:"CarryOnBagMetadata,omitempty"`
}

type CarryOnBagMetadata BaggageCarryOnMetadataType

type CheckedBagMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 CheckedBagMetadatas"`

	CheckedBagMetadata []*CheckedBagMetadata `xml:"CheckedBagMetadata,omitempty"`
}

type CheckedBagMetadata BaggageCheckedMetadataType

type FlightMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FlightMetadatas"`

	FlightMetadata []*FlightMetadata `xml:"FlightMetadata,omitempty"`
}

type FlightMetadata struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FlightMetadata"`

	*FlightMetadataType
}

type ItineraryMetadata ItineraryMetadataType

type DirectionMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 DirectionMetadatas"`

	DirectionMetadata []*DirectionMetadata `xml:"DirectionMetadata,omitempty"`
}

type DirectionMetadata DirectionsMetadataType

type DisclosureMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 DisclosureMetadatas"`

	DisclosureMetadata []*DisclosureMetadata `xml:"DisclosureMetadata,omitempty"`
}

type DisclosureMetadata DisclosureMetadataType

type OfferInstructionMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OfferInstructionMetadatas"`

	OfferInstructionMetadata []*OfferInstructionMetadata `xml:"OfferInstructionMetadata,omitempty"`
}

type OfferInstructionMetadata OfferInstructionMetadataType

type OfferMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OfferMetadatas"`

	OfferMetadata []*OfferMetadata `xml:"OfferMetadata,omitempty"`
}

type OfferMetadata OfferItemMetadataType

type OfferPenaltyMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OfferPenaltyMetadatas"`

	OfferPenaltyMetadata []*OfferPenaltyMetadata `xml:"OfferPenaltyMetadata,omitempty"`
}

type OfferPenaltyMetadata PenaltyMetadataType

type OfferTermsMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OfferTermsMetadatas"`

	OfferTermsMetadata []*OfferTermsMetadata `xml:"OfferTermsMetadata,omitempty"`
}

type OfferTermsMetadata OfferTermsMetadataType

type DiscountMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 DiscountMetadatas"`

	DiscountMetadata []*DiscountMetadata `xml:"DiscountMetadata,omitempty"`
}

type DiscountMetadata DisclosureMetadataType

type SeatMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SeatMetadatas"`

	SeatMetadata []*SeatMetadata `xml:"SeatMetadata,omitempty"`
}

type SeatMetadata SeatMetadataType

type SeatMapMetadatas struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SeatMapMetadatas"`

	SeatMapMetadata []*SeatMapMetadata `xml:"SeatMapMetadata,omitempty"`
}

type SeatMapMetadata SeatMapMetadataType

type PassengerMetadata PassengerMetadataType

type ApplicableFlight struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ApplicableFlight"`

	*FlightInfoAssocType
}

type AssociatedService ServiceInfoAssocType

type AssociatedPassenger PassengerInfoAssocType

type IncludedService ServiceInfoAssocType

type OfferDetailAssociation OfferDetailInfoAssocType

type OtherAssociation OtherOfferAssocType

type OfferAssociations struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OfferAssociations"`

	*OfferAssociationsType
}

type ClassOfServiceUpgrade OfferClassUpgradeType

type FreeFormTextInstruction FreeFormInstructionsType

type InventoryGuarantee InvGuaranteeType

type Match OfferMatchType

type PTC_Priced PTC_QuantityPricedType

type AllOffersSnapshot AirlineOffersSnapshotType

type AirlineOfferSnapshot AirlineOffersSnapshotType

type PriceGuaranteeTimeLimit struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PriceGuaranteeTimeLimit"`

	*PriceGuarTimeLimitType
}

type TicketByTimeLimit TicketByTimeLimitType

type Associations OrderItemAssociationType

type OrderAssociations OrderItemAssociationType

type OrderItemDetails struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderItemDetails"`

	OrderItemDetail []*OrderItemDetail__1 `xml:"OrderItemDetail,omitempty"`

	OrderItemSettlement *SettlementType `xml:"OrderItemSettlement,omitempty"`
}

type OrderInstructions struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderInstructions"`

	*OrderInstructionType

	ClassOfServiceUpgrade *ClassOfServiceUpgrade `xml:"ClassOfServiceUpgrade,omitempty"`

	FreeFormTextInstruction *FreeFormTextInstruction `xml:"FreeFormTextInstruction,omitempty"`

	// Special Need Order booking method.
	// Examples:
	// AE (by SSR-Special Service Request)
	//
	// Encoding scheme: PADIS Code List for data element 9750 - Option
	SpecialBookingInstruction *IATA_CodeType `xml:"SpecialBookingInstruction,omitempty"`
}

type OrderCommision OrderCommissionType

type OrderKeys OrderKeysType

type OrderID OrderID_Type

type BaggageItem BaggageItemType

type DetailedFlightItem FlightItemType

type OtherItem OtherItemType

type SeatItem struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SeatItem"`

	*SeatItemType
}

type TimeLimits struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 TimeLimits"`

	PaymentTimeLimit *PaymentTimeLimit__1 `xml:"PaymentTimeLimit,omitempty"`

	PriceGuaranteeTimeLimit *PriceGuaranteeTimeLimit `xml:"PriceGuaranteeTimeLimit,omitempty"`

	DepositTimeLimit *DepositTimeLimit `xml:"DepositTimeLimit,omitempty"`

	TicketingTimeLimits *TicketingTimeLimits `xml:"TicketingTimeLimits,omitempty"`

	NamingTimeLimit *NamingTimeLimit `xml:"NamingTimeLimit,omitempty"`

	BilateralTimeLimits *BilateralTimeLimits `xml:"BilateralTimeLimits,omitempty"`
}

type BankAccountMethod BankAccountMethodType

type CashMethod CashMethodType

type DirectBillMethod DirectBillMethodType

type MiscChargeMethod MiscChargeMethodType

type OtherMethod OtherMethodType

type PaymentCardMethod PaymentCardMethodType

type RedemptionMethod RedemptionMethodType

type VoucherMethod VoucherMethodType

type AltBaggageOffer AltBaggageOfferType

type AltPricedFlightOffer AltPricedFlightOfferType

type AltOtherOffer AltOtherOfferType

type AltSeatOffer AltSeatOfferType

type ItemStatus IATA_CodeType

type CarrierFeeInfo CarrierFeeInfoType

type AddlReferenceID AdditionalReferenceType

type AgentID struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AgentID"`

	*CouponAgentType
}

type CheckedInAirlineInfo CouponSoldAirlineType

type CurrentAirlineInfo CouponSoldAirlineType

type FlownAirlineInfo CouponSoldAirlineType

type InConnectionWithInfo InConnectionWithType

type IssuingAirlineInfo struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 IssuingAirlineInfo"`

	*AirlineIssuanceType
}

type OriginalIssueInfo struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OriginalIssueInfo"`

	*OriginalIssueType
}

type PricingInfo struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PricingInfo"`

	*PricingInfoType
}

type TicketDocument struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 TicketDocument"`

	*CouponTicketDocType

	// When true, the credit/debit card used for purchase must be presented.

	PresentCreditCardInd bool `xml:"PresentCreditCardInd,attr,omitempty"`

	// When true, a penalty restriction applies.

	PenaltyRestrictionInd bool `xml:"PenaltyRestrictionInd,attr,omitempty"`

	// When true, the document is non-commissionable.

	NonCommissionableInd bool `xml:"NonCommissionableInd,attr,omitempty"`

	// When true, the document is non-interlineable.

	NonInterlineableInd bool `xml:"NonInterlineableInd,attr,omitempty"`

	// When true, the document is non reissuable and/or exchangeable.

	NonReissuableNonExchangInd bool `xml:"NonReissuableNonExchangInd,attr,omitempty"`

	// When true, the fare is non refundable.

	NonRefundableInd bool `xml:"NonRefundableInd,attr,omitempty"`

	// When true, a tax has been collected and is due to a local government from the validating carrier.

	TaxOnEMD_Ind bool `xml:"TaxOnEMD_Ind,attr,omitempty"`

	// When true, this is the ticket/document number for a ticket/document that is being exchanged.

	ExchTicketNbrInd bool `xml:"ExchTicketNbrInd,attr,omitempty"`

	// When true, this is the primary ticket/document number.

	PrimaryDocInd bool `xml:"PrimaryDocInd,attr,omitempty"`
}

type TicketDocQuantity int32

type BaseFare BaseFareTransactionType

type EquivFare EquivFareTransactionType

type FareInfo ET_FareInfoType

type Total TotalFareTransactionType

type UnstructuredFareCalcInfo UnstructuredFareCalcType

type PaymentForm AcceptedPaymentFormType

type Security struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Security"`

	*SecurityType
}

type RFIC IATA_CodeType

type AirportFulfillmentLocation SrvcLocationAirportType

type OtherFulfillmentLocation SrvcLocationAddressType

type ServiceCombinations struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ServiceCombinations"`

	*ServiceCombinationType
}

type ServiceFulfillment ServiceFulfillmentType

type ServiceCoupon ServiceCouponType

type ServiceItemQuantityRules ServiceItemQuantityType

type ServiceID ServiceID_Type

type AirportCityDeparture FltDepartQualifiedQueryType

type AirportCityArrival FltArriveQualifiedQueryType

type CountryDeparture AffinityCountryDepartType

type CountryArrival AffinityCountryArriveType

type ReferencePointDeparture AffinityReferencePointDepartType

type ReferencePointArrival AffinityReferencePointArriveType

type StateProvDeparture AffinityStateProvDepartType

type StateProvArrival AffinityStateProvArriveType

type LeadDatePeriod LeadDatePeriodType

type LeadTimePeriod LeadTimePeriodType

type DiscountProgramQualifier DiscountProgramType

type IncentiveProgramQualifier struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 IncentiveProgramQualifier"`

	*IncentiveProgramType
}

type PrePaidProgramQualifier struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PrePaidProgramQualifier"`

	PrepaidProgramDetail *PrepaidProgramDetail__1 `xml:"PrepaidProgramDetail,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ProgramStatusQualifier struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ProgramStatusQualifier"`

	ProgramStatus []*ProgramStatus__1 `xml:"ProgramStatus,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type StayPeriodDateRange StayPeriodDateRangeType

type StayPeriodSeason StayPeriodSeasonType

type GroupBudget GroupBudgetType

type PerPersonBudget PersonBudgetType

type BaggagePricingQualifier BaggagePricingQualifierType

type ExistingOrderQualifier struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ExistingOrderQualifier"`

	*OrderQualiferType

	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`

	BookingReference *BookingReference `xml:"BookingReference,omitempty"`
}

type PaymentCardQualifiers CardQualifierType

type ProgramQualifiers struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ProgramQualifiers"`

	// Program Qualifier detail.
	ProgramQualifier []*ProgramQualifierType `xml:"ProgramQualifier,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PromotionQualifiers struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 PromotionQualifiers"`

	*PromoQualifierType

	// Country where the Credit Card was issued.

	CC_IssuingCountryInd string `xml:"CC_IssuingCountryInd,attr,omitempty"`
}

type SeatQualifier struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SeatQualifier"`

	Assignment []*Assignment__1 `xml:"Assignment,omitempty"`
}

type SeatAssociation struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SeatAssociation"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	PassengerReference *PassengerReference `xml:"PassengerReference,omitempty"`
}

type ServiceQualifier ServiceQualifierPriceType

type SocialMediaQualifiers SocialQualiferType

type SpecialFareQualifiers FareQualifierType

type SpecialNeedQualifiers SpecialQualiferType

type TripPurposeQualifier TripPurposeListType

type AirlinePreferences AirlinePreferencesType

type AlliancePreferences AlliancePreferencesType

type CabinPreferences CabinPreferencesType

type FlightPreferences FlightPreferencesType

type FarePreferences FarePreferencesType

type Preference struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Preference"`

	AirlinePreferences *AirlinePreferences `xml:"AirlinePreferences,omitempty"`

	AlliancePreferences *AlliancePreferences `xml:"AlliancePreferences,omitempty"`

	FarePreferences *FarePreferences `xml:"FarePreferences,omitempty"`

	FlightPreferences *FlightPreferences `xml:"FlightPreferences,omitempty"`

	PricingMethodPreference *PricingMethodPreference `xml:"PricingMethodPreference,omitempty"`

	SegMaxTimePreferences *SegMaxTimePreferences `xml:"SegMaxTimePreferences,omitempty"`

	ServicePricingOnlyPreference *ServicePricingOnlyPreference `xml:"ServicePricingOnlyPreference,omitempty"`

	TransferPreferences *TransferPreferences `xml:"TransferPreferences,omitempty"`
}

type PricingMethodPreference BestPricingPreferencesType

type TripTime TravelTimePreferencesType

type TripDistance TravelDistancePreferencesType

type TransferPreferences TransferPreferencesType

type SegMaxTimePreferences FltSegmentMaxTimePreferencesType

type ServicePricingOnlyPreference struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ServicePricingOnlyPreference"`

	// When true, Service Pricing Only is requested.
	ServicePricingOnlyInd bool `xml:"ServicePricingOnlyInd,omitempty"`
}

type GeoSpecCode struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 GeoSpecCode"`

	Value GeoSpecCodeType `xml:",chardata"`

	// Further defines GeoSpecCode as Airport, City, State, Country, Sub-Area, Area                                                            A = Area                         S = State                         Z = Sub Area                   C = City                            P = Airport                         N = Country

	GeoSpecCodeType string `xml:"GeoSpecCodeType,attr,omitempty"`
}

type ImageID struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ImageID"`

	Value string `xml:",chardata"`

	// Airline Designator of airline that owns/ assigned this ID. Example: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Codes

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// "The “Format” is the “CREATIVE UNIT NAME”, Example: (Billboard, Filmstrip, Portrait, Pushdown, Medium Rectangle, Rectangle, Half Page ,…) IATA codeset MDF. Please refer to http://www.iab.com/wp-content/uploads/2015/11/IAB_Display_Mobile_Creative_Guidelines_HTML5_2015.pdf"

	MediaDimensionFormat *IATA_CodeType `xml:"MediaDimensionFormat,attr,omitempty"`
}

type AddressCoreType struct {
	Address *Address__1 `xml:"Address,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AddressDetailType struct {
	*AddressCoreType

	Directions *Directions__1 `xml:"Directions,omitempty"`
}

type PaymentAddrType struct {

	// Street. Examples: Main Street, 100 Main Street
	Street string `xml:"Street,omitempty"`

	// Post office box. Example: P.O. Box 21
	PO_Box string `xml:"PO_Box,omitempty"`

	// Building name, room, apartment, or suite number.
	BuildingRoom string `xml:"BuildingRoom,omitempty"`

	City *City__1 `xml:"City,omitempty"`

	// State or province code or name. Examples: NY, New York
	StateProv *ProperNameSimpleType `xml:"StateProv,omitempty"`

	// Postal code. Examples: 11001, 11001-2345
	PostalCode string `xml:"PostalCode,omitempty"`

	// Country name or code.
	// Examples: US, United States
	//
	// Encoding Scheme: ISO 3166-1 (two character) Country Code
	Country string `xml:"Country,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SimpleAddrType struct {

	// Address line text.
	// Example:
	// 100 Main Street
	// New York, NY 10100

	AddressLine string `xml:"AddressLine,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type StructuredAddrType struct {

	// AddressAtOrigin or AddressAtDestination

	Application string `xml:"Application,omitempty"`

	// Street. Examples: Main Street, 100 Main Street
	Street string `xml:"Street,omitempty"`

	// Building name, room, apartment, or suite number.
	BuildingRoom string `xml:"BuildingRoom,omitempty"`

	// Post office box. Example: P.O. Box 21
	PO_Box string `xml:"PO_Box,omitempty"`

	CityName *CityName `xml:"CityName,omitempty"`

	// State or province code. Examples: NY, QUE
	StateProv string `xml:"StateProv,omitempty"`

	// Postal code. Examples: 11001, 11001-2345

	PostalCode string `xml:"PostalCode,omitempty"`

	CountryCode *CountryCode `xml:"CountryCode,omitempty"`

	// County that the address is located in. Example: Litchfield
	County *ProperNameSimpleType `xml:"County,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AttributesType struct {
	Group *Group__1 `xml:"Group,omitempty"`

	SubGroup *SubGroup__1 `xml:"SubGroup,omitempty"`

	Desc1 *Desc1__1 `xml:"Desc1,omitempty"`

	Desc2 *Desc2__1 `xml:"Desc2,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AddlBaggageInfoType struct {
	AllowableBag *AllowableBag__1 `xml:"AllowableBag,omitempty"`

	BagCharge *BagCharge__1 `xml:"BagCharge,omitempty"`

	CarryOnAllowableBag *CarryOnAllowableBag__1 `xml:"CarryOnAllowableBag,omitempty"`

	CarryOnChargeableBag *CarryOnChargeableBag__1 `xml:"CarryOnChargeableBag,omitempty"`

	CarryOnFree *CarryOnFree__1 `xml:"CarryOnFree,omitempty"`

	CheckedFree *CheckedFree__1 `xml:"CheckedFree,omitempty"`

	CheckedChargeableBag *CheckedChargeableBag__1 `xml:"CheckedChargeableBag,omitempty"`

	// The maximum linear dimensions of the baqggage follwed by centimeters 'C' or inches 'I'.

	MaxFreeBagDim *AlphaNumericStringLength1to4 `xml:"MaxFreeBagDim,attr,omitempty"`
}

type BagAllowanceDescType struct {

	// Baggage weight restriction application.  Examples: Party, Traveler
	//
	// Note: Party applies to all Travelers.
	ApplicableParty *BagAppSimpleType `xml:"ApplicableParty,omitempty"`

	// Applicable bag type.
	// Examples: Carry-On, 1st Checked Bag, 2nd Checked Bag
	ApplicableBag *ProperNameSimpleType `xml:"ApplicableBag,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	// Defines the value type. Refer to PADIS Codeset 5463

	Concept string `xml:"Concept,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BagAllowanceDimensionType struct {

	// Baggage weight restriction application. Examples: Party, Traveler
	//
	// Note: Party applies to all Travelers.
	ApplicableParty *BagAppSimpleType `xml:"ApplicableParty,omitempty"`

	// Baggage dimension UOM (unit of measure). Example: Centimeter, Inch
	DimensionUOM *SizeUnitSimpleType `xml:"DimensionUOM,omitempty"`

	// Applicable bag type.
	// Examples: Carry-On, 1st Checked Bag, 2nd Checked Bag
	ApplicableBag *ProperNameSimpleType `xml:"ApplicableBag,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	Dimensions []*Dimensions__1 `xml:"Dimensions,omitempty"`

	MaxLinear *MaxLinear__1 `xml:"MaxLinear,omitempty"`

	MinLinear *MinLinear__1 `xml:"MinLinear,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BagAllowancePieceType struct {

	// Baggage weight restriction application. Examples: Party, Traveler
	//
	// Note: Party applies to all Travelers.
	ApplicableParty *BagAppSimpleType `xml:"ApplicableParty,omitempty"`

	// Maximum pieces.
	// Example: 4
	TotalQuantity int32 `xml:"TotalQuantity,omitempty"`

	// Type of Bag,.
	// Example: Golf Equipment, Bag, Fishing, Car Seat
	BagType string `xml:"BagType,omitempty"`

	// Applicable bag type.
	// Examples: Carry-On, 1st Checked Bag, 2nd Checked Bag
	ApplicableBag *ProperNameSimpleType `xml:"ApplicableBag,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	PieceMeasurements []*PieceMeasurements__1 `xml:"PieceMeasurements,omitempty"`

	// Provides logical combiinaton between  allowances pieces. Enumaration with OR and AND as posisble values.

	PieceAllowanceCombination string `xml:"PieceAllowanceCombination,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BagAllowanceWeightType struct {

	// Baggage weight restriction application. Examples: Party, Traveler
	//
	// Note: Party applies to all Travelers.
	ApplicableParty *BagAppSimpleType `xml:"ApplicableParty,omitempty"`

	MaximumWeight *MaximumWeight__1 `xml:"MaximumWeight,omitempty"`

	// Applicable bag type.
	// Examples: Carry-On, 1st Checked Bag, 2nd Checked Bag
	ApplicableBag *ProperNameSimpleType `xml:"ApplicableBag,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BagDisclosureType struct {

	// US Department of Transportation (DOT) Reservation or Disclosure baggage rule.
	// Examples: Y, Disclosure AND US DOT Reservation
	BagRule *BagDiscloseRuleSimpleType `xml:"BagRule,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CarryOnAllowanceType struct {
	CarryOnBag []*CarryOnBag__1 `xml:"CarryOnBag,omitempty"`
}

type CheckedBagAllowanceType struct {
	CheckedBag []*CheckedBag__1 `xml:"CheckedBag,omitempty"`
}

type BookingReferenceType struct {

	// Booking Reference Type. Example: 6 (Passenger confirmation number) Encoding Scheme: IATA Padis Codeset - List for data element [1153] Reference Qualifier
	//
	Type *IATA_CodeType `xml:"Type,omitempty"`

	// Existing Booking Reference ID. Example: R1A3SK

	ID string `xml:"ID,omitempty"`

	AirlineID *AirlineID__1 `xml:"AirlineID,omitempty"`

	OtherID *OtherID__1 `xml:"OtherID,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CityCodeType struct {
	Value AirportCitySimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type CodesetType struct {

	// Code value. Example: 003
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Code Definition. Example: Travel Agency
	Definition *ProperNameSimpleType `xml:"Definition,omitempty"`

	// Code set table name.
	TableName *ProperNameSimpleType `xml:"TableName,omitempty"`

	// Codeset location uri.  Example: http://anysite.com/codeset
	Link string `xml:"Link,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AddressContactType struct {
	*StructuredAddrType
}

type ContactCoreType struct {

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type EmailType struct {

	// Email address application. Examples: Personal, Business, SMS
	Application *EmailAppSimpleType `xml:"Application,omitempty"`

	Address *Address__2 `xml:"Address,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type EmailID_Type struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type PhoneContactType struct {
	*PhoneType
}

type PhoneType struct {

	// Phone number application. Examples: Billing, Business, Home, Mobile
	Application *ContactAppSimpleType `xml:"Application,omitempty"`

	Number []*Number__1 `xml:"Number,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OtherContactMethodType struct {
	*ContactCoreType

	// Contact method name. Example: Marketing Website
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Method value. Example: www.marketingsite.com
	Value *ShortDescSimpleType `xml:"Value,omitempty"`

	// Named contact group.  Example: John Smith Business
	GroupName *ProperNameSimpleType `xml:"GroupName,omitempty"`
}

type CommissionType struct {

	// Commission code. Example: 1000, BFST
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`

	// Commission amount. Example: 20.00 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Commission percentage. Example: 20
	Percentage *WholePercentageSimpleType `xml:"Percentage,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CountryCodeType struct {
	Value CountrySimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type CountryQueryType struct {
	CountryCodes *CountryCodes__1 `xml:"CountryCodes,omitempty"`

	Keywords *Keywords__1 `xml:"Keywords,omitempty"`

	// COUNTRY PROXIMITY representation.
	//
	// Notes: This contains either the requested maximum distance search radius values -or- the actual Proximity information, which is typically used to specify the results from the named location radius search.
	Proximity []*CountryProximityType `xml:"Proximity,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CountryProximityType struct {
	*LocationProximityType

	CountryCode *CountryCode `xml:"CountryCode,omitempty"`
}

type CurrencyCodeType struct {
	Value CurrencySimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type CurrencyAmountEncodedType struct {
	Value float64 `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Currency code. Example: USD
	// Encoding Scheme: ISO 4217 (three alpha character) Currency Code

	Code *CurrencySimpleType `xml:"Code,attr,omitempty"`
}

type CurrencyAmountOptType struct {
	Value float64 `xml:",chardata"`

	// In some markets, commission is VAT-able (ie Taxable)

	Taxable bool `xml:"Taxable,attr,omitempty"`

	// Currency code. Example: USD
	// Encoding Scheme: ISO 4217 (three alpha character) Currency Code

	Code *CurrencySimpleType `xml:"Code,attr,omitempty"`
}

type Descriptions struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionType struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__1 `xml:"Media,omitempty"`

	Text *Text__1 `xml:"Text,omitempty"`

	// Mark-up Style. Example: HTML
	MarkupStyle *ProperNameSimpleType `xml:"MarkupStyle,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MediaID_Type struct {
	*UniqueIDContextType
}

type MediaAttachmentType struct {
	ImageID *ImageID `xml:"ImageID,omitempty"`

	AttachmentURI *AttachmentURI__1 `xml:"AttachmentURI,omitempty"`

	// Attachment Description.
	Description *DescriptionSimpleType `xml:"Description,omitempty"`

	// MIME Type of binary content embedded in FileContent element or referenced by AttachmentURI element, eg. "application/pdf" or "image/png"
	Mimetype string `xml:"Mimetype,omitempty"`

	// The size of the Attachment in kilobytes. Example: 60
	FileKbSize *ContextSimpleType `xml:"FileKbSize,omitempty"`

	// Rendered Media Instructions.
	Rendering *RenderingInstructionsType `xml:"Rendering,omitempty"`

	// Base 64 binary content.
	Content []byte `xml:"Content,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type RenderingInstructionsType struct {

	// Rendering Method.  Example: Narrative, XSLT, Other
	Method *RenderingTypeSimpleType `xml:"Method,omitempty"`

	OutputFormat *OutputFormat__1 `xml:"OutputFormat,omitempty"`

	AttachmentURI *AttachmentURI__2 `xml:"AttachmentURI,omitempty"`

	// Attachment Size Value. Example: 57KB
	AttachmentSize *CodesetValueSimpleType `xml:"AttachmentSize,omitempty"`

	Parameters *Parameters__1 `xml:"Parameters,omitempty"`

	Overview *Overview__1 `xml:"Overview,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type RenderingParameterType struct {
	Parameter []*Parameter__1 `xml:"Parameter,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type DirectionsType struct {

	// Directions name. Example: Directions to Headquarters
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Directions from location. Example: City Center
	From *ContextSimpleType `xml:"From,omitempty"`

	// Directions to location. Example: Headquarters
	To *ContextSimpleType `xml:"To,omitempty"`

	Text *Text__2 `xml:"Text,omitempty"`

	// Directions source URL.
	Link string `xml:"Link,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type DisclosureType struct {

	// Plain Text or Rich Media Disclosure Description(s).
	Description []*DescriptionType `xml:"Description,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type DiscountType struct {
	DiscountAmount *DiscountAmount `xml:"DiscountAmount,omitempty"`

	DiscountPercent *DiscountPercent `xml:"DiscountPercent,omitempty"`

	// Discount Application.  Example: BAG
	Application *ContextSimpleType `xml:"Application,omitempty"`

	// Discount Description.
	Description *DescriptionSimpleType `xml:"Description,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TravelerFQTV_Type struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	Account *Account__2 `xml:"Account,omitempty"`

	// The Program ID will be used to specify Frequent Flyer Program. This will be the name of the program
	ProgramID string `xml:"ProgramID,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type KeyWordType struct {
	Word *Word__1 `xml:"Word,omitempty"`

	Value []*Value__1 `xml:"Value,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type LanguageCodeType struct {
	Value CodesetValueSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type NodePathType struct {
	Path *Path__1 `xml:"Path,omitempty"`

	TagName *TagName__1 `xml:"TagName,omitempty"`
}

type BankAccountType struct {
	Name *Name__3 `xml:"Name,omitempty"`

	BankID *BankID__1 `xml:"BankID,omitempty"`

	// Account Type. Examples: Checking, Savings, Investment
	AccountType *ContextSimpleType `xml:"AccountType,omitempty"`

	AccountNumber *AccountNumber__1 `xml:"AccountNumber,omitempty"`

	// When true, checks are accepted.

	ChecksAcceptedInd bool `xml:"ChecksAcceptedInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type DirectBillType struct {

	// Direct billing Organizaqtion ID. Example: IBM
	DirectBillID *ProperNameSimpleType `xml:"DirectBillID,omitempty"`

	// Remit to Company Name. Example: IBM
	//
	// Note: This is the company name to whom remittance should be directed.
	CompanyName *ProperNameSimpleType `xml:"CompanyName,omitempty"`

	// Direct Billing Contact Name. Example: J THOMAS
	ContactName *ProperNameSimpleType `xml:"ContactName,omitempty"`

	Address *Address__3 `xml:"Address,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PaymentCardType struct {

	// Magnetic striped card type.
	CardType *PayCardTypeSimpleType `xml:"CardType,omitempty"`

	// Credit card issuer code. Example: MC
	//
	// Note: This is the 2 character code of the credit card issuer.
	CardCode *PayCardCodeSimpleType `xml:"CardCode,omitempty"`

	CardNumber *CardNumber__1 `xml:"CardNumber,omitempty"`

	// Debit card issue number
	IssueNumber int32 `xml:"IssueNumber,omitempty"`

	SeriesCode *SeriesCode__1 `xml:"SeriesCode,omitempty"`

	CardHolderName *CardHolderName__1 `xml:"CardHolderName,omitempty"`

	CardIssuerName *CardIssuerName__1 `xml:"CardIssuerName,omitempty"`

	CardHolderBillingAddress *CardHolderBillingAddress__1 `xml:"CardHolderBillingAddress,omitempty"`

	MaskedCardNumber *MaskedCardNumber__1 `xml:"MaskedCardNumber,omitempty"`

	// Authorized credit card amount. Example: 500 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	Surcharge *Surcharge__1 `xml:"Surcharge,omitempty"`

	EffectiveExpireDate *EffectiveExpireDate__2 `xml:"EffectiveExpireDate,omitempty"`

	// AVS Response Code. Example: Y (Street address and 5-digit ZIP code both match)
	//
	// Note: This is the address verification response code (AVS) when the ticketing agency performs address verification.
	AddressValidation *ContextSimpleType `xml:"AddressValidation,omitempty"`

	// Tokenized card number.
	//
	// Note: This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	TokenizedCardNumber string `xml:"TokenizedCardNumber,omitempty"`

	// Approval Code Method. Example: M (Manual)
	//
	// Note: This is used to specify how the approval code for a credit card sale was obtained.
	//
	// Encoding Scheme: IATA PADIS Code List for data element 9890.
	ApprovalType *IATA_CodeType `xml:"ApprovalType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type PenaltyType struct {
	ApplicableFeeRemarks *ApplicableFeeRemarks__1 `xml:"ApplicableFeeRemarks,omitempty"`

	Details *Details__1 `xml:"Details,omitempty"`

	// When true, Cancellation fee(s) may apply.

	CancelFeeInd bool `xml:"CancelFeeInd,attr,omitempty"`

	// When true, Change of Itinerary fee(s) may apply.

	ChangeFeeInd bool `xml:"ChangeFeeInd,attr,omitempty"`

	// When true, this is a refundable ticket and/ or fare.

	RefundableInd bool `xml:"RefundableInd,attr,omitempty"`

	// When true, this is a reusable ticket and/ or fare.

	ReuseInd bool `xml:"ReuseInd,attr,omitempty"`

	// When true, Upgrade fee(s) may apply.

	UpgradeFeeInd bool `xml:"UpgradeFeeInd,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PenaltyDetailType struct {
	*PenaltyType
}

type PositionType struct {
	Latitude *Latitude__1 `xml:"Latitude,omitempty"`

	Longitude *Longitude__1 `xml:"Longitude,omitempty"`

	Altitude *Altitude__1 `xml:"Altitude,omitempty"`

	// Natural area geocode (NAC).  Example: 8KDB PGFD

	NAC string `xml:"NAC,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type GenericPriceType struct {

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	Equivalent *Equivalent__1 `xml:"Equivalent,omitempty"`

	Surcharges *Surcharges__1 `xml:"Surcharges,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	Fees *Fees__1 `xml:"Fees,omitempty"`

	Total *Total__1 `xml:"Total,omitempty"`
}

type PriceCoreType struct {

	// When true, this price is approximate.

	ApproxInd bool `xml:"ApproxInd,attr,omitempty"`

	// When true, all price amounts are refundable.

	RefundAllInd bool `xml:"RefundAllInd,attr,omitempty"`

	// When true, price-associated tax(es) have been specified and included.

	TaxIncludedInd bool `xml:"TaxIncludedInd,attr,omitempty"`

	// When true, price-associated fee(s)/ surcharge(s) have been specified and included in Price.

	OtherChargeInd bool `xml:"OtherChargeInd,attr,omitempty"`

	// When true, pricing has been returned from an auto-exchanging application .

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AwardPriceUnitType struct {

	// Redemption pricing.
	// Example: 15000 Miles
	Redemption *AwardRedemptionType `xml:"Redemption,omitempty"`
}

type CombinationPriceType struct {
	Partial *Partial__1 `xml:"Partial,omitempty"`
}

type CombinationPriceSimpleType struct {
	Partial *Partial__2 `xml:"Partial,omitempty"`
}

type DetailCurrencyPriceType struct {
	*PriceCoreType

	// Total price in currency.  Example: 16000 USD
	//
	// Note: This is the total price INCLUDING base price, taxes and fees/ surcharges.
	Total *CurrencyAmountOptType `xml:"Total,omitempty"`

	Equivalent *Equivalent__2 `xml:"Equivalent,omitempty"`

	Details *Details__2 `xml:"Details,omitempty"`

	Taxes *Taxes__1 `xml:"Taxes,omitempty"`

	Fees *Fees__2 `xml:"Fees,omitempty"`
}

type EncodedPriceType struct {
	*CurrencyAmountEncodedType
}

type SimpleCurrencyPriceType struct {
	*CurrencyAmountOptType
}

type AwardRedemptionType struct {
	Unit *Unit__1 `xml:"Unit,omitempty"`

	// Value containing the quantity of frequent flyer program redemption units.
	Quantity int32 `xml:"Quantity,omitempty"`

	Conversion *Conversion__1 `xml:"Conversion,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PromotionType struct {
	Code *Code__1 `xml:"Code,omitempty"`

	// Promotion url. Example: http://promos.site.com
	Link string `xml:"Link,omitempty"`

	Issuer *Issuer__1 `xml:"Issuer,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`

	// This is the name of the person holding the voucher."
	VoucherOwner string `xml:"VoucherOwner,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BagDetailAssocType struct {
	BagDisclosureReferences *BagDisclosureReferences `xml:"BagDisclosureReferences,omitempty"`

	CheckedBagReferences *CheckedBagReferences `xml:"CheckedBagReferences,omitempty"`

	CarryOnReferences *CarryOnReferences `xml:"CarryOnReferences,omitempty"`
}

type LocationProximityType struct {

	// Proximity Data Application.  Example: SearchRadius, ActualProximity, Other
	Application *ProximityAppSimpleType `xml:"Application,omitempty"`

	AreaValue *AreaValue__1 `xml:"AreaValue,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers
	UOM *DistanceUnitSimpleType `xml:"UOM,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type RemarkType struct {
	Remark []*Remark__1 `xml:"Remark,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PriceVarianceRuleType struct {

	// Unique Rule ID. Example: RULE001
	RuleID *ProperNameSimpleType `xml:"RuleID,omitempty"`

	AcceptableVariance *AcceptableVariance__1 `xml:"AcceptableVariance,omitempty"`

	Name *Name__4 `xml:"Name,omitempty"`

	// Entity that owns/ assigned this Rule. Example: BA
	//
	// Note: If this is an airline, the IATA/ A4A (two or three character) Airline Designator Code should be used.
	Owner *ContextSimpleType `xml:"Owner,omitempty"`

	EffectivePeriod *EffectivePeriod__1 `xml:"EffectivePeriod,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type RuleSetType struct {
	RuleSetID *RuleSetID__1 `xml:"RuleSetID,omitempty"`

	RuleValid *RuleValid__1 `xml:"RuleValid,omitempty"`

	//
	// Entity that owns/ assigned this Rule Set. Example: BA Note: If this is an airline, the IATA/ A4A (two or three character) Airline Designator Code should be used.
	//
	Owner *ContextSimpleType `xml:"Owner,omitempty"`

	// Rule(s).
	Rule []*RuleType `xml:"Rule,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type RuleType struct {

	// Unique Rule ID. Example: RULE001
	RuleID *ProperNameSimpleType `xml:"RuleID,omitempty"`

	Value *Value__2 `xml:"Value,omitempty"`

	Name *Name__5 `xml:"Name,omitempty"`

	// Entity that owns/ assigned this Rule. Example: BA
	//
	// Note: If this is an airline, the IATA/ A4A (two or three character) Airline Designator Code should be used.
	Owner *ContextSimpleType `xml:"Owner,omitempty"`

	EffectivePeriod *EffectivePeriod__2 `xml:"EffectivePeriod,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type SpecialType struct {
	Code *Code__2 `xml:"Code,omitempty"`

	Description *Description__1 `xml:"Description,omitempty"`

	// Description context. Examples: WEIGHT, NUMBER, PEDICURE
	DescContext *ContextSimpleType `xml:"DescContext,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ShoppingResponseID_Type struct {

	// Designator of Airline that owns/ assigned these IDs. Examples: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code
	Owner *AirlineDesigSimpleType `xml:"Owner,omitempty"`

	ResponseID *ResponseID__1 `xml:"ResponseID,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type StateProvCodeType struct {
	Value CodesetValueSimpleType `xml:",chardata"`
}

type StateProvQueryType struct {
	StateCodes *StateCodes__1 `xml:"StateCodes,omitempty"`

	Keywords *Keywords__2 `xml:"Keywords,omitempty"`

	// State Proximity.
	//
	// Notes:
	// 1. This contains either the requested maximum distance search radius values -or- the actual Proximity information, which is typically used to specify the results from the named location radius search.
	Proximity []*StateProvProximityType `xml:"Proximity,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type StateProvProximityType struct {
	*LocationProximityType

	StateCode *StateCode__1 `xml:"StateCode,omitempty"`
}

type FeeSurchargeType struct {
	Total *Total__2 `xml:"Total,omitempty"`

	Breakdown *Breakdown__1 `xml:"Breakdown,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TaxCoreType struct {

	// When true, this tax is approximate.

	ApproxInd bool `xml:"ApproxInd,attr,omitempty"`

	// When true, this tax must be collected.

	CollectionInd bool `xml:"CollectionInd,attr,omitempty"`

	// When true, all tax amounts are refundable.

	RefundAllInd bool `xml:"RefundAllInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TaxDetailType struct {
	*TaxCoreType

	Total *Total__3 `xml:"Total,omitempty"`

	Breakdown *Breakdown__2 `xml:"Breakdown,omitempty"`
}

type TaxExemptionType struct {
	Total *Total__4 `xml:"Total,omitempty"`

	Tax []*Tax__1 `xml:"Tax,omitempty"`

	Entities *Entities__1 `xml:"Entities,omitempty"`

	Territories *Territories__1 `xml:"Territories,omitempty"`

	Countries *Countries__1 `xml:"Countries,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TicketAutoExchangeType struct {
	Penalty *Penalty__1 `xml:"Penalty,omitempty"`

	// Total original ticket amount.
	// Example: 200 USD
	OriginalAmount *CurrencyAmountOptType `xml:"OriginalAmount,omitempty"`

	CurrCode *CurrCode `xml:"CurrCode,omitempty"`

	TicketNumbers *TicketNumbers__1 `xml:"TicketNumbers,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TicketDesignatorType struct {
	Value CodesetValueSimpleType `xml:",chardata"`

	// Ticket Designator application.   Examples: Requested, Ticketed

	Application *TicketDesigAppSimpleType `xml:"Application,attr,omitempty"`
}

type BilateralTimeLimitsType struct {
	BilateralTimeLimit []*BilateralTimeLimit__1 `xml:"BilateralTimeLimit,omitempty"`
}

type DepositTimeLimitType struct {

	// Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type NamingTimeLimitType struct {

	// Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PaymentTimeLimitType struct {

	// Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PriceGuaranteeTimeLimitType struct {

	// Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TicketingTimeLimitType struct {

	// Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type InstrCommissionType struct {
	*CommissionType
}

type InstrClassUpgradeType struct {
	Classes *Classes__1 `xml:"Classes,omitempty"`
}

type InstrRemarkType struct {
	*RemarkType
}

type TravelerFOID_Type struct {
	FOID []*FOID__1 `xml:"FOID,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type GroupType struct {

	// Group Name. Example: ABC Tour Club
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// PassengerCount. Example: 12
	PassengerCount int32 `xml:"PassengerCount,omitempty"`

	Contacts *Contacts `xml:"Contacts,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type AirlineCoreRepType struct {
	*SupplierCoreRepType

	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	// Airline Name. Example: British Airways
	Name *CarrierNameType `xml:"Name,omitempty"`
}

type MarketingCarrierType struct {
	*AirlineCoreRepType

	FlightNumber *FlightNumber `xml:"FlightNumber,omitempty"`
}

type MarketingCarrierFlightType struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	// Airline Name.  Example: British Airways
	Name *CarrierNameType `xml:"Name,omitempty"`

	FlightNumber *FlightNumber `xml:"FlightNumber,omitempty"`

	ResBookDesigCode *ResBookDesigCode__1 `xml:"ResBookDesigCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OperatingCarrierFlightType struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	// Airline Name.  Example: British Airways
	Name *CarrierNameType `xml:"Name,omitempty"`

	FlightNumber *FlightNumber `xml:"FlightNumber,omitempty"`

	// The Reservation Booking Designator (booking class) of the Operating Carrier if different from the Marketing Carrier. Example: Y
	ResBookDesigCode *CodesetValueSimpleType `xml:"ResBookDesigCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type RetailerType struct {
	*SupplierCoreRepType

	RetailerID *RetailerID `xml:"RetailerID,omitempty"`

	Contacts *Contacts `xml:"Contacts,omitempty"`
}

type SupplierCoreRepType struct {
	*ActorObjectType

	OtherIDs *OtherIDs__1 `xml:"OtherIDs,omitempty"`
}

type AirlineID_Type struct {
	Value AirlineDesigSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type RetailerID_Type struct {
	*UniqueIDContextType
}

type AggregatorType struct {
	*IntermediaryCoreRepType

	RoleOfIntermediaryReference *RoleOfIntermediaryReference `xml:"RoleOfIntermediaryReference,omitempty"`

	AggregatorID *AggregatorID `xml:"AggregatorID,omitempty"`

	// Connection Communication Method.  Examples: DirectWithAirline, DirectWithOther, Gateway

	ConnectMethod *ConnectMethodSimpleType `xml:"ConnectMethod,attr,omitempty"`
}

type EnabledSystemType struct {
	*IntermediaryCoreRepType

	SystemID *SystemID `xml:"SystemID,omitempty"`
}

type IntermediaryCoreRepType struct {
	*ActorObjectType

	// Intermediary Name.  Example: Farelogix
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Intermediary Category.  Example: Aggregator, Consolidator
	// Encoding Scheme: IATA Padis Codeset - Data element 9972 (Originator Type)
	Category *IATA_CodeType `xml:"Category,omitempty"`

	Contact []*Contact__3 `xml:"Contact,omitempty"`
}

type RoleOfIntermediaryReferenceType struct {

	// Association link to Supplier object instance.  Example: supplier1
	//
	// Note: This is the @id specified in a Supplier object instance.

	Supplier_ref string `xml:"supplier_ref,attr,omitempty"`
}

type AggregatorID_Type struct {
	*UniqueIDContextType
}

type SystemID_Type struct {
	*UniqueIDContextType
}

type AgencyCoreRepType struct {
	*SellerCoreRepType

	OtherIDs *OtherIDs__2 `xml:"OtherIDs,omitempty"`

	PseudoCity *PseudoCity__1 `xml:"PseudoCity,omitempty"`

	// Agency Seller IATA number. Example: 98417900
	IATA_Number *IATA_NbrSimpleType `xml:"IATA_Number,omitempty"`
}

type AgentUserType struct {
	*AgencyCoreRepType

	AgentUserID *AgentUserID__1 `xml:"AgentUserID,omitempty"`

	// Agent role. Example: Authorized User
	UserRole *ProperNameSimpleType `xml:"UserRole,omitempty"`
}

type SellerCoreRepType struct {
	*ActorObjectType

	// Agency Seller Name.  Example: Carson Travel
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Agency Seller Type.  Examples: TravelAgency, OnlineTravelAgency, TravelManagementCompany
	Type *AgencyCategorySimpleType `xml:"Type,omitempty"`

	Contacts *Contacts `xml:"Contacts,omitempty"`
}

type TravelAgencyType struct {
	*AgencyCoreRepType

	AgencyID *AgencyID `xml:"AgencyID,omitempty"`
}

type AgencyID_Type struct {
	*UniqueIDContextType
}

type AgentUserID_Type struct {
	*UniqueIDContextType

	// Agent User Name.  Example: Karen Smith

	Name *ProperNameSimpleType `xml:"Name,attr,omitempty"`
}

type FulfillmentPartnerType struct {
	*PartnerCoreRepType

	Fulfillments *Fulfillments__1 `xml:"Fulfillments,omitempty"`
}

type PartnerCoreRepType struct {
	*ActorObjectType

	PartnerID *PartnerID `xml:"PartnerID,omitempty"`

	// Partner Company Name. Example: Flight Stuff. Inc.
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Partner Company Type.  Examples: ServiceProvider, ServiceFulfillment, Merchandise
	Type *PartnerTypeSimpleType `xml:"Type,omitempty"`
}

type PartnerCompanyID_Type struct {
	Value UniqueStringID_SimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type DeviceType struct {
	Type *Type__1 `xml:"Type,omitempty"`

	PhoneNumber *PhoneNumber `xml:"PhoneNumber,omitempty"`

	// Associated IP address.
	// Examples: 192.0.2.8, 198.51.100.0
	IP_Address *ShortDescSimpleType `xml:"IP_Address,omitempty"`

	// Device MAC Address. Example: 00:0a:95:9d:68:16
	MAC_Address *ShortDescSimpleType `xml:"MAC_Address,omitempty"`

	// Named Device ID. Example: Bonnies iPad
	Name *ProperNameSimpleType `xml:"Name,omitempty"`
}

type MessageParamsBaseType struct {
	Languages *Languages__1 `xml:"Languages,omitempty"`

	CurrCodes *CurrCodes__1 `xml:"CurrCodes,omitempty"`

	// Examples: Imperial, Metric
	MeasurementSystem *MeasurementTypeListType `xml:"MeasurementSystem,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MsgDocumentType struct {

	// Document metadata
	Metadata *MetaBaseType `xml:"Metadata,omitempty"`

	// NDC Implementation Name.
	// Example: ThisAirline Gateway
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// NDC Framework Version. Example: SOAP 2015.1
	ReferenceVersion *ContextSimpleType `xml:"ReferenceVersion,omitempty"`

	// A globally unique identifier for this object instance.

	Id string `xml:"id,attr,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`
}

type PolicyDefaultType struct {
	Policy []*Policy__2 `xml:"Policy,omitempty"`
}

type PolicyAugmentationType struct {
	Policy []*Policy__3 `xml:"Policy,omitempty"`
}

type PointOfSaleType struct {
	Location *Location__1 `xml:"Location,omitempty"`

	RequestTime *RequestTime__1 `xml:"RequestTime,omitempty"`

	TouchPoint *TouchPoint__1 `xml:"TouchPoint,omitempty"`

	// A globally unique identifier for this object instance.

	Id string `xml:"id,attr,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Internally define agent authority to request changes.

	AgentDutyCode string `xml:"AgentDutyCode,attr,omitempty"`
}

type AgentUserMsgPartyCoreType struct {
	*AgentUserType
}

type AggregatorMsgPartyCoreType struct {
	*AggregatorType

	AgentUserID *AgentUserID `xml:"AgentUserID,omitempty"`
}

type AirlineMsgPartyCoreType struct {
	*AirlineCoreRepType

	AgentUser *AgentUser `xml:"AgentUser,omitempty"`

	Disclosures *Disclosures `xml:"Disclosures,omitempty"`
}

type EnabledSysMsgPartyCoreType struct {
	*EnabledSystemType
}

type MsgPartiesType struct {
	Sender *Sender__1 `xml:"Sender,omitempty"`

	Participants *Participants__1 `xml:"Participants,omitempty"`

	Recipient *Recipient__1 `xml:"Recipient,omitempty"`
}

type RetailerMsgPartyCoreType struct {
	*RetailerType

	AgentUser *AgentUser `xml:"AgentUser,omitempty"`
}

type TrvlAgencyMsgPartyCoreType struct {
	*TravelAgencyType

	AgentUser *AgentUser `xml:"AgentUser,omitempty"`
}

type AggregatorSenderType struct {
	*AggregatorMsgPartyCoreType
}

type AgentUserSenderType struct {
	*AgentUserMsgPartyCoreType
}

type EnabledSysSenderType struct {
	*EnabledSysMsgPartyCoreType
}

type MarketingCarrierSenderType struct {
	*AirlineMsgPartyCoreType
}

type OperatingCarrierSenderType struct {
	*AirlineMsgPartyCoreType
}

type ORA_AirlineSenderType struct {
	*AirlineMsgPartyCoreType
}

type POA_AirlineSenderType struct {
	*AirlineMsgPartyCoreType
}

type RetailSupplierSenderType struct {
	*RetailerMsgPartyCoreType
}

type TravelAgencySenderType struct {
	*TrvlAgencyMsgPartyCoreType
}

type AgentUserRecipientType struct {
	*TrvlAgencyMsgPartyCoreType
}

type AggregatorRecipientType struct {
	*AggregatorMsgPartyCoreType
}

type EnabledSysRecipientType struct {
	*EnabledSysMsgPartyCoreType
}

type MarketingCarrierRecipientType struct {
	*AirlineMsgPartyCoreType
}

type OperatingCarrierRecipientType struct {
	*AirlineMsgPartyCoreType
}

type ORA_AirlineRecipientType struct {
	*AirlineMsgPartyCoreType
}

type POA_AirlineRecipientType struct {
	*AirlineMsgPartyCoreType
}

type RetailSupplierRecipientType struct {
	*RetailerMsgPartyCoreType
}

type TravelAgencyRecipientType struct {
	*TrvlAgencyMsgPartyCoreType
}

type AggregatorParticipantType struct {
	*AggregatorMsgPartyCoreType

	// The sequence number of this participating Party within the collection of parties.
	// Example: 1
	//
	// Notes:
	// 1. A sequence number of 1 indicates that this is the first Participant involved in the transaction.

	SequenceNumber int32 `xml:"SequenceNumber,attr,omitempty"`
}

type EnabledSysParticipantType struct {
	*EnabledSysMsgPartyCoreType

	// The sequence number of this participating Party within the collection of parties.
	// Example: 1
	//
	// Notes:
	// 1. A sequence number of 1 indicates that this is the first Participant involved in the transaction.

	SequenceNumber int32 `xml:"SequenceNumber,attr,omitempty"`
}

type MarketingCarrierParticipantType struct {
	*AirlineMsgPartyCoreType

	// The sequence number of this participating Party within the collection of parties.
	// Example: 1
	//
	// Notes:
	// 1. A sequence number of 1 indicates that this is the first Participant involved in the transaction.

	SequenceNumber int32 `xml:"SequenceNumber,attr,omitempty"`
}

type ORA_AirlineParticipantType struct {
	*AirlineMsgPartyCoreType

	// The sequence number of this participating Party within the collection of parties.
	// Example: 1
	//
	// Notes:
	// 1. A sequence number of 1 indicates that this is the first Participant involved in the transaction.

	SequenceNumber int32 `xml:"SequenceNumber,attr,omitempty"`
}

type OperatingCarrierParticipantType struct {
	*AirlineMsgPartyCoreType

	// The sequence number of this participating Party within the collection of parties.
	// Example: 1
	//
	// Notes:
	// 1. A sequence number of 1 indicates that this is the first Participant involved in the transaction.

	SequenceNumber int32 `xml:"SequenceNumber,attr,omitempty"`
}

type POA_AirlineParticipantType struct {
	*AirlineMsgPartyCoreType

	// The sequence number of this participating Party within the collection of parties.
	// Example: 1
	//
	// Notes:
	// 1. A sequence number of 1 indicates that this is the first Participant involved in the transaction.

	SequenceNumber int32 `xml:"SequenceNumber,attr,omitempty"`
}

type RetailSupplierParticipantType struct {
	*RetailerMsgPartyCoreType

	// The sequence number of this participating Party within the collection of parties.
	// Example: 1
	//
	// Notes:
	// 1. A sequence number of 1 indicates that this is the first Participant involved in the transaction.

	SequenceNumber int32 `xml:"SequenceNumber,attr,omitempty"`
}

type TravelAgencyParticipantType struct {
	*TrvlAgencyMsgPartyCoreType

	// The sequence number of this participating Party within the collection of parties.
	// Example: 1
	//
	// Notes:
	// 1. A sequence number of 1 indicates that this is the first Participant involved in the transaction.

	SequenceNumber string `xml:"SequenceNumber,attr,omitempty"`
}

type MarketingInfoType struct {
	Message []*Message__1 `xml:"Message,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MarketMsgAssocType struct {
	Association []*Association__1 `xml:"Association,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ErrorsType struct {
	Error *ErrorType `xml:"Error,omitempty"`
}

type ErrorType struct {
	Value string `xml:",chardata"`

	// The Error element MUST contain the Type attribute that uses a recommended set of values to indicate the error type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type ="Unknown".

	Type *IATA_CodeType `xml:"Type,attr,omitempty"`

	// An XPath expression that selects all the nodes whose data caused this error.  Further, this expression should have an 	additional contraint which contains the data of the node.  This will provide the offending data back to systems that cannot maintain the original message.

	NodeList string `xml:"NodeList,attr,omitempty"`

	// An error in textual format.

	ShortText *StringLength1to255 `xml:"ShortText,attr,omitempty"`

	// If present, this refers to a table of coded values exchanged between applications to identify errors or warnings. Refer to IATA PADIS Code List data element 9321.

	Code *IATA_CodeType `xml:"Code,attr,omitempty"`

	// If present, this URL refers to an online description of the error that occurred.

	DocURL string `xml:"DocURL,attr,omitempty"`

	// If present, recommended values are those enumerated in the IATA_ErrorRS, (NotProcessed | Incomplete | Complete | Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.

	Status *StringLength1to64 `xml:"Status,attr,omitempty"`

	// If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].

	Tag string `xml:"Tag,attr,omitempty"`

	// If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records.

	RecordID *StringLength1to32 `xml:"RecordID,attr,omitempty"`

	// Used to specify the owner of the error/warning codelist.

	Owner *StringLength1to32 `xml:"Owner,attr,omitempty"`
}

type FreeTextType struct {
	Value string `xml:",chardata"`

	// Language identification.

	Language string `xml:"Language,attr,omitempty"`
}

type ProcessingResultType struct {

	// Marketing Messages and Information.
	//
	// Notes: Marketing messages specified here apply to all message results, e.g. they are at a message-wide level.
	Marketing *MarketingInfoType `xml:"Marketing,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AlertType struct {
	InventoryDiscrepancyAlert *InventoryDiscrepancyAlert `xml:"InventoryDiscrepancyAlert,omitempty"`

	PIN_AuthenticationAlert *PIN_AuthenticationAlert `xml:"PIN_AuthenticationAlert,omitempty"`

	SecurePaymentAlert *SecurePaymentAlert `xml:"SecurePaymentAlert,omitempty"`
}

type AlertsType struct {
	Alert []*Alert__1 `xml:"Alert,omitempty"`
}

type InvDiscrepencyAlertType struct {

	// Inventory Availability Status Code.
	// IATA Padis Codeset - List for data element 9321.  Used in conjunction with Association(s) (Passenger, Group, Order Item, Offer Item and Optional Service) AnternateOffers (Alternate Offer(s) and Remarks (Payment remarks(s)).
	Code *IATA_CodeType `xml:"Code,omitempty"`

	// Inventory Discrepency Alert Association(s), including Order, Order Item, Passenger, Group, Offer Item and Service.
	Associations *MultiAssociationType `xml:"Associations,omitempty"`

	AlternateOffers *AlternateOffers__1 `xml:"AlternateOffers,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`

	// When true, the inventory for the Offer Item is not available to order.

	NoInventoryInd bool `xml:"NoInventoryInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MultiAssociationType struct {
	OfferAssociations *OfferAssociations `xml:"OfferAssociations,omitempty"`

	OrderAssociations *OrderAssociations `xml:"OrderAssociations,omitempty"`
}

type PIN_AuthTravelerType struct {
	*TrxProcessObjectBaseType

	AuthRequest *AuthRequest__1 `xml:"AuthRequest,omitempty"`

	// PIN Phrase Authentication Response.
	AuthResponse *PinPhraseAnswerType `xml:"AuthResponse,omitempty"`
}

type PinPhraseAnswerType struct {
	Status *Status__1 `xml:"Status,omitempty"`

	PIN *PIN__1 `xml:"PIN,omitempty"`

	// Original Credentialing Question. Example: What is a memorable place?
	PoolQuestion *ShortDescSimpleType `xml:"PoolQuestion,omitempty"`

	// Pre-defined Account information.
	AuthAccount *AuthAccountType `xml:"AuthAccount,omitempty"`

	Device *Device__1 `xml:"Device,omitempty"`

	OriginalTransactionID *OriginalTransactionID__1 `xml:"OriginalTransactionID,omitempty"`
}

type PinPhraseQuestionType struct {
	Status *Status__2 `xml:"Status,omitempty"`

	Challenge *Challenge__1 `xml:"Challenge,omitempty"`

	// Traveler Authentication Request Association(s), including Order, Order Item, Passenger, Group, Offer Item and Service.
	Associations *MultiAssociationType `xml:"Associations,omitempty"`

	// Pre-defined Account information.
	AuthAccount *AuthAccountType `xml:"AuthAccount,omitempty"`

	Device *Device__2 `xml:"Device,omitempty"`

	OriginalTransactionID *OriginalTransactionID__2 `xml:"OriginalTransactionID,omitempty"`
}

type SecurePaymentAlertType struct {
	*TrxProcessObjectBaseType

	PayerAuth *PayerAuth__1 `xml:"PayerAuth,omitempty"`

	TransactionType *TransactionType__1 `xml:"TransactionType,omitempty"`

	EnrollmentStatus *EnrollmentStatus__1 `xml:"EnrollmentStatus,omitempty"`

	Airline *Airline__1 `xml:"Airline,omitempty"`

	Reference *Reference__1 `xml:"Reference,omitempty"`

	URLs *URLs__1 `xml:"URLs,omitempty"`

	Details *Details__3 `xml:"Details,omitempty"`

	ProcessingInfos *ProcessingInfos__1 `xml:"ProcessingInfos,omitempty"`
}

type SecurePaymentPaxInfoType struct {
	Carriers *Carriers__1 `xml:"Carriers,omitempty"`

	DateTimes *DateTimes__1 `xml:"DateTimes,omitempty"`

	ClassesOfService *ClassesOfService__1 `xml:"ClassesOfService,omitempty"`

	StopLocations *StopLocations__1 `xml:"StopLocations,omitempty"`

	FareBasisCodes *FareBasisCodes__1 `xml:"FareBasisCodes,omitempty"`

	FlightNumbers *FlightNumbers__1 `xml:"FlightNumbers,omitempty"`

	// Passenger Name. Example: John Smith
	//
	// Note: This is the primary contact on the reservation.
	PassengerName *ProperNameSimpleType `xml:"PassengerName,omitempty"`

	ResidenceCode *ResidenceCode__1 `xml:"ResidenceCode,omitempty"`

	// Document Number assigned to this transaction comprised of the following:
	// • Airline Code -  3-digit Airline identification number (one character reserved for expansion)
	//
	// • Form Code - A maximum of 3 digits indicating the type of document, the source of issue and the number of coupons it comprises,
	//
	// • Serial No. - A maximum of 8 digits allocated on a sequential basis, provided that the total number of digits allocated to the Form Code and Serial Number shall not exceed ten.
	//
	PassengerTktNbr *TicketNumberSimpleType `xml:"PassengerTktNbr,omitempty"`

	// Travel Agency Information.
	//
	// Note; This typically contains the seller travel agency ID and/ or Name.
	AgencyInfo *ShortDescSimpleType `xml:"AgencyInfo,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SecurePaymentUrlType struct {

	// 3DS Access Control System URL.
	//
	// Note: This is the URL of the Issuing Bank's ACS, to which the cardholder needs to be re-directed. The browser should simply redirect to this URL.
	ACS_URL string `xml:"ACS_URL,omitempty"`

	// Airline URL to which the user will be directed in the event of an secure auhorization failure.
	// Example: http://ba.com/paymentResultFailure
	FailURL string `xml:"FailURL,omitempty"`

	// Verification Merchant website URL.
	//
	// Note: This is the verification source merchant URL.
	MerchantURL string `xml:"MerchantURL,omitempty"`

	// The URL to which the user will be directed to at the conclusion of 3D secure authentication.
	// Example: http://ba.com/paymentResultSuccess
	TermURL string `xml:"TermURL,omitempty"`
}

type AuthAccountType struct {

	// Account ID. Examples: FQTV1234, jsmith@email.com
	AccountID *ProperNameSimpleType `xml:"AccountID,omitempty"`

	// Pre-established Account Name. Example: johns
	AccountName *ProperNameSimpleType `xml:"AccountName,omitempty"`

	// First Name on Account. Example: John
	FirstName *ProperNameSimpleType `xml:"FirstName,omitempty"`

	// Last Name on Account. Example: Smith
	LastName *ProperNameSimpleType `xml:"LastName,omitempty"`
}

type InvGuaranteeNoticeType struct {
	Query *Query__1 `xml:"Query,omitempty"`

	Results *Results__1 `xml:"Results,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type InfoPolicyNoticeType struct {
	Policy []*Policy__4 `xml:"Policy,omitempty"`

	//
	// When true, data policy(s) have been specified for payload content.
	//

	PolicyDefinedInd bool `xml:"PolicyDefinedInd,attr,omitempty"`
}

type LocalizationNoticeType struct {
	*TrxProcessObjectBaseType

	Languages *Languages `xml:"Languages,omitempty"`

	Currencies *Currencies__1 `xml:"Currencies,omitempty"`
}

type NoticeBaseType struct {

	//
	// Payload Content Localization Notice. Note: Supports i18n-enabled systems by notifying seller systems of language and currency preferences in request messages and language and currency application is response messages.
	//
	Localization *LocalizationNoticeType `xml:"Localization,omitempty"`

	//
	// Information Policy Notice(s). Note: Supports specifying information policy notices at the message and/ or schema node level.
	//
	InfoPolicies *InfoPolicyNoticeType `xml:"InfoPolicies,omitempty"`
}

type PaymentRulesNoticeType struct {
	*TrxProcessObjectBaseType

	FormOfPayment *FormOfPayment__1 `xml:"FormOfPayment,omitempty"`
}

type PriceVarianceRuleNoticeType struct {
	*TrxProcessObjectBaseType

	Query *Query__2 `xml:"Query,omitempty"`

	Results *Results__2 `xml:"Results,omitempty"`
}

type PricingParametersNoticeType struct {
	*TrxProcessObjectBaseType

	Query *Query__3 `xml:"Query,omitempty"`

	Results *Results__3 `xml:"Results,omitempty"`
}

type ServiceFilterNoticeType struct {
	*TrxProcessObjectBaseType

	Query *Query__4 `xml:"Query,omitempty"`

	Results *Results__4 `xml:"Results,omitempty"`
}

type TaxExemptionNoticeType struct {
	*TrxProcessObjectBaseType

	Query *Query__5 `xml:"Query,omitempty"`

	Results *Results__5 `xml:"Results,omitempty"`
}

type EncSchemeType struct {
	Detail *Detail__1 `xml:"Detail,omitempty"`

	Metadata *Metadata__1 `xml:"Metadata,omitempty"`

	// Encoding Scheme globally unique instance/ class Key.
	//
	// Example: 8wOlMeZCT5+kR+mdfzsRlA

	Key *InstanceClassSimpleType `xml:"Key,attr,omitempty"`

	// Owner Airline (or other entity) Code. Examples: BA, WIDGETCO

	OwnerCode *OwnerSimpleType `xml:"OwnerCode,attr,omitempty"`

	// Scheme Owner Type.
	//
	// Examples: Airline, Filed, ThirdParty
	//
	// Note: Supports pre-defined enumerated list and/ or bilaterally-agreed upon values.

	OwnerType *EncSchemeListType `xml:"OwnerType,attr,omitempty"`

	// Scheme Owner Name. Example: British Airways

	OwnerName *ProperNameSimpleType `xml:"OwnerName,attr,omitempty"`

	// Encoding Scheme Token, e.g. reference association ID.
	//
	// Example: jZhJu7SORZeOMNpifElIkA

	SchemeToken *DescriptionSimpleType `xml:"SchemeToken,attr,omitempty"`
}

type PolicyType struct {
	*CoreBaseType

	Nodes *Nodes__1 `xml:"Nodes,omitempty"`

	Descriptions *Descriptions__1 `xml:"Descriptions,omitempty"`

	Metadata *Metadata__2 `xml:"Metadata,omitempty"`

	// Policy Type. Examples: Privacy_PII, Payment_PCI, Credentialing
	//
	// Note: Supports pre-defined enumerated list and/ or bilaterally-agreed upon values.

	PolicyType *PolicyTypeListType `xml:"PolicyType,attr,omitempty"`

	// Policy Version. Example: 2.17

	Version *CodesetValueSimpleType `xml:"Version,attr,omitempty"`
}

type DataListType struct {
	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__1 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__1 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__1 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__1 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__1 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList `xml:"PriceClassList,omitempty"`

	ServiceBundleList *ServiceBundleList `xml:"ServiceBundleList,omitempty"`

	ServiceList *ServiceList `xml:"ServiceList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`
}

type ListOfBagDisclosureType struct {
	BagDisclosure []*BagDisclosure__1 `xml:"BagDisclosure,omitempty"`
}

type ListOfContentSourceType struct {
	ContentSource []*ContentSource__1 `xml:"ContentSource,omitempty"`
}

type LinkDescriptionType struct {
	Links *Links__1 `xml:"Links,omitempty"`

	Texts *Texts__1 `xml:"Texts,omitempty"`

	// Language Code. Example: en, en-US

	LangCode string `xml:"LangCode,attr,omitempty"`

	// Creation Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Title. Example: This Title

	Title *ShortDescSimpleType `xml:"Title,attr,omitempty"`
}

type LinkFormattedType struct {
	*CoreBaseType

	Link []*Link__1 `xml:"Link,omitempty"`
}

type ListOfDisclosureType struct {
	Disclosures []*Disclosures__1 `xml:"Disclosures,omitempty"`
}

type ListOfFlightSegmentType struct {
	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	// Marketing Carrier information.
	MarketingCarrier *MarketingCarrierFlightType `xml:"MarketingCarrier,omitempty"`

	OperatingCarrier *OperatingCarrier__1 `xml:"OperatingCarrier,omitempty"`

	Equipment *Equipment `xml:"Equipment,omitempty"`

	ClassOfService *ClassOfService `xml:"ClassOfService,omitempty"`

	// Flight Details.
	FlightDetail *FlightDetailType `xml:"FlightDetail,omitempty"`

	OnTimePerformance *OnTimePerformance `xml:"OnTimePerformance,omitempty"`

	Settlement *Settlement__1 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight Segment instance. Example: segment1

	SegmentKey *KeyIdentifier `xml:"SegmentKey,attr,omitempty"`

	// When true, there are one or more connections for this flight.

	ConnectInd bool `xml:"ConnectInd,attr,omitempty"`

	// When true, an electronic ticket may be issued.

	ElectronicTicketInd bool `xml:"ElectronicTicketInd,attr,omitempty"`

	// When true, the fare can be purchased without issuing a ticket.

	TicketlessInd bool `xml:"TicketlessInd,attr,omitempty"`

	// When true, the flight is secure flight. An indicator to disclose when a flight is a "secure flight"

	SecureFlight bool `xml:"SecureFlight,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ListOfClassOfServiceType struct {
	ServiceClass []*ServiceClass__1 `xml:"ServiceClass,omitempty"`
}

type ListOfMediaType struct {
	Media []*Media__2 `xml:"Media,omitempty"`
}

type ListOfOfferInstructionsType struct {
	Instruction []*Instruction__1 `xml:"Instruction,omitempty"`
}

type ListOfOfferPenaltyType struct {
	Penalty []*Penalty__2 `xml:"Penalty,omitempty"`
}

type ListOfOfferTermsType struct {

	// Terms detail.
	Term []*OfferTermsType `xml:"Term,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type ListOfPriceClassType struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type ListOfServiceBundleType struct {
	ServiceBundle []*ServiceBundle__1 `xml:"ServiceBundle,omitempty"`
}

type FareBasisCodeType struct {

	// Fare basis code. Example: Y26
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Fare basis application.
	// Examples: Requested, Ticketed, Other
	Application *FareBasisAppSimpleType `xml:"Application,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FareType struct {
	FareCode *FareCode `xml:"FareCode,omitempty"`

	FareDetail *FareDetail `xml:"FareDetail,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FareDetailType struct {
	FareIndicatorCode *FareIndicatorCode__1 `xml:"FareIndicatorCode,omitempty"`

	PassengerRefs *PassengerRefs__1 `xml:"PassengerRefs,omitempty"`

	// Total price of all FareComponent prices. Price reflects a per-passenger price referenced within this FareDetail.
	Price *FarePriceDetailType `xml:"Price,omitempty"`

	// Fare Component information with Price Breakdown.
	FareComponent []*FareComponentType `xml:"FareComponent,omitempty"`

	FlightMileage *FlightMileage `xml:"FlightMileage,omitempty"`

	TourCode *TourCode `xml:"TourCode,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type FareRulesType struct {
	Penalty *Penalty `xml:"Penalty,omitempty"`

	CorporateFare *CorporateFare `xml:"CorporateFare,omitempty"`

	AdvanceStay *AdvanceStay__1 `xml:"AdvanceStay,omitempty"`

	Ticketing *Ticketing__1 `xml:"Ticketing,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FareComponentType struct {
	Parameters *Parameters__2 `xml:"Parameters,omitempty"`

	// Fare Component Pricing information.
	Price *FarePriceDetailType `xml:"Price,omitempty"`

	FareBasis *FareBasis__1 `xml:"FareBasis,omitempty"`

	TicketDesig *TicketDesig `xml:"TicketDesig,omitempty"`

	FareRules *FareRules `xml:"FareRules,omitempty"`

	PriceClassRef string `xml:"PriceClassRef,omitempty"`

	SegmentRefs *SegmentRefs__1 `xml:"SegmentRefs,omitempty"`
}

type FareFilingType struct {

	// Filed fare amount.
	// Example: 2385 USD
	//
	// Note: This contains the originally filed base fare amount.
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	// Fare neutral unit of construction amount.
	// Example: 4327
	//
	// Note: This contains the fare amount expressed in Neutral Units of Construction (NUC) values rather than in any currency for provisional billing purposes by airline revenue accounting departments.
	NUC_Amount float64 `xml:"NUC_Amount,omitempty"`

	// Applicable exchange rate. Example: 1 : 0.895
	ExchangeRate *ContextSimpleType `xml:"ExchangeRate,omitempty"`

	// Ticket masked value. Examples: IT, BT
	TicketBulkMask *ContextSimpleType `xml:"TicketBulkMask,omitempty"`

	FiledFare *FiledFare `xml:"FiledFare,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FileFareType struct {
	FareIndicatorCode *FareIndicatorCode__2 `xml:"FareIndicatorCode,omitempty"`

	// When true, this is a Cat35 C-Type Net Fare.

	Cat35NetFareInd bool `xml:"Cat35NetFareInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FarePriceBaseType struct {
	TotalAmount *TotalAmount__1 `xml:"TotalAmount,omitempty"`

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	FareFiledIn *FareFiledIn `xml:"FareFiledIn,omitempty"`

	Surcharges *Surcharges__2 `xml:"Surcharges,omitempty"`

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`
}

type FarePriceDetailType struct {
	*FarePriceBaseType

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	// Actual travel date requested by Traveler. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	RequestedDate string `xml:"RequestedDate,omitempty"`

	// Alignment with the actual travel date requested by the Traveler. Example: ADA (AFTER DATE BASED ON ARRIVAL)
	//
	// Encoding Scheme: IATA PADIS code list CSD-Calendar Shopping Date
	Alignment *IATA_CodeType `xml:"Alignment,omitempty"`
}

type COS_AssocType struct {
	*COS_OtherAssocType
}

type COS_OtherAssocType struct {
	OtherAssociation []*OtherAssociation__1 `xml:"OtherAssociation,omitempty"`
}

type FlightCOS_CoreType struct {
	Code *Code__3 `xml:"Code,omitempty"`

	MarketingName *MarketingName__1 `xml:"MarketingName,omitempty"`

	// Fare basis code. Example: Y26CH
	FareBasisCode string `xml:"FareBasisCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type StopLocationType struct {
	StopLocation []*StopLocation__1 `xml:"StopLocation,omitempty"`

	// When true, there has been a Change of Gauge.

	ChangeOfGaugeInd bool `xml:"ChangeOfGaugeInd,attr,omitempty"`
}

type FlightDepartureType struct {
	AirportCode *AirportCode__1 `xml:"AirportCode,omitempty"`

	// Departure date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`

	// Departure time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	Time *TimeSimpleType `xml:"Time,omitempty"`

	// Airport Name. Example: Tampa International
	AirportName *ProperNameSimpleType `xml:"AirportName,omitempty"`

	Terminal *Terminal__1 `xml:"Terminal,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightArrivalType struct {
	AirportCode *AirportCode__2 `xml:"AirportCode,omitempty"`

	// Arrival date. Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`

	// Arrival time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	Time *TimeSimpleType `xml:"Time,omitempty"`

	// Number of days between arrival and departure.  Example: 1
	ChangeOfDay int32 `xml:"ChangeOfDay,omitempty"`

	// Airport Name. Example: Geneva International Airport
	AirportName *ProperNameSimpleType `xml:"AirportName,omitempty"`

	Terminal *Terminal__2 `xml:"Terminal,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightType struct {
	OriginDestinationKey *OriginDestinationKey `xml:"OriginDestinationKey,omitempty"`

	TotalJourney *TotalJourney `xml:"TotalJourney,omitempty"`

	Flight []*Flight__1 `xml:"Flight,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightDetailType struct {
	FlightSegmentType *FlightSegmentType `xml:"FlightSegmentType,omitempty"`

	FlightDistance *FlightDistance `xml:"FlightDistance,omitempty"`

	FlightDuration *FlightDuration `xml:"FlightDuration,omitempty"`

	Stops *Stops__1 `xml:"Stops,omitempty"`

	ResDateTime *ResDateTime `xml:"ResDateTime,omitempty"`

	// Tour Operator Flight ID.
	//
	// Note: This is an ID for the flight as represented by a Tour Operator. This flight is not necessarily in the inventory of an airline as it is a code created by tour operators.
	TourOperatorFlightID *ContextSimpleType `xml:"TourOperatorFlightID,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightOnlyType struct {
	SegmentKey *SegmentKey `xml:"SegmentKey,omitempty"`

	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	// Marketing Carrier information.
	//
	// Notes: This is the carrier that sells with its own code as part of a code share agreement on a flight that is actually operated by another carrier.
	MarketingCarrier *MarketingCarrierFlightType `xml:"MarketingCarrier,omitempty"`

	Equipment *Equipment `xml:"Equipment,omitempty"`

	OperatingCarrier *OperatingCarrier__2 `xml:"OperatingCarrier,omitempty"`

	CabinType *CabinType `xml:"CabinType,omitempty"`

	ClassOfService *ClassOfService `xml:"ClassOfService,omitempty"`

	// Flight Details.
	Details *FlightDetailType `xml:"Details,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightDistanceType struct {

	// Flight distance value and distance unit of measure.
	// Example: 818, 5467
	Value int32 `xml:"Value,omitempty"`

	// Flight Distance Unit of Measure.
	// Examples: Kilometers, Miles
	UOM *DistanceUnitSimpleType `xml:"UOM,omitempty"`

	// Flight Distance Application.
	// Examples: FlightSegment, TotalJourney
	Application *ContextSimpleType `xml:"Application,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightDurationType struct {

	// Flight Segment Duration.
	// Example: PT6H45M (six hours and forty-five minutes)
	//
	// Note: This is the in-flight time duration associated with this segment. Stop duration is specified in the Stops node.
	Value string `xml:"Value,omitempty"`

	// Flight Duration Application.
	// Examples: FlightTime, ConnectionTime, TotalJourneyTime
	Application *FlightDurationAppSimpleType `xml:"Application,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TotalJourneyType struct {

	// Total Journey Time. Example: PT7H45M (7 hours and 45 minutes)
	//
	// Note: Total journey time includes the combined air time, connection time and/ or stop information for all specified flight segments.
	Time string `xml:"Time,omitempty"`

	Distance *Distance__1 `xml:"Distance,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightFrequencyType struct {
	Value DayOfWeekMaskType `xml:",chardata"`
}

type FlightMileageType struct {

	// Flight Mileage Value. Example: 2143
	Value int32 `xml:"Value,omitempty"`

	// Flight Mileage Application.
	// Examples: Segment, Trip, Other
	Application *FlightMileageAppSimpleType `xml:"Application,omitempty"`
}

type AircraftCodeType struct {
	Value AircraftEquipSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type AircraftCoreType struct {
	AircraftCode *AircraftCode `xml:"AircraftCode,omitempty"`

	// When TUE, this aircraft equipment information is associated with a flight change of gauge.

	ChangeOfGaugeInd bool `xml:"ChangeOfGaugeInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AircraftSummaryType struct {
	*AircraftCoreType

	// Equipment name. Example: Boeing 737-800
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Airline-specific aircraft equipment code.
	// Example: 737-800
	AirlineEquipCode *ContextSimpleType `xml:"AirlineEquipCode,omitempty"`
}

type AircraftCodeQueryType struct {
	AircraftCode []*AircraftCode `xml:"AircraftCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AircraftTailNmbrQueryType struct {

	// Aircraft Equipment Tail Number.
	TailNumber []*ContextSimpleType `xml:"TailNumber,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AircraftFeaturesQueryType struct {
	Feature []*Feature__1 `xml:"Feature,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightCabin_CoreType struct {
	CabinDesignator *CabinDesignator__1 `xml:"CabinDesignator,omitempty"`

	MarketingName *MarketingName__2 `xml:"MarketingName,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SimpleAircraftCabinType struct {
	*FlightCabin_CoreType
}

type ItineraryType struct {
	Flight []*Flight__2 `xml:"Flight,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OriginDestinationType struct {
	DepartureCode *DepartureCode `xml:"DepartureCode,omitempty"`

	ArrivalCode *ArrivalCode `xml:"ArrivalCode,omitempty"`

	// A globally unique identifier for this OriginDestination instance. Example: origDest1

	OriginDestinationKey *KeyIdentifier `xml:"OriginDestinationKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ItemID_Type struct {
	Value UniqueStringID_SimpleType `xml:",chardata"`

	// Airline designator or CRS code of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline or CRS Designator Code

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// Deep linking into another site to complete the transaction.

	WebAddressID string `xml:"WebAddressID,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type AddressMetadataType struct {
	*MetadataObjectBaseType

	Position *Position `xml:"Position,omitempty"`

	// type of address eg Billing, Business, Home
	AddressType string `xml:"AddressType,omitempty"`

	AddressFields *AddressFields__1 `xml:"AddressFields,omitempty"`
}

type AircraftMetadataType struct {
	*MetadataObjectBaseType

	// Aircraft tail number.  Example: N387SW
	TailNumber *ContextSimpleType `xml:"TailNumber,omitempty"`

	// Aircraft name.Example: N387SW
	Name *ProperNameSimpleType `xml:"Name,omitempty"`
}

type AirportMetadataType struct {
	*MetadataObjectBaseType

	Contacts *Contacts `xml:"Contacts,omitempty"`

	Directions *Directions__2 `xml:"Directions,omitempty"`

	Position *Position `xml:"Position,omitempty"`
}

type CityMetadataType struct {
	*MetadataObjectBaseType

	Directions *Directions `xml:"Directions,omitempty"`

	Position *Position `xml:"Position,omitempty"`
}

type CodesetMetadataType struct {
	*MetadataObjectBaseType

	Source *Source__1 `xml:"Source,omitempty"`

	OtherLanguage *OtherLanguage__1 `xml:"OtherLanguage,omitempty"`
}

type ContactMetadataType struct {
	*MetadataObjectBaseType
}

type ContentMetadataType struct {
	*MetadataObjectBaseType
}

type CountryMetadataType struct {
	*MetadataObjectBaseType

	// ICAO location code.
	// Example: K (CONTIGUOUS UNITED STATES)
	ICAO_Code *ICAO_LocSimpleType `xml:"ICAO_Code,omitempty"`

	// Country name.
	// Example: United States
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	Position *Position `xml:"Position,omitempty"`
}

type CurrencyMetadataType struct {
	*MetadataObjectBaseType

	// Currency application. Example: Actual Pricing, Display Currency, Requested Pricing
	Application *ContextSimpleType `xml:"Application,omitempty"`

	// Number of decimal places. Example: 2.  Note this is the number of decimal places normally used when displaying amounts in this currency
	Decimals int32 `xml:"Decimals,omitempty"`

	// Currency name.  Example: US Dollars
	Name *ProperNameSimpleType `xml:"Name,omitempty"`
}

type DescriptionMetadataType struct {
	*MetadataObjectBaseType

	// Description Application.  Examples: Marketing, TermsAndConditions
	Application *ContextSimpleType `xml:"Application,omitempty"`

	// Description topic. Example: Relax in the Lounge
	Topic *ShortDescSimpleType `xml:"Topic,omitempty"`

	// Hint. Example: Relax in the Lounge
	Hint *ShortDescSimpleType `xml:"Hint,omitempty"`

	// Description copyright.  Example: (c) ABC CO
	Copyright *ShortDescSimpleType `xml:"Copyright,omitempty"`

	// Description Sequence (order) Number. Example: 1
	Sequence int32 `xml:"Sequence,omitempty"`
}

type EquivalentID_MetadataType struct {
	*MetadataObjectBaseType

	EquivID []*EquivID__1 `xml:"EquivID,omitempty"`
}

type LanguageMetadataType struct {
	*MetadataObjectBaseType

	// Language application.  Examples: Display, Requested, Spoken, Written
	Application *LanguageAppSimpleType `xml:"Application,omitempty"`

	// Language encoding.  Examples: fr
	//
	// Encoding Scheme: ISO 639-1 Language Code
	Code_ISO *CodesetValueSimpleType `xml:"Code_ISO,omitempty"`

	// NLS Language encoding.  Examples: en-US
	//
	// Encoding Scheme: Microsoft National Language Support (NLS) Code
	Code_NLS *CodesetValueSimpleType `xml:"Code_NLS,omitempty"`

	// Language name. Example: English, United States
	Name *ProperNameSimpleType `xml:"Name,omitempty"`
}

type PaymentCardMetadataType struct {

	// Card Schema code eg VI, AX, VD
	CardCode string `xml:"CardCode,omitempty"`

	// Card Schema name eg Visa, American Express, Visa Debit
	CardName string `xml:"CardName,omitempty"`

	// Card Type eg Credit, Debit
	CardType string `xml:"CardType,omitempty"`

	CardFields *CardFields__1 `xml:"CardFields,omitempty"`

	Surcharge *Surcharge__2 `xml:"Surcharge,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// A globally unique identifier for this Metadata instance.

	MetadataKey string `xml:"MetadataKey,attr,omitempty"`
}

type PaymentFormMetadataType struct {
	*MetadataObjectBaseType

	// Customer Commercial Account.
	//
	// Note: This is a reference number to a commercial account used to further identify the holder of the credit card.

	CustomerFileReference *ContextSimpleType `xml:"CustomerFileReference,omitempty"`

	// Extended Payment Month Quantity. Example: 3
	//
	// Notes:
	//
	// 1. This is a code to indicate the number of months over which the customer wishes to pay where the credit card issuer permits.
	// 2. This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	ExtendedPaymentCode int32 `xml:"ExtendedPaymentCode,omitempty"`

	// Unique Transaction Information.
	//
	// Note: This may contain unique transaction information supplied to the airline/system provider by the credit card company.
	Text *DescriptionSimpleType `xml:"Text,omitempty"`

	// Corporate Contract Code. Example: IBM1234
	//
	// Note: This is used to indicate whether the purchase is on behalf of a corporate client that has a contract ith the ticketing agency for the purchase of transportation and related services.
	CorporateContractCode *DescriptionSimpleType `xml:"CorporateContractCode,omitempty"`
}

type PenaltyMetadataType struct {
	*MetadataObjectBaseType
}

type PriceMetadataType struct {
	*MetadataObjectBaseType
}

type RuleMetadataType struct {
	*MetadataObjectBaseType

	RuleID *RuleID__1 `xml:"RuleID,omitempty"`

	// Rule name.  Example: Rule001
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	Status *Status__3 `xml:"Status,omitempty"`

	Values *Values__1 `xml:"Values,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type StateProvMetadataType struct {
	*MetadataObjectBaseType

	Position *Position `xml:"Position,omitempty"`
}

type ZoneMetadataType struct {
	*MetadataObjectBaseType

	Position *Position `xml:"Position,omitempty"`
}

type BaggageCarryOnMetadataType struct {
	*MetadataObjectBaseType
}

type BaggageCheckedMetadataType struct {
	*MetadataObjectBaseType
}

type BaggageDetailMetadataType struct {
	*MetadataObjectBaseType

	Attributes *Attributes `xml:"Attributes,omitempty"`

	FareTariff *FareTariff__1 `xml:"FareTariff,omitempty"`

	// Fare rule code.
	// Example: EU (ECONOMY UNRESTRICTED)
	FareRule string `xml:"FareRule,omitempty"`

	// Fare category.
	// Example: CATEGORY 35
	FareCat string `xml:"FareCat,omitempty"`
}

type BaggageDisclosureMetadataType struct {
	*MetadataObjectBaseType
}

type BaggageQueryMetadataType struct {
	*MetadataObjectBaseType

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	// http://www.iata.org/publications/Pages/code-search.aspx
	TicketIssuePlace *AirlineDesigSimpleType `xml:"TicketIssuePlace,omitempty"`

	// Ticket issue country.
	// Example: CA
	TicketIssueCountry *CountrySimpleType `xml:"TicketIssueCountry,omitempty"`

	// Total number of passengers of all types for the entire itinerary. Example: 4
	PassengerCount int32 `xml:"PassengerCount,omitempty"`

	// Total price for the entire itinerary for all passengers of all types. Example: 320000
	TotalPrice *CurrencyAmountOptType `xml:"TotalPrice,omitempty"`
}

type DirectionsMetadataType struct {
	*MetadataObjectBaseType
}

type DisclosureMetadataType struct {
	*MetadataObjectBaseType

	// Disclosure creation timestamp. Example: 2017-01-13T13:59:38Z
	Timestamp string `xml:"Timestamp,omitempty"`
}

type FlightMetadataType struct {
	*MetadataObjectBaseType

	// Reservation system action code. Example: HK
	ActionCode *CodesetValueSimpleType `xml:"ActionCode,omitempty"`

	// A unique flight segment reference that may be used when binding request/ response messages.
	BindingKey *UniqueStringID_SimpleType `xml:"BindingKey,omitempty"`

	FlightStatus *FlightStatus `xml:"FlightStatus,omitempty"`

	Frequency *Frequency `xml:"Frequency,omitempty"`

	InstantPurchase *InstantPurchase `xml:"InstantPurchase,omitempty"`

	Meals *Meals__1 `xml:"Meals,omitempty"`

	OnTimePerformance *OnTimePerformance `xml:"OnTimePerformance,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type ItineraryMetadataType struct {
	*MetadataObjectBaseType

	// Reservation system action code. Example: HK
	ActionCode *CodesetValueSimpleType `xml:"ActionCode,omitempty"`
}

type MediaMetadataType struct {
	*MetadataObjectBaseType

	// Media application. Example: Marketing
	Application *ContextSimpleType `xml:"Application,omitempty"`

	// Media object caption.  Examples: (image) PREMIUM SEAT, (video) See the New Terminal
	// (file) Download Terminal Map, (link) Baggage Information
	Caption *ShortDescSimpleType `xml:"Caption,omitempty"`

	// Media object tip.  Example: Envoy Class Seat
	//
	// Note: This is typically used in a client GUI, e.g. a mouseover tip.
	Hint *ShortDescSimpleType `xml:"Hint,omitempty"`

	Dimensions *Dimensions__2 `xml:"Dimensions,omitempty"`

	MediaSource *MediaSource__1 `xml:"MediaSource,omitempty"`
}

type OfferItemMetadataType struct {
	*MetadataObjectBaseType

	ATPCO *ATPCO__1 `xml:"ATPCO,omitempty"`

	Incentives *Incentives__1 `xml:"Incentives,omitempty"`

	Matches *Matches__1 `xml:"Matches,omitempty"`

	Terms *Terms__1 `xml:"Terms,omitempty"`

	TimeLimits *TimeLimits__1 `xml:"TimeLimits,omitempty"`

	Rule *Rule__1 `xml:"Rule,omitempty"`

	// Offer Status. Example: NN (Requested)
	Status *OfferStatusType `xml:"Status,omitempty"`
}

type OfferInstructionMetadataType struct {
	*MetadataObjectBaseType
}

type OfferTermsMetadataType struct {
	*MetadataObjectBaseType
}

type SeatMetadataType struct {
	*MetadataObjectBaseType

	// Seat status.
	// Examples:
	// SA (Seats are available)
	// WO (Seats waitlist open for segment)
	// WC (Seats waitlist closed for segment)
	// OR (Seats on request only to airline)
	//
	// Encoding Scheme: IATA PADIS Code List for data element 9865 - Seat Occupation
	SeatStatus *IATA_CodeType `xml:"SeatStatus,omitempty"`
}

type SeatMapMetadataType struct {
	*MetadataObjectBaseType
}

type PassengerMetadataType struct {
	*MetadataObjectBaseType

	NameDetail *NameDetail__1 `xml:"NameDetail,omitempty"`
}

type FlightInfoAssocType struct {

	// When true, this Simple Fare Offer applies to all specified flight Segments.
	AllSegmentInd bool `xml:"AllSegmentInd,omitempty"`

	FlightSegmentReference []*FlightSegmentReference `xml:"FlightSegmentReference,omitempty"`

	// When true, this Baggage Offer applies to all specified flight Origin/ Destination Pairs.
	AllOriginDestinationInd bool `xml:"AllOriginDestinationInd,omitempty"`

	OriginDestinationReferences *OriginDestinationReferences `xml:"OriginDestinationReferences,omitempty"`

	// When true, this Simple Fare Offer applies to all specified flights.
	AllFlightInd bool `xml:"AllFlightInd,omitempty"`

	FlightReferences *FlightReferences `xml:"FlightReferences,omitempty"`
}

type BagOfferAssocType struct {
	AssociatedPassenger *AssociatedPassenger `xml:"AssociatedPassenger,omitempty"`

	ApplicableFlight *ApplicableFlight `xml:"ApplicableFlight,omitempty"`

	OfferDetailAssociation *OfferDetailAssociation `xml:"OfferDetailAssociation,omitempty"`

	BagDetailAssociation *BagDetailAssociation `xml:"BagDetailAssociation,omitempty"`

	AssociatedService *AssociatedService `xml:"AssociatedService,omitempty"`

	OtherAssociation *OtherAssociation `xml:"OtherAssociation,omitempty"`
}

type MediaAssocType struct {
	MediaGroupreference *MediaGroupreference `xml:"MediaGroupreference,omitempty"`

	MediaItems []*MediaItems__1 `xml:"MediaItems,omitempty"`
}

type OfferAssociationsType struct {

	//
	// Associated Shoppers. Note: Includes Anonymous, Recognized and/or PTC shopper association.
	//
	Shopper *ShopperInfoAssocType `xml:"Shopper,omitempty"`

	// Associated Flight(s).
	Flight *FlightInfoAssocType `xml:"Flight,omitempty"`

	PriceClass *PriceClass__1 `xml:"PriceClass,omitempty"`

	// Baggage Detail Associations.
	BagDetails *BagDetailAssocType `xml:"BagDetails,omitempty"`

	// Offer Detail Association(s).
	OfferDetails *OfferDetailInfoAssocType `xml:"OfferDetails,omitempty"`

	Services *Services__1 `xml:"Services,omitempty"`

	// Associated Media.
	Media *MediaAssocType `xml:"Media,omitempty"`

	// Other Association(s).
	Other *OtherOfferAssocType `xml:"Other,omitempty"`
}

type OfferDetailInfoAssocType struct {
	OfferInstructionReferences *OfferInstructionReferences `xml:"OfferInstructionReferences,omitempty"`

	OfferPenaltyReferences *OfferPenaltyReferences `xml:"OfferPenaltyReferences,omitempty"`

	OfferTermReferences *OfferTermReferences `xml:"OfferTermReferences,omitempty"`
}

type OtherOfferAssocType struct {
	OtherAssociation []*OtherAssociation__2 `xml:"OtherAssociation,omitempty"`
}

type PricedFlightOfferAssocType struct {
	AssociatedPassenger *AssociatedPassenger `xml:"AssociatedPassenger,omitempty"`

	ApplicableFlight *ApplicableFlight `xml:"ApplicableFlight,omitempty"`

	PriceClass *PriceClass__2 `xml:"PriceClass,omitempty"`

	OfferDetailAssociation *OfferDetailAssociation `xml:"OfferDetailAssociation,omitempty"`

	IncludedService *IncludedService `xml:"IncludedService,omitempty"`

	AssociatedService *AssociatedService `xml:"AssociatedService,omitempty"`

	OtherAssociation *OtherAssociation `xml:"OtherAssociation,omitempty"`
}

type ServiceInfoAssocType struct {
	BundleReference *BundleReference `xml:"BundleReference,omitempty"`

	ServiceReferences *ServiceReferences `xml:"ServiceReferences,omitempty"`
}

type ShopperInfoAssocType struct {
	PassengerReference *PassengerReference `xml:"PassengerReference,omitempty"`

	//
	// When true, this Offer applies to all specified shoppers.
	//

	AllShopperInd bool `xml:"AllShopperInd,attr,omitempty"`
}

type PassengerInfoAssocType struct {

	// When true, this Offer applies to all specified Passengers.
	AllPassengerInd bool `xml:"AllPassengerInd,omitempty"`

	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`
}

type OfferType struct {
	Parameters *Parameters__3 `xml:"Parameters,omitempty"`

	ValidatingCarrier *ValidatingCarrier `xml:"ValidatingCarrier,omitempty"`

	// Offer-Level Time Limits, including Offer Expiration, Payment and Bilateral Time Limits.
	//
	// Note: If specified, these time limits are at the OFFER-LEVEL and will apply by default to any relevant (child) Offer Items. These time limits may also be specified at a (child) OFFER ITEM-level where it will apply to that one instance of the Offer Item (and override the Offer-level time limit if one has been specified.)
	TimeLimits *OfferTimeLimitSetType `xml:"TimeLimits,omitempty"`

	TotalPrice *TotalPrice__1 `xml:"TotalPrice,omitempty"`

	DescriptionReferences *DescriptionReferences `xml:"DescriptionReferences,omitempty"`

	DisclosureRef string `xml:"DisclosureRef,omitempty"`

	BagDisclosureRefs string `xml:"BagDisclosureRefs,omitempty"`

	// Penalty information.
	Penalty *OfferPenaltyType `xml:"Penalty,omitempty"`

	Match *Match `xml:"Match,omitempty"`

	// Airline-assigned unique Offer identifier.

	OfferID string `xml:"OfferID,attr,omitempty"`

	// Airline designator of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`

	// Indicator to specify if the offer relates to requested date. For example in calendar search, this indicator will be set to 'true' if this airline offer is for a requested date and will not be present (or will be set to 'false' if airline offer is for another date than requested one.

	RequestedDateInd bool `xml:"RequestedDateInd,attr,omitempty"`

	// Deep linking into another site to complete the transaction.

	WebAddressID string `xml:"WebAddressID,attr,omitempty"`
}

type BaggageOfferCoreType struct {
	TotalPrice *TotalPrice__2 `xml:"TotalPrice,omitempty"`

	// Validating Carrier Airline Designator.
	// A two-character alpha-numeric code assigned according to the IATA Resolution 762 or a three-letter airline designator assigned by ICAO.  Refer to IATA Airline Coding Directory .  Example: BA
	//
	ValidatingCarrier *AirlineDesigSimpleType `xml:"ValidatingCarrier,omitempty"`

	BagDetails *BagDetails__1 `xml:"BagDetails,omitempty"`
}

type OtherOfferCoreType struct {
	OfferPrice *OfferPrice__1 `xml:"OfferPrice,omitempty"`
}

type PricedFlightOfferCoreType struct {
	OfferPrice *OfferPrice__2 `xml:"OfferPrice,omitempty"`

	FareDetail *FareDetail `xml:"FareDetail,omitempty"`

	//
	// When true, this is a lead pricing generated priced flight offer.
	//

	LeadPricedInd bool `xml:"LeadPricedInd,attr,omitempty"`

	//
	// When true, additional lead pricing offers are included with this proced flight offer.
	//

	LeadPricingIncInd bool `xml:"LeadPricingIncInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SeatOfferCoreType struct {
	*SeatDetailType

	OfferPrice *OfferPrice__3 `xml:"OfferPrice,omitempty"`
}

type OfferInstructionType struct {

	// Upgrade-eligible Class(es) of Service.
	ClassOfServiceUpgrade *OfferClassUpgradeType `xml:"ClassOfServiceUpgrade,omitempty"`

	// Free-text Instruction Remark(s).
	FreeFormTextInstruction *FreeFormInstructionsType `xml:"FreeFormTextInstruction,omitempty"`

	// Special Need Order booking method.
	// Examples:
	// AE (by SSR-Special Service Request)
	// AF (by OSI-Other Service Information)
	//
	// Encoding scheme: PADIS Code List for data element 9750 - Option
	SpecialBookingInstruction *IATA_CodeType `xml:"SpecialBookingInstruction,omitempty"`
}

type FreeFormInstructionsType struct {
	*InstrRemarkType
}

type OfferClassUpgradeType struct {
	*InstrClassUpgradeType
}

type InvGuaranteeType struct {
	InvGuaranteeTimeLimit *InvGuaranteeTimeLimit__1 `xml:"InvGuaranteeTimeLimit,omitempty"`

	// Unique Inventory Guarantee ID.
	// Examples: INVREF123456, 68E0DB2F-675C-44F7-BC1E-653106099FF9
	//
	// Note: This is a unique identifier issued by an Airline to reference that inventory for a specified offer will be guaranteed as available for a period.
	InvGuaranteeID *UniqueStringID_SimpleType `xml:"InvGuaranteeID,omitempty"`

	OfferReferences *OfferReferences `xml:"OfferReferences,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferPriceLeadType struct {
	RequestedDate *RequestedDate__1 `xml:"RequestedDate,omitempty"`

	FareDetail *FareDetail `xml:"FareDetail,omitempty"`

	// Globally unique OfferItem instance ID. It is not recommended to exceed 64, and it is not recommended to use dashes..Example: QWASZXERDFCVTYGHBNUIJKNMF67D5F9GHR567SWER41SD458F9456FMDIRTN34DF

	OfferItemID string `xml:"OfferItemID,attr,omitempty"`

	// POA to ORA only: to indicate that the offer is non-modifiable. This indicates to ORA that its offer is non-modifiable (eg. Regulatory or brand protection reasons). If indicator is set to true, nodifications to the POA’s offer ARE NOT allowed.

	ModificationProhibitedInd bool `xml:"ModificationProhibitedInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferPriceLeadDetailType struct {
	PriceDetail *PriceDetail__1 `xml:"PriceDetail,omitempty"`
}

type OfferMatchType struct {

	// Match Application.  Examples: ATTRIBUTE, AFFINITY, Other
	Application *MatchAppSimpleType `xml:"Application,omitempty"`

	MatchResult *MatchResult__1 `xml:"MatchResult,omitempty"`

	// Match percentage. Example: 60
	//
	// Note: This value may be used to indicate a percentage of a Partial match.
	Percentage *WholePercentageSimpleType `xml:"Percentage,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PTC_QuantityType struct {
	Value PaxSimpleType `xml:",chardata"`

	// Number of Traveler(s) for associated passenger type and country of residence.  Example: 2

	Quantity int32 `xml:"Quantity,attr,omitempty"`
}

type PTC_QuantityPricedType struct {

	// Requested passenger type code for pricing. Example: CHD
	//
	// Encoding scheme: IATA (three character) Passenger Type Code
	Requested *PTC_QuantityType `xml:"Requested,omitempty"`

	// Actual passenger type code used for for pricing.  Example: ADT
	//
	// Encoding scheme: IATA (three character) Passenger Type Code
	Priced *PTC_QuantityType `xml:"Priced,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferPenaltyType struct {
	*PenaltyType
}

type OfferIncentiveType struct {
	Incentive []*Incentive__1 `xml:"Incentive,omitempty"`
}

type AirlineOffersSnapshotType struct {
	PassengerQuantity *PassengerQuantity__1 `xml:"PassengerQuantity,omitempty"`

	AssociatedPassenger *AssociatedPassenger `xml:"AssociatedPassenger,omitempty"`

	SubTotal *SubTotal__1 `xml:"SubTotal,omitempty"`

	Highest *Highest__1 `xml:"Highest,omitempty"`

	Lowest *Lowest__1 `xml:"Lowest,omitempty"`

	// Total Quantity of Offers that Matched search criteria. Example: 3
	//
	// Note: This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	MatchedOfferQuantity int32 `xml:"MatchedOfferQuantity,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferStatusType struct {

	// Status. Examples: NN (Requested); HK (Confirmed)
	//
	// Note: This Offer Status may contain any bilaterally-agreed upon status information.
	//
	Status *CodesetValueSimpleType `xml:"Status,omitempty"`

	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`
}

type OfferTermsType struct {

	// Earliest and Latest Period that an Option is Available or May be Used.
	AvailablePeriod *OfferValidPeriodType `xml:"AvailablePeriod,omitempty"`

	// Offer Terms Description(s).
	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	// Minimum and Maximum Group Size, e.g. Traveler quantities, associated with the Offer.
	GroupSize *OfferGroupSizeType `xml:"GroupSize,omitempty"`

	// Minimum/ Maximum Option Ordering Quantity(s).
	OrderingQuantity *OfferOrderQuantityType `xml:"OrderingQuantity,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferGroupSizeType struct {

	// The MINIMUM Group Size (e.g. Traveler quantity) required for the Offer.  Example: 2
	Minimum int32 `xml:"Minimum,omitempty"`

	// The MAXIMUM Group Size (e.g. Traveler quantity) required for the Offer.  Example: 6
	Maximum int32 `xml:"Maximum,omitempty"`
}

type OfferValidPeriodType struct {
	Earliest *Earliest__1 `xml:"Earliest,omitempty"`

	Latest *Latest__1 `xml:"Latest,omitempty"`
}

type OfferOrderQuantityType struct {

	// The MINIMUM Quantity of the Option that may be ordered. Example: 2
	Minimum int32 `xml:"Minimum,omitempty"`

	// The MAXIMUM Quantity of the Option that may be ordered. Example: 4
	Maximum int32 `xml:"Maximum,omitempty"`
}

type OfferTimeLimitSetType struct {
	OfferExpiration *OfferExpiration__1 `xml:"OfferExpiration,omitempty"`

	// Payment Time Limit value.
	// Examples: 2017-05-30T09:00:00,  2015-01-13T13:59:38Z
	//
	// Notes:
	// 1. This is the deadline by which a commitment to pay must be made for the confirmed items in an offer as agreed witht he airline. The passenger meets this requirement by making complete payment for the order.
	//
	// 2. Payment Time Limit and Ticket Time Limit may be the same in most cases; however, Payment Time Limit expands to include ticketless transactions and other accountable documents.
	//
	// 3. This time limit is at the OFFER-LEVEL and will apply to all (child) Offer Items.
	Payment *CoreDateGrpType `xml:"Payment,omitempty"`

	OtherLimits *OtherLimits__1 `xml:"OtherLimits,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferItemTimeLimitSetType struct {
	TimeLimit []*TimeLimit__1 `xml:"TimeLimit,omitempty"`
}

type PriceGuarTimeLimitType struct {

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TicketByTimeLimitType struct {
	TicketBy *TicketBy__1 `xml:"TicketBy,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OtherOrderAssocType struct {
	OtherAssociation []*OtherAssociation__3 `xml:"OtherAssociation,omitempty"`
}

type OrderItemAssociationType struct {
	Passengers *Passengers__1 `xml:"Passengers,omitempty"`

	// Associated Group detail.
	Group *GroupType `xml:"Group,omitempty"`

	Flight *Flight__3 `xml:"Flight,omitempty"`

	OrderItems *OrderItems__1 `xml:"OrderItems,omitempty"`

	OfferItems *OfferItems__1 `xml:"OfferItems,omitempty"`

	Services *Services__2 `xml:"Services,omitempty"`

	// Other optional association(s).
	OtherAssociations *OtherOrderAssocType `xml:"OtherAssociations,omitempty"`

	// When true, this applies to all passengers.

	AllPassengersInd bool `xml:"AllPassengersInd,attr,omitempty"`

	// When true, this applies to the whole itinerary, including all passengers.

	WholeItineraryInd bool `xml:"WholeItineraryInd,attr,omitempty"`
}

type OrderInstructionType struct {

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OrderCommissionType struct {
	*InstrCommissionType
}

type OrderQualiferType struct {
	OrderKeys *OrderKeys `xml:"OrderKeys,omitempty"`
}

type OrderKeysType struct {
	OrderID *OrderID `xml:"OrderID,omitempty"`

	AssociatedIDs *AssociatedIDs__1 `xml:"AssociatedIDs,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OrderID_Type struct {
	Value UniqueStringID_SimpleType `xml:",chardata"`

	// Airline Designator of airline that owns/ assigned this ID. Example: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Codes

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// Deep linking into another site to complete the transaction.

	WebAddressID string `xml:"WebAddressID,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type OrderType struct {
	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	OriginalOrder *OriginalOrder__1 `xml:"OriginalOrder,omitempty"`

	TotalOrderPrice *TotalOrderPrice__1 `xml:"TotalOrderPrice,omitempty"`

	Status *Status__4 `xml:"Status,omitempty"`

	Payments *Payments__1 `xml:"Payments,omitempty"`

	TimeLimits *TimeLimits__2 `xml:"TimeLimits,omitempty"`

	OrderKeys *OrderKeys `xml:"OrderKeys,omitempty"`

	// The airline-assigned unique Order ID. Example: ORDER-c98c-4759-a20b

	OrderID *UniqueID_SimpleType `xml:"OrderID,attr,omitempty"`

	// Airline Designator of airline that owns/ assigned this ID. Example: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Codes

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`

	// Deep linking into another site to complete the transaction.

	WebAddressID string `xml:"WebAddressID,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	MetadataRefs *InstanceClassRefSimpleType `xml:"MetadataRefs,attr,omitempty"`
}

type OrderItemType struct {
	OrderItem []*OrderItem__1 `xml:"OrderItem,omitempty"`
}

type BaggageItemType struct {

	// Price.
	Price *GenericPriceType `xml:"Price,omitempty"`

	// Validating Carrier Airline Designator.
	// A two-character alpha-numeric code assigned according to the IATA Resolution 762 or a three-letter airline designator assigned by ICAO.  Refer to IATA Airline Coding Directory .  Example: BA
	ValidatingCarrier *AirlineDesigSimpleType `xml:"ValidatingCarrier,omitempty"`

	BagDetails *BagDetails__2 `xml:"BagDetails,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightItemType struct {

	// Flight Pricing.
	Price *GenericPriceType `xml:"Price,omitempty"`

	// Flight Origin/ Destination information.
	OriginDestination []*FlightType `xml:"OriginDestination,omitempty"`

	// Fare Detail.
	FareDetail *FareDetailType `xml:"FareDetail,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OrderOfferItemType struct {
	OfferItemID *OfferItemID `xml:"OfferItemID,omitempty"`

	OfferItemType *OfferItemType__1 `xml:"OfferItemType,omitempty"`

	//
	// Time Limits, including mandatory Offer Expiration and Payment Time Limits.
	//
	TimeLimits *OfferItemTimeLimitSetType `xml:"TimeLimits,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OtherItemType struct {

	// Price.
	Price *GenericPriceType `xml:"Price,omitempty"`

	// Allow specification information of OtherItem.
	Description string `xml:"Description,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PaymentStatusType struct {

	// Overall Order payment Status Code.
	//

	StatusCode string `xml:"StatusCode,omitempty"`

	IncompletePayment *IncompletePayment__1 `xml:"IncompletePayment,omitempty"`
}

type SeatItemType struct {

	// Price
	Price *GenericPriceType `xml:"Price,omitempty"`

	// Seat Description.
	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	SeatReference []*SeatReference `xml:"SeatReference,omitempty"`

	// Seat Location information.
	Location *SeatLocationType `xml:"Location,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BankAccountMethodType struct {
	Name *Name__6 `xml:"Name,omitempty"`

	CheckNumber *CheckNumber__1 `xml:"CheckNumber,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CashMethodType struct {

	// Cash Amount. Example: 67.95
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Terminal ID where cash was collected. Example: QP776611
	TerminalID *ContextSimpleType `xml:"TerminalID,omitempty"`

	// Cash receipt ID. Example: 121717H47S
	ReceiptID *ContextSimpleType `xml:"ReceiptID,omitempty"`

	AgentUserID *AgentUserID `xml:"AgentUserID,omitempty"`

	Address *Address__4 `xml:"Address,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type DirectBillMethodType struct {

	// Direct billing Organizaqtion ID. Example: IBM
	DirectBillID *ProperNameSimpleType `xml:"DirectBillID,omitempty"`

	// Remit to Company Name. Example: IBM
	//
	// Note: This is the company name to whom remittance should be directed.
	CompanyName *ProperNameSimpleType `xml:"CompanyName,omitempty"`

	// Direct Billing Contact Name. Example: J THOMAS
	ContactName *ProperNameSimpleType `xml:"ContactName,omitempty"`

	Address *Address__5 `xml:"Address,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MiscChargeMethodType struct {

	// The ticket number of the miscellaneous charge order (MCO).
	TicketNumber *ContextSimpleType `xml:"TicketNumber,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OtherMethodType struct {
	Remarks *Remarks `xml:"Remarks,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PaymentProcessType struct {

	//
	// The form of payment type. Examples: Credit Card, Cash. Encoding Scheme: IATA PADIS code list data element [9888] Form of Payment Identification
	//
	Type *IATA_CodeType `xml:"Type,omitempty"`

	Status *Status__5 `xml:"Status,omitempty"`

	Amount *Amount__1 `xml:"Amount,omitempty"`

	Method *Method__1 `xml:"Method,omitempty"`

	Variance *Variance__1 `xml:"Variance,omitempty"`

	Promotions *Promotions__1 `xml:"Promotions,omitempty"`

	Description *Description `xml:"Description,omitempty"`

	Payer *Payer__1 `xml:"Payer,omitempty"`

	OrderItemID []string `xml:"OrderItemID,omitempty"`

	// When true, this is a split form of payment.

	SplitFormInd bool `xml:"SplitFormInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type PaymentCardMethodType struct {

	// Magnetic striped card type.
	CardType *PayCardTypeSimpleType `xml:"CardType,omitempty"`

	// Credit card issuer code. Example: MC
	//
	// Note: This is the 2 character code of the credit card issuer.
	CardCode *PayCardCodeSimpleType `xml:"CardCode,omitempty"`

	MaskedCardNumber *MaskedCardNumber__2 `xml:"MaskedCardNumber,omitempty"`

	// Tokenized card number.
	//
	// Note: This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	TokenizedCardNumber string `xml:"TokenizedCardNumber,omitempty"`

	Contacts *Contacts `xml:"Contacts,omitempty"`

	CardHolderName *CardHolderName__2 `xml:"CardHolderName,omitempty"`

	CardIssuerName *CardIssuerName__2 `xml:"CardIssuerName,omitempty"`

	CardholderAddress *CardholderAddress__1 `xml:"CardholderAddress,omitempty"`

	EffectiveExpireDate *EffectiveExpireDate__3 `xml:"EffectiveExpireDate,omitempty"`

	// Approval Code Method. Example: M (Manual)
	//
	// Note: This is used to specify how the approval code for a credit card sale was obtained.
	//
	// Encoding Scheme: IATA PADIS Code List for data element 9890.
	ApprovalType *IATA_CodeType `xml:"ApprovalType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type RedemptionMethodType struct {
	Certificates *Certificates__2 `xml:"Certificates,omitempty"`

	MemberNumber *MemberNumber__2 `xml:"MemberNumber,omitempty"`

	// The quantity of loyalty units  redeemed. Example: 15000
	RedemptionQuantity int32 `xml:"RedemptionQuantity,omitempty"`

	// Promotion Code.
	//
	// Note: Promotion code is the identifier used by the host to link directly with a specific named advertising campaign. By including the required code, the client is able to gain access to special offers which may have been created for a specifically targeted group via a CRM system or for a wider advertising campaign using Television or press adverts.
	PromotionCode *ContextSimpleType `xml:"PromotionCode,omitempty"`

	// List of vendor codes associated with the promotion.
	PromoVendorCode []*ContextSimpleType `xml:"PromoVendorCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type VoucherMethodType struct {

	// Voucher ID or Number. Example: XX12345
	Number *ShortDescSimpleType `xml:"Number,omitempty"`

	EffectiveExpireDate *EffectiveExpireDate__4 `xml:"EffectiveExpireDate,omitempty"`

	// Remaining Amount on Voucher.
	RemainingValue *CurrencyAmountOptType `xml:"RemainingValue,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AltBaggageOfferType struct {
	*BaggageOfferCoreType

	//
	// Offer Association(s), including Order, Order Item, Passenger, Group, Offer Item and Service.
	//
	Associations *MultiAssociationType `xml:"Associations,omitempty"`
}

type AltOtherOfferType struct {
	*OtherOfferCoreType

	//
	// Offer Association(s), including Order, Order Item, Passenger, Group, Offer Item and Service.
	//
	Associations *MultiAssociationType `xml:"Associations,omitempty"`
}

type AltPricedFlightOfferType struct {
	*PricedFlightOfferCoreType

	//
	// Offer Association(s), including Order, Order Item, Passenger, Group, Offer Item and Service.
	//
	Associations *MultiAssociationType `xml:"Associations,omitempty"`
}

type AltSeatOfferType struct {
	*SeatOfferCoreType

	//
	// Offer Association(s), including Order, Order Item, Passenger, Group, Offer Item and Service.
	//
	Associations *MultiAssociationType `xml:"Associations,omitempty"`
}

type OrderPenaltyType struct {
	*PenaltyType
}

type OrderProcessResultType struct {
	MarketingMessages *MarketingMessages `xml:"MarketingMessages,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OrderTimeLimitsType struct {
	PaymentTimeLimit *PaymentTimeLimit `xml:"PaymentTimeLimit,omitempty"`

	DepositTimeLimit *DepositTimeLimit `xml:"DepositTimeLimit,omitempty"`

	NamingTimeLimit *NamingTimeLimit `xml:"NamingTimeLimit,omitempty"`

	BilateralTimeLimits *BilateralTimeLimits `xml:"BilateralTimeLimits,omitempty"`
}

type OrderItemTimeLimitsType struct {
	*OrderTimeLimitsType

	PriceGuaranteeTimeLimits *PriceGuaranteeTimeLimits `xml:"PriceGuaranteeTimeLimits,omitempty"`

	TicketingTimeLimits *TicketingTimeLimits `xml:"TicketingTimeLimits,omitempty"`
}

type CarrierFeeInfoType struct {
	PaymentForm *PaymentForm `xml:"PaymentForm,omitempty"`

	CarrierFees *CarrierFees__1 `xml:"CarrierFees,omitempty"`

	Taxes *Taxes__2 `xml:"Taxes,omitempty"`
}

type AdditionalReferenceType struct {

	// Additional Reference Type. Example: 6 (Customer ID)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 9958 (Reservation Control Type)
	Type *IATA_CodeType `xml:"Type,omitempty"`

	// Additional Reference ID.
	//
	// Note: Based on the specified Type, this may contain an invoice number, customer file reference, customer id, or airline indexing field.

	ID string `xml:"ID,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AirlineIssuanceType struct {

	// Issuing Airline Name. Example: British Airways
	AirlineName *ProperNameSimpleType `xml:"AirlineName,omitempty"`

	// The place where the document was issued. Example: New York City NY
	Place string `xml:"Place,omitempty"`
}

type CouponAgentType struct {

	// Agency/ Agent Identification Type. Example: 706 (IATA agency numeric code)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 9893 (Identification Type, coded)
	Type *IATA_CodeType `xml:"Type,omitempty"`

	ID *ID__1 `xml:"ID,omitempty"`
}

type CouponInfoType struct {

	// Coupon Sequence Number. Example: 2
	//
	// Note: This is the number representing the order in which this coupon was used or is to be used.

	CouponItinSequenceNbr int32 `xml:"CouponItinSequenceNbr,omitempty"`

	// Applicable coupon number. Example: 1234
	CouponNumber int32 `xml:"CouponNumber,omitempty"`

	// Coupon Refence Number. Example: 1
	//
	// Note: This is the sequential number (segment identifier) of an individual flight segment.

	CouponReference string `xml:"CouponReference,omitempty"`

	FareBasisCode *FareBasisCode `xml:"FareBasisCode,omitempty"`

	// Coupon Media Type. Examples: Electronc, Paper, Other
	CouponMedia *CouponMediaSimpleType `xml:"CouponMedia,omitempty"`

	// Coupon Valid date or date/time period.
	CouponValid *CouponEffectiveType `xml:"CouponValid,omitempty"`

	// Current status of the flight/value coupon. Example: E (Exchanged/reissued)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 4405 (Status, coded)
	Status *IATA_CodeType `xml:"Status,omitempty"`

	// Involuntary Change Transaction Code. Example: I (Involuntary - no reason given)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 1245 (Status indicator, coded)
	InvoluntaryIndicatorCode *IATA_CodeType `xml:"InvoluntaryIndicatorCode,omitempty"`

	// Settlement Authorization Code. Example: AUTH123
	//
	// Note: This is a reference number generated by the validating carrier authorising settlement of a coupon.
	SettlementAuthCode *ContextSimpleType `xml:"SettlementAuthCode,omitempty"`

	// Associated Fare Basis Code.
	//
	// Note: This is the applicable code provided for IATA Resolution 728 (for the associated EMD.)
	AssocFareBasis *ContextSimpleType `xml:"AssocFareBasis,omitempty"`

	// Promotional code that applies to the fee. Example: PROMO123
	PromoCode *PromotionType `xml:"PromoCode,omitempty"`

	// Date of Service. Example: 2017-01-17
	//
	// Note: This is the scheduled date of service for this coupon of an EMD.
	DateOfService string `xml:"DateOfService,omitempty"`

	// Service Quantity. Example: 1
	//
	// Note: Thisis the number of services of the same type that are included in an EMD coupon.

	ServiceQuantity int32 `xml:"ServiceQuantity,omitempty"`

	ServiceReferences *ServiceReferences `xml:"ServiceReferences,omitempty"`

	// Coupon Value. Example: 100 USD
	//
	// Note: This is the value associated to a single coupon of a miscellaneous document.
	Value *CurrencyAmountOptType `xml:"Value,omitempty"`

	SoldAirlineInfo *SoldAirlineInfo__1 `xml:"SoldAirlineInfo,omitempty"`

	InConnectionWithInfo *InConnectionWithInfo `xml:"InConnectionWithInfo,omitempty"`

	PresentInfo *PresentInfo__1 `xml:"PresentInfo,omitempty"`

	ReasonForIssuance *ReasonForIssuance__1 `xml:"ReasonForIssuance,omitempty"`

	FiledFeeInfo *FiledFeeInfo__1 `xml:"FiledFeeInfo,omitempty"`

	ProductCharacteristic *ProductCharacteristic__1 `xml:"ProductCharacteristic,omitempty"`

	AdditionalServicesInfo *AdditionalServicesInfo__1 `xml:"AdditionalServicesInfo,omitempty"`

	ExcessBaggage *ExcessBaggage__1 `xml:"ExcessBaggage,omitempty"`

	// Coupon Validating Airline. Example: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code
	ValidatingAirline *AirlineDesigSimpleType `xml:"ValidatingAirline,omitempty"`

	// Free text to provide further information related to the document and/or the coupon.
	Remark *AlphaNumericStringLength1to71 `xml:"Remark,omitempty"`

	AddlBaggageInfo *AddlBaggageInfoType `xml:"AddlBaggageInfo,omitempty"`

	// The two/three character designator identifying the Marketing Carrier designated in the new reservation.
	ResAirlineDesig *AirlineType `xml:"ResAirlineDesig,omitempty"`

	// This field contains the scheduled date of departure of the “Reservation Change” flight.
	ResDateOfFlight string `xml:"ResDateOfFlight,omitempty"`

	ResDesigAirportCityCode *ResDesigAirportCityCode__1 `xml:"ResDesigAirportCityCode,omitempty"`

	ResFlightDepartureTime *ResFlightDepartureTime__1 `xml:"ResFlightDepartureTime,omitempty"`

	ResFlightNumber *ResFlightNumber__1 `xml:"ResFlightNumber,omitempty"`

	ResOriginAirportCityCode *ResOriginAirportCityCode__1 `xml:"ResOriginAirportCityCode,omitempty"`

	// This field contains the reservations booking designator (Marketing) of the “Reservation Change” flight.
	ResBookDesign *CodesetValueSimpleType `xml:"ResBookDesign,omitempty"`

	// This field contains the Reservation Status Code of the “Reservation Change” flight.
	ResStatusCode *IATA_CodeType `xml:"ResStatusCode,omitempty"`

	CurrentAirlineInfo *CurrentAirlineInfo `xml:"CurrentAirlineInfo,omitempty"`

	CheckedInAirlineInfo *CheckedInAirlineInfo `xml:"CheckedInAirlineInfo,omitempty"`

	FlownAirlineInfo *FlownAirlineInfo `xml:"FlownAirlineInfo,omitempty"`

	// When true, the coupon is consumed at issuance.

	ConsumedAtIssuanceInd bool `xml:"ConsumedAtIssuanceInd,attr,omitempty"`
}

type CouponEffectiveType struct {
	EffectiveDatePeriod *EffectiveDatePeriod__1 `xml:"EffectiveDatePeriod,omitempty"`

	EffectiveDateTimePeriod *EffectiveDateTimePeriod__1 `xml:"EffectiveDateTimePeriod,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CouponOrderKeyType struct {
	OrderID *OrderID `xml:"OrderID,omitempty"`

	OrderItemID *OrderItemID `xml:"OrderItemID,omitempty"`

	OfferItemID *OfferItemID `xml:"OfferItemID,omitempty"`

	ServiceID []*ServiceID `xml:"ServiceID,omitempty"`

	BookingReference *BookingReference `xml:"BookingReference,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`
}

type CouponSoldAirlineType struct {
	DepartureDateTime *DepartureDateTime__1 `xml:"DepartureDateTime,omitempty"`

	ArrivalDateTime *ArrivalDateTime__1 `xml:"ArrivalDateTime,omitempty"`

	Stops *Stops__2 `xml:"Stops,omitempty"`

	// Information Source. Example: BA
	InfoSource *ContextSimpleType `xml:"InfoSource,omitempty"`

	// Tour Operator Flight ID.
	//
	// Note: This is an ID for the flight as represented by a Tour Operator. This flight is not necessarily in the inventory of an airline as it is a code created by tour operators.

	TourOperatorFlightID string `xml:"TourOperatorFlightID,omitempty"`

	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	OperatingCarrier *OperatingCarrier__3 `xml:"OperatingCarrier,omitempty"`

	// Marketing Carrier information.
	//
	// Notes: This is the carrier that sells with its own code as part of a code share agreement on a flight that is actually operated by another carrier.
	MarketingCarrier *MarketingCarrierFlightType `xml:"MarketingCarrier,omitempty"`

	Equipment *Equipment `xml:"Equipment,omitempty"`

	// Reservation Status Code.
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 4405 (Status, coded)
	Status *IATA_CodeType `xml:"Status,omitempty"`

	// Seat Number. Example: 112B
	//
	// Note: This is a seat assignment reserved for a confirmed flight at the time of ticket issuance.
	SeatNumber string `xml:"SeatNumber,omitempty"`

	// Baggage related disclosures to passengers as required by several governments.
	TicketedBaggageAllowance *AddlBaggageInfoType `xml:"TicketedBaggageAllowance,omitempty"`

	// Unique Metadata Collection Token.
	//
	// Example: jZhJu7SORZeO MNpifElIkA
	//
	// Note: This token pertains to all specified metadata information, e.g. the metadata collection.

	MetadataToken *DescriptionSimpleType `xml:"MetadataToken,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type CouponFlightSegmentType struct {

	// Information Source. Example: BA
	InfoSource *ContextSimpleType `xml:"InfoSource,omitempty"`

	DepartureDateTime *DepartureDateTime__2 `xml:"DepartureDateTime,omitempty"`

	// Tour Operator Flight ID.
	//
	// Note: This is an ID for the flight as represented by a Tour Operator. This flight is not necessarily in the inventory of an airline as it is a code created by tour operators.

	TourOperatorFlightID string `xml:"TourOperatorFlightID,omitempty"`

	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	OperatingCarrier *OperatingCarrier__4 `xml:"OperatingCarrier,omitempty"`

	// Marketing Carrier and Flight Number information.
	//
	// Notes: This is the carrier that sells with its own code as part of a code share agreement on a flight that is actually operated by another carrier.
	MarketingCarrier *MarketingCarrierFlightType `xml:"MarketingCarrier,omitempty"`

	Equipment *Equipment `xml:"Equipment,omitempty"`

	// Involuntary Change Transaction Code. Example: I (Involuntary - no reason given)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 1245 (Status indicator, coded)
	InvoluntaryIndicatorCode *IATA_CodeType `xml:"InvoluntaryIndicatorCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CouponTicketDocType struct {

	// Coupon Document Number.
	//
	// Note: This is the document number comprised of the airline code, form code, and serial number.

	TicketDocNbr string `xml:"TicketDocNbr,omitempty"`

	// Coupon Type. Example: Y (EMD-S Standalone)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 1001 (Document/ Message Name, coded)
	Type *IATA_CodeType `xml:"Type,omitempty"`

	// Connected Document Number.
	//
	// Note: This is a ticket/ document to which this document is connected.

	InConnectionDocNbr string `xml:"InConnectionDocNbr,omitempty"`

	// The number of booklets issued.
	NumberofBooklets int32 `xml:"NumberofBooklets,omitempty"`

	// Date of Issue. Example: 2017-01-13
	DateOfIssue string `xml:"DateOfIssue,omitempty"`

	// Time of Issue. Example: 14:32
	TimeOfIssue *TimeSimpleType `xml:"TimeOfIssue,omitempty"`

	// Airport or City Code. Example: JFK
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code
	TicketingLocation *AirportCitySimpleType `xml:"TicketingLocation,omitempty"`

	// Ticket Routing Code. Example: D
	//
	// Note: This is for EMD-A and EMD-S tickets with routing.
	// - Use D - if all board and off points are within the same country
	// - Use I - if all board and off points are  not within the same country
	// - For an EMD-S with no routing, do not use.

	RoutingDomIntCode *CodesetValueSimpleType `xml:"RoutingDomIntCode,omitempty"`

	// Airline Designator. Example: BA
	//
	// Note: This is the airline designator representing the carrier whose fee was used on the EMD coupons.
	FeeOwner *AirlineID_Type `xml:"FeeOwner,omitempty"`

	// Carry-on and checked baggage allowances.
	AddlBaggageInfo *AddlBaggageInfoType `xml:"AddlBaggageInfo,omitempty"`

	// Free text to provide further information related to the document and/or the coupon.
	Remark string `xml:"Remark,omitempty"`

	// Coupon information.
	CouponInfo []*CouponInfoType `xml:"CouponInfo,omitempty"`

	// Association to Penalty element in DataList. Example: PN1 PN2
	PenaltyReferences string `xml:"PenaltyReferences,omitempty"`

	// For billing and settlement purposes, each time a travel agent requests an airline to perform an action on a document (Issuance, Refund, Exchange), he needs to know how to reconciliate this action: via BSP, via ARC, directly done by the ORA, etc.

	ReportingType string `xml:"ReportingType,omitempty"`
}

type HistoryCouponInfoType struct {

	// Applicable coupon number. Example: 1234

	CouponNumber int32 `xml:"CouponNumber,omitempty"`

	// Current status of the flight/value coupon. Example: E (Exchanged/reissued)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 4405 (Status, coded)
	Status *IATA_CodeType `xml:"Status,omitempty"`

	// Previous status of the flight/value coupon. Example: E (Exchanged/reissued)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 4405 (Status, coded)
	PrevStatus *IATA_CodeType `xml:"PrevStatus,omitempty"`

	// Settlement Authorization Code. Example: AUTH123
	//
	// Note: This is a reference number generated by the validating carrier authorising settlement of a coupon.
	SettlementAuthCode *ContextSimpleType `xml:"SettlementAuthCode,omitempty"`

	// The timestamp of the transaction)
	TransactionTimeStamp string `xml:"TransactionTimeStamp,omitempty"`

	SoldAirlineInfo *SoldAirlineInfo__2 `xml:"SoldAirlineInfo,omitempty"`

	CurrentAirlineInfo *CurrentAirlineInfo `xml:"CurrentAirlineInfo,omitempty"`

	CheckedInAirlineInfo *CheckedInAirlineInfo `xml:"CheckedInAirlineInfo,omitempty"`

	Party *Party `xml:"Party,omitempty"`
}

type InConnectionWithType struct {

	// In Connection Document Number. Example: ???

	InConnectionDocNbr string `xml:"InConnectionDocNbr,omitempty"`

	// In Connection Document Number. Example: ???

	InConnectonCpnNbr int32 `xml:"InConnectonCpnNbr,omitempty"`

	// When true, the document and coupon should be associated.

	AssociateInd bool `xml:"AssociateInd,attr,omitempty"`
}

type OriginalIssueType struct {

	// Original Issuer ID. Example: 12345
	//
	// Note: This is the ID of the original issuer of the document.

	IssuingAgentID string `xml:"IssuingAgentID,omitempty"`

	// Issue Date. Example: 2017-01-13
	//
	// Note: This is the date the document was originally issued.
	DateOfIssue string `xml:"DateOfIssue,omitempty"`

	// Original Issue Location. Example: JFK
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code
	LocationCode *AirportCitySimpleType `xml:"LocationCode,omitempty"`

	// Original Ticket/ Document Number. Example: ???
	//
	// Note: This is the document number comprised of the airline code, form code, and serial number.

	TicketDocumentNbr string `xml:"TicketDocumentNbr,omitempty"`
}

type PricingInfoType struct {

	// Booked Itinerary Pricing Date. Example: 2017-01-13
	//
	// Note: This is the date the booked itinerary was priced.
	Date string `xml:"Date,omitempty"`

	// Booked Itinerary Pricing Time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	Time *TimeSimpleType `xml:"Time,omitempty"`

	// Pricing Location. Example: JFK
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code
	LocationCode *AirportCitySimpleType `xml:"LocationCode,omitempty"`

	CountryCode *CountryCode `xml:"CountryCode,omitempty"`
}

type TicketDocumentType struct {

	// The ticket/document number.
	TicketDocNbr string `xml:"TicketDocNbr,omitempty"`

	// The type of ticket/document.
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 1001 (Document/ Message Name, coded)
	Type *IATA_CodeType `xml:"Type,omitempty"`

	CpnNbrs *CpnNbrs__1 `xml:"CpnNbrs,omitempty"`
}

type TicketDocHistoryType struct {

	// Coupon Document Number.
	//
	// Note: This is the document number comprised of the airline code, form code, and serial number.

	TicketDocNbr string `xml:"TicketDocNbr,omitempty"`

	// Coupon Type. Example: Y (EMD-S Standalone)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 1001 (Document/ Message Name, coded)
	Type *IATA_CodeType `xml:"Type,omitempty"`

	// Coupon information.
	CouponInfo []*HistoryCouponInfoType `xml:"CouponInfo,omitempty"`
}

type BaseFareTransactionType struct {
	Amount *Amount__2 `xml:"Amount,omitempty"`

	// Total Fare Amount Type. Examples: ADC (Additional Charge); Bulk; IT (Tour Inclusive); NOADC (No Additional Charge)
	AmountType *FareAmountType `xml:"AmountType,omitempty"`

	// Base Fare Transaction Purpose. Example: Base, Equivalent
	//
	// Note: This is used to indicate if this is base or equivalent fare transaction information.
	Purpose *CouponPurposeListType `xml:"Purpose,omitempty"`
}

type EquivFareTransactionType struct {
	Amount *Amount__3 `xml:"Amount,omitempty"`

	// Equivalent Fare Transaction Purpose. Example: Base, Net, Refund, Sell
	//
	// Note: This is used to indicate if this is base or equivalent fare transaction information.
	Purpose *CouponPurposeListType `xml:"Purpose,omitempty"`

	// Conversion rate. Example: 1.25
	//
	// Note: This is the BSR and/ or BBR used to convert the tax/fee/charge filed amount from the filed currency into the tax/fee/charge amount in currency of country of payment.

	EquivRate float64 `xml:"EquivRate,attr,omitempty"`
}

type ET_FareInfoType struct {
	Waiver *Waiver__1 `xml:"Waiver,omitempty"`

	RuleInd *RuleInd__1 `xml:"RuleInd,omitempty"`

	Detail *Detail__2 `xml:"Detail,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TotalFareTransactionType struct {
	Amount *Amount__4 `xml:"Amount,omitempty"`

	// Total Fare Amount Type. Examples: ADC (Additional Charge); Bulk; IT (Tour Inclusive); NOADC (No Additional Charge)
	AmountType *FareAmountType `xml:"AmountType,omitempty"`

	// Total Fare Transaction Purpose. Example: Base, Net, Refund, Sell
	Purpose *CouponPurposeListType `xml:"Purpose,omitempty"`

	// Conversion rate. Example: 1.25
	//
	// Note: This is the BSR and/ or BBR used to convert the tax/fee/charge filed amount from the filed currency into the tax/fee/charge amount in currency of country of payment.

	EquivRate float64 `xml:"EquivRate,attr,omitempty"`

	// Reissue Sequence Number. Example: 2
	//
	// Note: This is the sequence number assigned to each transaction amount.

	ReissueSeqNbr string `xml:"ReissueSeqNbr,attr,omitempty"`
}

type UnstructuredFareCalcType struct {

	// Unstructured Fare Calculation Purpose. Example: Base, Net, Refund, Sell
	//
	// Note: This is used to indicate if this is base or equivalent fare transaction information.
	Purpose *CouponPurposeListType `xml:"Purpose,omitempty"`

	// Pricing Code.
	//
	// Note: This is the primary identifier reflecting the method of pricing for this transaction.

	PricingCode string `xml:"PricingCode,omitempty"`

	// Reporting Code.
	//
	// Note: This is a secondary identifier reflecting the method of pricing for this transaction used in the reporting process.

	ReportingCode string `xml:"ReportingCode,omitempty"`

	// Fare Calculation.
	//
	// Note: This is the fare calculation area that is required for ET.

	Info string `xml:"Info,omitempty"`
}

type AcceptedPaymentFormType struct {

	// The form of payment type. Examples: Credit Card, Cash.
	//
	// Encoding Scheme: IATA PADIS code list data element [9888] Form of Payment Identification
	Type *IATA_CodeType `xml:"Type,omitempty"`

	// The amount for this form of payment. Example: 300 USD
	Amount *SimpleCurrencyPriceType `xml:"Amount,omitempty"`

	// Used to specify if this is the old, new or orginal form of payment.
	//
	// Encoding Scheme: IATA  PADIS code list [9988] Data Indicator
	Qualifier *IATA_CodeType `xml:"Qualifier,omitempty"`

	Voucher *Voucher `xml:"Voucher,omitempty"`

	PaymentCard *PaymentCard `xml:"PaymentCard,omitempty"`

	Other *Other `xml:"Other,omitempty"`

	MiscChargeOrder *MiscChargeOrder `xml:"MiscChargeOrder,omitempty"`

	LoyaltyRedemption *LoyaltyRedemption `xml:"LoyaltyRedemption,omitempty"`

	DirectBill *DirectBill `xml:"DirectBill,omitempty"`

	Cash *Cash `xml:"Cash,omitempty"`

	BankAccount *BankAccount `xml:"BankAccount,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OrderPaymentFormType struct {

	// The form of payment type. Examples: Credit Card, Cash.
	//
	// Encoding Scheme: IATA PADIS code list data element [9888] Form of Payment Identification
	Type *IATA_CodeType `xml:"Type,omitempty"`

	Method *Method__2 `xml:"Method,omitempty"`

	// The amount for this form of payment. Example: 300 USD
	//
	Amount *SimpleCurrencyPriceType `xml:"Amount,omitempty"`

	Payer *Payer__2 `xml:"Payer,omitempty"`
}

type PaymentMethodType struct {
	Method []*Method__3 `xml:"Method,omitempty"`
}

type OrderPaymentMethodType struct {

	//
	// The form of payment type. Examples: Credit Card, Cash. Encoding Scheme: IATA PADIS code list data element [9888] Form of Payment Identification
	//
	Type *IATA_CodeType `xml:"Type,omitempty"`

	Method *Method__4 `xml:"Method,omitempty"`

	//
	// The amount for this form of payment. Example: 300 USD
	//
	Amount *SimpleCurrencyPriceType `xml:"Amount,omitempty"`

	//
	// Used to specify if this is the old, new, or orginal form of payment. Encoding Scheme: IATA PADIS code list 9988 - Data Indicator
	//
	Qualifier *IATA_CodeType `xml:"Qualifier,omitempty"`

	Promotions *Promotions__2 `xml:"Promotions,omitempty"`

	Associations *Associations__1 `xml:"Associations,omitempty"`

	Description *Description `xml:"Description,omitempty"`

	// When true, this is a split form of payment.

	SplitFormInd bool `xml:"SplitFormInd,attr,omitempty"`
}

type PriceClassType struct {

	// Price class name. Example: SUPERSAVER
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Price class code. Example: 1, ABC
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	FareBasisCode *FareBasisCode `xml:"FareBasisCode,omitempty"`

	ClassOfService []*ClassOfService `xml:"ClassOfService,omitempty"`

	// The Airline requested default display order (in a client application) for this price class. Example: 2
	DisplayOrder *CodesetValueSimpleType `xml:"DisplayOrder,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	PriceClassID string `xml:"PriceClassID,attr,omitempty"`
}

type SeatCoreType struct {

	// Seat Location information.
	Location *SeatLocationType `xml:"Location,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SeatDetailType struct {
	*SeatCoreType

	// Seat Details, including Marketing Name, Description(s), Feature(s), Size and Keywords.
	Details *SeatCharacteristicType `xml:"Details,omitempty"`
}

type SeatLocationType struct {

	// Seat column. Example: A

	Column string `xml:"Column,omitempty"`

	Row *Row__1 `xml:"Row,omitempty"`

	Characteristics *Characteristics__1 `xml:"Characteristics,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`
}

type SeatCharacteristicType struct {
}

type CabinCameraPosType struct {
	Row *Row__2 `xml:"Row,omitempty"`

	Column *Column__1 `xml:"Column,omitempty"`
}

type SeatDataType struct {
	Marketing *Marketing__1 `xml:"Marketing,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`
}

type SeatMapMessageType struct {
	Images []*Images__1 `xml:"Images,omitempty"`

	Links []*Links__2 `xml:"Links,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SeatMapRowNbrType struct {
	Value AirRowNbrSimpleType `xml:",chardata"`
}

type SecurityType struct {

	// Agent duty code
	DutyCode string `xml:"DutyCode,omitempty"`

	// Agency IATA number
	IATA string `xml:"IATA,omitempty"`

	PseudoCityCode *PseudoCityCode__1 `xml:"PseudoCityCode,omitempty"`

	// LNIATA Number – CRT Address/Terminal ID
	LNIATA string `xml:"LNIATA,omitempty"`

	// ERSP Number: The eight digit IATA
	// assigned ERSP code.
	ERSP string `xml:"ERSP,omitempty"`

	// Department/Identifier
	Department string `xml:"Department,omitempty"`

	// Carrier/GDS Department Code
	DepartmentCode string `xml:"DepartmentCode,omitempty"`

	// Airline specific codes applicable for the Services record owner or the carrier specified in bytes 23-25, defined as follows:
	// Code Definition
	// RES = all reservation centers
	// ATO = all airline ticket offices
	// CTO = all city ticket offices
	// WEB = website

	AirlineSpecificCodes string `xml:"AirlineSpecificCodes,omitempty"`
}

type ServiceAssocType struct {
	Passenger *Passenger__1 `xml:"Passenger,omitempty"`

	Flight *Flight__4 `xml:"Flight,omitempty"`

	Offer *Offer__1 `xml:"Offer,omitempty"`

	// Other association(s).
	OtherAssociations *ServiceOtherAssocType `xml:"OtherAssociations,omitempty"`

	SeatReference *SeatReference `xml:"SeatReference,omitempty"`
}

type ServiceOtherAssocType struct {
	OtherAssociation []*OtherAssociation__4 `xml:"OtherAssociation,omitempty"`
}

type ServiceCoreType struct {
	ServiceID *ServiceID `xml:"ServiceID,omitempty"`

	Name *Name__7 `xml:"Name,omitempty"`

	// Service Codes and Reason for Issuance.
	Encoding *ServiceEncodingType `xml:"Encoding,omitempty"`

	TimeLimits *TimeLimits `xml:"TimeLimits,omitempty"`

	FeeMethod *FeeMethod__1 `xml:"FeeMethod,omitempty"`

	// SERVICE Description.
	//
	// Note: Supports plain text, multimedia and code and link references.
	Descriptions *ServiceDescriptionType `xml:"Descriptions,omitempty"`

	Settlement *Settlement__2 `xml:"Settlement,omitempty"`

	// Optional SERVICE PRICE.
	//
	// Notes: This Price amount may be set to zero if pricing has been applied at the Offer Item level.
	Price []*ServicePriceType `xml:"Price,omitempty"`

	BookingInstructions *BookingInstructions__1 `xml:"BookingInstructions,omitempty"`

	// Validating Carrier Airline Designator.
	// A two-character alpha-numeric code assigned according to the IATA Resolution 762 or a three-letter airline designator assigned by ICAO.  Refer to IATA Airline Coding Directory .  Example: BA
	ValidatingCarrier string `xml:"ValidatingCarrier,omitempty"`

	Associations []*Associations__2 `xml:"Associations,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	// In concert with BaggageDeterminingCarrier data field, specifies the reason for the carrier code.
	//
	// Encoding Scheme: IATA PADIS Code List for data element RES.
	BDC_AnalysisResult *IATA_CodeType `xml:"BDC_AnalysisResult,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ServiceDetailType struct {
	*ServiceCoreType

	Detail *Detail__3 `xml:"Detail,omitempty"`
}

type ServiceQualifierPriceType struct {

	// Service Codes and Reason for Issuance.
	Encoding *ServiceEncodingType `xml:"Encoding,omitempty"`

	Fulfillment *Fulfillment__1 `xml:"Fulfillment,omitempty"`

	Associations *Associations__3 `xml:"Associations,omitempty"`

	// Exclude=false , Include=true, Default value is true
	Include bool `xml:"Include,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ServiceEncodingType struct {
	RFIC *RFIC `xml:"RFIC,omitempty"`

	// Indicator if this option is a discount or a surcharge or a fee formula calculation. Refer to PADIS Codeset SFB for Service Fee Basis
	Type *IATA_CodeType `xml:"Type,omitempty"`

	Code *Code__4 `xml:"Code,omitempty"`

	SubCode *SubCode__1 `xml:"SubCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ServiceDescriptionType struct {
	Description []*Description__2 `xml:"Description,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ServiceFilterType struct {
	GroupCode *GroupCode__1 `xml:"GroupCode,omitempty"`

	SubGroupCode []*SubGroupCode__1 `xml:"SubGroupCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ServiceFulfillmentType struct {
	OfferValidDates *OfferValidDates__1 `xml:"OfferValidDates,omitempty"`

	// Information about the company or party that will fulfill the service.
	Provider *FulfillmentPartnerType `xml:"Provider,omitempty"`

	Location *Location__2 `xml:"Location,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SrvcLocationAirportType struct {
	AirportCode *AirportCode `xml:"AirportCode,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SrvcLocationAddressType struct {
	Address *Address `xml:"Address,omitempty"`
}

type ServicePriceType struct {

	// Total price. Example: 6000 USD
	//
	// Note: This is the total price INCLUDING base price, taxes and fees/ surcharges.
	Total *CurrencyAmountOptType `xml:"Total,omitempty"`

	RefundableValue *RefundableValue__1 `xml:"RefundableValue,omitempty"`

	Details *Details__4 `xml:"Details,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	// Individual fee/ surcharge information would appear on the accountable document.
	Fees *FeeSurchargeType `xml:"Fees,omitempty"`

	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ServiceCombinationType struct {
	Combination []*Combination__1 `xml:"Combination,omitempty"`
}

type ServiceCouponType struct {

	// Instant purchase type.
	// Examples:
	// CC (Ticketless purchase immediately charged to credit card)
	// NO (Not an instant purchase)
	// TT (Simultaneous with time of ticketing)
	//
	// Encoding scheme: IATA PADIS Codeset IPT - Instant Purchase Type
	InstantPurchase *IATA_CodeType `xml:"InstantPurchase,omitempty"`

	// Service fee basis.
	// Examples:
	// DIS (Option directly applied to fare)
	// FEE (Baggage only)
	// FNA (Item is not available/ applicable)
	// INC (Item is free of charge)
	// NAP (Item not applicable/ available)
	// SUR (Surcharge)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element SFB - Service Fee Basis
	FeeBasis *IATA_CodeType `xml:"FeeBasis,omitempty"`

	CouponType *CouponType__1 `xml:"CouponType,omitempty"`
}

type ServiceItemQuantityType struct {

	// The MINIMUM Quantity of the Service Item that may be ordered.
	// Example: 2
	MinimumQuantity int32 `xml:"MinimumQuantity,omitempty"`

	// The MAXIMUM Quantity of the Service Item that may be ordered.
	// Example: 4
	MaximumQuantity int32 `xml:"MaximumQuantity,omitempty"`
}

type ServiceID_Type struct {
	Value UniqueStringID_SimpleType `xml:",chardata"`

	// Airline designator or CRS code of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline or CRS Designator Code

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type FltDepartQualifiedQueryType struct {
	LocationCode []*LocationCode__1 `xml:"LocationCode,omitempty"`

	// Departure date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`

	// Departure time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	Time *TimeSimpleType `xml:"Time,omitempty"`

	LeadPricing *LeadPricing__1 `xml:"LeadPricing,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FltArriveQualifiedQueryType struct {
	LocationCode []*LocationCode__2 `xml:"LocationCode,omitempty"`

	// Arrival (destination) date.  Example: 2017-02-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`

	// Arrival (destination) time.  Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	Time *TimeSimpleType `xml:"Time,omitempty"`

	LeadPricing *LeadPricing__2 `xml:"LeadPricing,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AffinityStateProvDepartType struct {

	// State or Province Departure (origin) information.
	Departure *StateProvQueryType `xml:"Departure,omitempty"`
}

type AffinityStateProvArriveType struct {

	// State or Province Arrival (destination) information.
	Arrival *StateProvQueryType `xml:"Arrival,omitempty"`
}

type AffinityCountryDepartType struct {

	// Country Departure (Origin)  information.
	Departure *CountryQueryType `xml:"Departure,omitempty"`
}

type AffinityCountryArriveType struct {

	// Country Arrival (Destination) information.
	Arrival *CountryQueryType `xml:"Arrival,omitempty"`
}

type AffinityReferencePointDepartType struct {

	// Reference Point Departure (Origin)  information.
	Departure *ReferencePointQueryType `xml:"Departure,omitempty"`
}

type AffinityReferencePointArriveType struct {

	// Reference Point Arrival (Destination) information.
	Arrival *ReferencePointQueryType `xml:"Arrival,omitempty"`
}

type ReferencePointQueryType struct {
	ReferencePoints *ReferencePoints__1 `xml:"ReferencePoints,omitempty"`

	Proximity []*Proximity__1 `xml:"Proximity,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type LeadDatePeriodType struct {

	// The period duration to be applied BEFORE (prior to) the specified date.  Examples:
	// P3D (three days)
	// P7D (seven days)

	Before string `xml:"Before,attr,omitempty"`

	// The period duration to be applied AFTER the specified date.  Examples:
	// P3D (three days)
	// P7D (seven days)

	After string `xml:"After,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type LeadTimePeriodType struct {

	// The period duration to be applied BEFORE (prior to) the specified time.  Examples:
	// P3D (three days)
	// PT2H (two hours)

	Before string `xml:"Before,attr,omitempty"`

	// The period duration to be applied AFTER the specified time.  Examples:
	// P3D (three days)
	// PT2H (two hours)

	After string `xml:"After,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type DiscountProgramType struct {
	Account *Account__3 `xml:"Account,omitempty"`

	AssocCode *AssocCode__1 `xml:"AssocCode,omitempty"`

	Name *Name__8 `xml:"Name,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type IncentiveProgramType struct {

	// Incentive program name.
	// Example: RFSB (Reward for small businesses)
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	AccountID *AccountID__1 `xml:"AccountID,omitempty"`

	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	MemberStatus *MemberStatus__1 `xml:"MemberStatus,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CardQualifierType struct {

	// The two letter payment card type. Examples: MC, VI

	Type string `xml:"Type,omitempty"`

	// Payment card IIN/ BIN number. Example: 401123
	//
	// Note: This is the first 6 digits of a credit card number known as the Issuer Identification Number (IIN), previously known as bank identification number (BIN), that identifies the institution that issued the card to the card holder.

	IIN_Number string `xml:"IIN_Number,omitempty"`

	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	CurrCode *CurrCode `xml:"CurrCode,omitempty"`

	// If True, the amount value represents a percentage.

	IsPercentInd bool `xml:"IsPercentInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SocialMediaQualifierType struct {
	Service *Service__1 `xml:"Service,omitempty"`

	User *User__1 `xml:"User,omitempty"`

	EmailAddress *EmailAddress__1 `xml:"EmailAddress,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type StayPeriodDateRangeType struct {

	// Starting Date of the stay period range. Example: 2016-01-13
	StartDate string `xml:"StartDate,omitempty"`

	// Ending Date of the stay period range. Example: 2016-03-13
	EndDate string `xml:"EndDate,omitempty"`

	// Minimum Stay Period within the specified date range.
	// Examples: P5D (five days)
	MinimumStay string `xml:"MinimumStay,omitempty"`

	// Maximum Stay Period within the specified date range.
	// Example: P10D (ten days)
	MaximumStay string `xml:"MaximumStay,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type StayPeriodSeasonType struct {

	// Minimum Stay Period within the specified calendar season.
	// Examples: P5D (five days)
	MinimumStay string `xml:"MinimumStay,omitempty"`

	// Maximum Stay Period within the specified calendar season.
	// Example: P10D (ten days)
	MaximumStay string `xml:"MaximumStay,omitempty"`

	Month *Month `xml:"Month,omitempty"`

	QuarterPeriod *QuarterPeriod `xml:"QuarterPeriod,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type GroupBudgetType struct {
	Amount *Amount__5 `xml:"Amount,omitempty"`
}

type PersonBudgetType struct {
	Amount *Amount__6 `xml:"Amount,omitempty"`
}

type BaggagePricingQualifierType struct {

	// Qualifier to specific the type of Baggage pricing.
	// Example: Checked Bag
	//
	// Encoding Scheme: IATA PADIS Code List for data element OPT.
	BaggageOption []*IATA_CodeType `xml:"BaggageOption,omitempty"`

	// Request action. Example: 131 (DISPLAY ONLY)
	//
	// Encoding Scheme: IATA PADIS Code List for data element 1225
	RequestAction *IATA_CodeType `xml:"RequestAction,omitempty"`

	// Allowance catalog requested. Example: C (CATALOG ONLY)
	OptionalCharges *CodesetValueSimpleType `xml:"OptionalCharges,omitempty"`

	// Allows POA to tell the ORA if the ORA may alter the POA’s pre-paid baggage charges
	//
	// If True: prepaid charge may NOT be altered
	// If False: prepaid charge MAY be altered

	FixedPrePaidInd bool `xml:"FixedPrePaidInd,attr,omitempty"`

	// Bi-lateral agreement identifier, i.e. - baggage cost, Baggage Determining Carrier, etc.

	CommercialAgreementID string `xml:"CommercialAgreementID,attr,omitempty"`

	// If True, The ORA advises the POA that the POA is given the Baggage Determining Carrier designation.

	DeferralInd bool `xml:"DeferralInd,attr,omitempty"`

	// If True, POA is requested to return the settlement value for the baggage.

	IncludeSettlementInd bool `xml:"IncludeSettlementInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FareQualifierType struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	CompanyIndex *CompanyIndex__2 `xml:"CompanyIndex,omitempty"`

	Contract *Contract__2 `xml:"Contract,omitempty"`

	Account *Account__4 `xml:"Account,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ProgramQualifierType struct {
	DiscountProgramQualifier *DiscountProgramQualifier `xml:"DiscountProgramQualifier,omitempty"`

	IncentiveProgramQualifier *IncentiveProgramQualifier `xml:"IncentiveProgramQualifier,omitempty"`

	PrePaidProgramQualifier *PrePaidProgramQualifier `xml:"PrePaidProgramQualifier,omitempty"`

	ProgramStatusQualifier *ProgramStatusQualifier `xml:"ProgramStatusQualifier,omitempty"`
}

type PromoQualifierType struct {
	*PromotionType
}

type QualifiersType struct {
	Qualifier []*Qualifier__1 `xml:"Qualifier,omitempty"`
}

type SocialQualiferType struct {
	*SocialMediaQualifierType
}

type SpecialQualiferType struct {
	*SpecialType
}

type AirlinePreferencesType struct {
	Airline []*Airline__2 `xml:"Airline,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AlliancePreferencesType struct {
	Alliance []*Alliance__1 `xml:"Alliance,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BestPricingPreferencesType struct {

	// Best Available Fare Pricing Method.
	// Examples:
	// Y (BEST FARE IN SAME CABIN CLASS)
	// C (BEST FARE ACROSS ALL CABIN CLASSES)
	// N (PRICE ACCORDINGLY TO OTHER DESIGNATED PRICING PARAMETERS)

	BestPricingOption string `xml:"BestPricingOption,omitempty"`
}

type CabinPreferencesType struct {
	CabinType []*CabinType `xml:"CabinType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FarePreferencesType struct {
	Types *Types__1 `xml:"Types,omitempty"`

	FareCodes *FareCodes__1 `xml:"FareCodes,omitempty"`

	TicketDesigs *TicketDesigs__1 `xml:"TicketDesigs,omitempty"`

	Exclusion *Exclusion__1 `xml:"Exclusion,omitempty"`

	// Group Fare preferences by passenger type.
	GroupFare *GroupFarePreferencesType `xml:"GroupFare,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightPreferencesType struct {
	Aircraft *Aircraft__1 `xml:"Aircraft,omitempty"`

	Characteristic *Characteristic__1 `xml:"Characteristic,omitempty"`

	WaitListing *WaitListing__1 `xml:"WaitListing,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FltSegmentMaxTimePreferencesType struct {
	MaxFlightTime *MaxFlightTime__1 `xml:"MaxFlightTime,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type GroupFarePreferencesType struct {
	GroupFare []*GroupFare__1 `xml:"GroupFare,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TravelDistancePreferencesType struct {

	// Travel Distance (unit) Value.  Example: 20

	DistanceAmount float64 `xml:"DistanceAmount,omitempty"`

	// Travel distance application.
	// Examples: TotalJourneyDistance, MaximumTravelDistance
	Application *ProperNameSimpleType `xml:"Application,omitempty"`

	// Distance unit of measure.  Example: Kilometers, Miles, Other
	UOM *DistanceUnitSimpleType `xml:"UOM,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TravelTimePreferencesType struct {

	// Travel Distance (unit) Value.  Example: 20

	TimeAmount float64 `xml:"TimeAmount,omitempty"`

	// Travel time application.
	// Examples: TotalJourneyTime, MaximumTravelTime
	Application *ProperNameSimpleType `xml:"Application,omitempty"`

	// Travel time unit of measure. Example: Minutes, Hours, days

	UOM string `xml:"UOM,attr,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TransferPreferencesType struct {
	Connection *Connection__1 `xml:"Connection,omitempty"`

	Pricing *Pricing__1 `xml:"Pricing,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SuccessType struct {
}

type WarningsType struct {

	// Used in conjunction with the Success element to define a business error.
	Warning *WarningType `xml:"Warning,omitempty"`
}

type WarningType struct {
	Value FreeTextType `xml:",chardata"`

	// The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type ="Unknown".

	Type *IATA_CodeType `xml:"Type,attr,omitempty"`

	// An error in textual format.

	ShortText *StringLength1to255 `xml:"ShortText,attr,omitempty"`

	// If present, this refers to a table of coded values exchanged between applications to identify errors or warnings. Refer to IATA PADIS Code List data element 9321.

	Code *IATA_CodeType `xml:"Code,attr,omitempty"`

	// If present, this URL refers to an online description of the error that occurred.

	DocURL string `xml:"DocURL,attr,omitempty"`

	// If present, recommended values are those enumerated in the IATA_ErrorRS, (NotProcessed | Incomplete | Complete | Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.

	Status *StringLength1to64 `xml:"Status,attr,omitempty"`

	// If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].

	Tag string `xml:"Tag,attr,omitempty"`

	// If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records.

	RecordID *StringLength1to32 `xml:"RecordID,attr,omitempty"`

	// Used to specify the owner of the error/warning codelist.

	Owner *StringLength1to32 `xml:"Owner,attr,omitempty"`
}

type TaxCouponInfoType struct {
	TicketDocument *TicketDocument__1 `xml:"TicketDocument,omitempty"`

	// The date of birth of the passenger.

	BirthDate string `xml:"BirthDate,attr,omitempty"`

	// The airport/city code which has been assumed to be the journey turnaround point in the construction of the itinerary by the pricing system.

	JourneyTurnaroundCityCode *StringLength1to8 `xml:"JourneyTurnaroundCityCode,attr,omitempty"`
}

type ReissuedFlownType struct {
	FlightCouponData *FlightCouponData__1 `xml:"FlightCouponData,omitempty"`

	// Coupon number.

	Number *Numeric1to4 `xml:"Number,attr,omitempty"`

	// The number representing the order in which this coupon was used or is to be used.

	CouponItinerarySeqNbr *Numeric0to99 `xml:"CouponItinerarySeqNbr,attr,omitempty"`

	// The applicable fare basis code.

	FareBasisCode *StringLength1to16 `xml:"FareBasisCode,attr,omitempty"`

	// Document number comprised of the airline code, form code, and serial number.

	TicketDocumentNbr *StringLength1to16 `xml:"TicketDocumentNbr,attr,omitempty"`

	// The date the ticket was issued.

	DateOfIssue string `xml:"DateOfIssue,attr,omitempty"`

	// A validating carrier assigned code allowing a fare rule modification or override applied to a flown coupon from the ticket being reissued.

	WaiverCode *AlphaNumericStringLength1to19 `xml:"WaiverCode,attr,omitempty"`

	// The applicable code as provided for in ATA SIPP Reso 110.16 or IATA Reso 728, for each flown coupon from the ticket being reissued.

	TicketDesignatorCode *StringLength1to16 `xml:"TicketDesignatorCode,attr,omitempty"`
}

type GeographicSpecificationType struct {
	GeoSpecCode []*GeoSpecCode `xml:"GeoSpecCode,omitempty"`

	Coordinates *Coordinates__1 `xml:"Coordinates,omitempty"`
}

type NonGeographicSpecificationType struct {

	// Indicates whether a system may or may not send NDC requests based on whether the request is coming from a travel agency.
	TravelAgencyInd bool `xml:"TravelAgencyInd,omitempty"`

	AggregatorID *AggregatorID `xml:"AggregatorID,omitempty"`

	PointOfSaleCode []*PointOfSaleCode__1 `xml:"PointOfSaleCode,omitempty"`
}

type OfferGeographicSpecificationType struct {

	// 1 = From LOC 1 to LOC 2   2 = To LOC 1 from LOC 2    3 = Both

	DirectionalIndicator string `xml:"DirectionalIndicator,omitempty"`

	// Identifies the Offer Origin Point.
	OfferOriginPoint *GeographicSpecificationType `xml:"OfferOriginPoint,omitempty"`

	// Identifies the Offer Destination Point.
	OfferDestinationPoint *GeographicSpecificationType `xml:"OfferDestinationPoint,omitempty"`

	// Specifies that all travel on the itinerary must be wholly within the specified location.
	TravelWithin *GeographicSpecificationType `xml:"TravelWithin,omitempty"`
}

type ProfileOwnerType struct {
	Value AirlineDesigSimpleType `xml:",chardata"`
}

type BaggageDeterminingCarrierType struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	// Airline Name.  Example: British Airways
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// US Department of Transportation (DOT) Reservation or Disclosure baggage rule.
	// Examples: Y, Disclosure AND US DOT Reservation
	BagRule *BagDiscloseRuleSimpleType `xml:"BagRule,omitempty"`

	// In concert with BaggageDeterminingCarrier data field, specifies the reason for the carrier code in the AirlineID element.
	//
	// Encoding Scheme: IATA PADIS Code List for data element RES.
	//
	BDC_AnalysisResult *IATA_CodeType `xml:"BDC_AnalysisResult,omitempty"`

	// Enumeration of why this carrier is the BDC.
	// 1. Regulatory [Application of regulation or Resolution]
	// 2. Deferral [Example: Deferral by ORA]
	// 3. Bilateral [Bilateral agreement]
	//

	BDC_Reason string `xml:"BDC_Reason,attr,omitempty"`
}

type SettlementType struct {
	Surcharges *Surcharges__3 `xml:"Surcharges,omitempty"`

	Fees *Fees__3 `xml:"Fees,omitempty"`
}

type TicketIdentificationType struct {
	Owner *Owner__1 `xml:"Owner,omitempty"`

	Security *Security `xml:"Security,omitempty"`

	// Date in ISO 8601 format (yyyy-mm-dd).  Example: 2001-12-25
	TicketIssueDate string `xml:"TicketIssueDate,omitempty"`

	// Time in ISO 8601 format (hh:mm).  Example: 14:00
	TicketIssueTime string `xml:"TicketIssueTime,omitempty"`

	// Identifies location where ticket was issued. Normally a 3-letter airport/city code.

	TicketIssuePlace string `xml:"TicketIssuePlace,omitempty"`

	// Identifies country where ticket was issued by a two letter country code.
	// Example: CA

	TicketIssueCountry string `xml:"TicketIssueCountry,omitempty"`

	// Ticket or EMD Number
	DocumentNumber string `xml:"DocumentNumber,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type RequestedServiceType struct {

	// Id to defined a selected ServiceDefinition from the selected bundle.
	ServiceDefinitionID string `xml:"ServiceDefinitionID,omitempty"`

	// Reference to the Service Definition selected by the passenger
	SelectedService []*RequestedServiceType `xml:"SelectedService,omitempty"`
}

type NameChangeOfferItemType struct {
	TotalPriceDetail *TotalPriceDetail__1 `xml:"TotalPriceDetail,omitempty"`

	Service *Service__2 `xml:"Service,omitempty"`

	// Unique identifier for this OfferItem instance. Must be unique within XML message. Exceeding 64 characters or use of dashes is not recommended.

	OfferItemID string `xml:"OfferItemID,attr,omitempty"`

	// If set to 'true', indicates mandatory Offer Items which cannot be removed from the Offer. Mandatory Offer Items transition into Order Items. If not present or 'false', the Offer item is optional. The aggregate price at the Offer level initially reflects the sum of the prices for all Mandatory Offer Items within it.

	MandatoryInd bool `xml:"MandatoryInd,attr,omitempty"`

	// POA to ORA only: to indicate that the offer is non-modifiable. This indicates to ORA that its offer is non-modifiable (eg. Regulatory or brand protection reasons). If indicator is set to true, nodifications to the POA’s offer ARE NOT allowed.

	ModificationProhibitedInd bool `xml:"ModificationProhibitedInd,attr,omitempty"`
}

type OrderRequestType struct {
	Offer []*Offer__2 `xml:"Offer,omitempty"`

	// Used for selling by value (long sells) rather than selling by reference.
	OrderItem []*OrderOfferItemType `xml:"OrderItem,omitempty"`
}

type ServiceDefinitionType struct {
	Name *Name__9 `xml:"Name,omitempty"`

	// Service Codes and Reason for Issuance.
	Encoding *ServiceEncodingType `xml:"Encoding,omitempty"`

	TimeLimits *TimeLimits `xml:"TimeLimits,omitempty"`

	FeeMethod *FeeMethod__2 `xml:"FeeMethod,omitempty"`

	// SERVICE Description.
	//
	// Note: Supports plain text, multimedia and code and link references.
	Descriptions *ServiceDescriptionType `xml:"Descriptions,omitempty"`

	Settlement *Settlement__3 `xml:"Settlement,omitempty"`

	BookingInstructions *BookingInstructions__2 `xml:"BookingInstructions,omitempty"`

	// Validating Carrier Airline Designator.
	// A two-character alpha-numeric code assigned according to the IATA Resolution 762 or a three-letter airline designator assigned by ICAO.  Refer to IATA Airline Coding Directory .  Example: BA
	ValidatingCarrier string `xml:"ValidatingCarrier,omitempty"`

	Detail *Detail__4 `xml:"Detail,omitempty"`

	BaggageAllowanceRef string `xml:"BaggageAllowanceRef,omitempty"`

	// Reference to Seats within SeatList to further define the characteristics of the seat product. In a shopping scenario, reference one instance of a seat, for further description. May be used in SeatAvailability messages to reference multiple seats to reflect availability of physical seats of this product type.
	SeatDefinitionRefs string `xml:"SeatDefinitionRefs,omitempty"`

	ServiceBundle *ServiceBundle__2 `xml:"ServiceBundle,omitempty"`

	// "A unique Service ID that has been returned in the Shopping results, and identifies an airline service item (ie a product or a service) that can be separately delivered and uniquely described by an airline.
	//
	// Example: SRVC-2B88-4C33-9787-9461114BC9BE"

	ServiceDefinitionID string `xml:"ServiceDefinitionID,attr,omitempty"`

	// Airline designator or CRS code of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline or CRS Designator Code

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`
}

type ALaCarteOfferItemType struct {
	Eligibility *Eligibility__1 `xml:"Eligibility,omitempty"`

	UnitPriceDetail *UnitPriceDetail__1 `xml:"UnitPriceDetail,omitempty"`

	Service *Service__3 `xml:"Service,omitempty"`

	// Unique identifier for this OfferItem instance. Must be unique within XML message. Exceeding 64 characters or use of dashes is not recommended.

	OfferItemID string `xml:"OfferItemID,attr,omitempty"`
}

type OfferItemType struct {
	TotalPriceDetail *TotalPriceDetail__2 `xml:"TotalPriceDetail,omitempty"`

	Service []*Service__4 `xml:"Service,omitempty"`

	// Fare Detail, including Fare Component and Fare Rules.
	FareDetail []*FareDetailType `xml:"FareDetail,omitempty"`

	// Unique identifier for this OfferItem instance. Must be unique within XML message. Exceeding 64 characters or use of dashes is not recommended.

	OfferItemID string `xml:"OfferItemID,attr,omitempty"`

	// If set to 'true', indicates mandatory Offer Items which cannot be removed from the Offer. Mandatory Offer Items transition into Order Items. If not present or 'false', the Offer item is optional. The aggregate price at the Offer level initially reflects the sum of the prices for all Mandatory Offer Items within it.

	MandatoryInd bool `xml:"MandatoryInd,attr,omitempty"`

	// POA to ORA only: to indicate that the offer is non-modifiable. This indicates to ORA that its offer is non-modifiable (eg. Regulatory or brand protection reasons). If indicator is set to true, nodifications to the POA’s offer ARE NOT allowed.

	ModificationProhibitedInd bool `xml:"ModificationProhibitedInd,attr,omitempty"`
}

// A code is a character string of letters, numbers, special characters (except escape sequences), and symbols. It represents a definitive
// value, a method, or a property description in an abbreviated or language-independent form that is part of a finite list of allowed values.

type AirlineDesignatorCodeType string

// Specifies the content value(s) for the alliance code BDT based on PADIS Code List.

type AllianceCodeContentType string

// Additional BDT to specify alliance codes.

type AllianceCodeType AllianceCodeContentType

// Text is a character string such as a finite set of characters generally in the form of words of a language.

type CodesetValueTextType string

// A code is a character string of letters, numbers, special characters (except escape sequences), and symbols. It represents a definitive
// value, a method, or a property description in an abbreviated or language-independent form that is part of a finite list of allowed values.

type CountryDialiingCodeType string

// A code is a character string of letters, numbers, special characters (except escape sequences), and symbols. It represents a definitive
// value, a method, or a property description in an abbreviated or language-independent form that is part of a finite list of allowed values.

type CreditCardVendorCodeType string

// A date is a Gregorian calendar representation in various common resolutions: year, month, week, day.

type DateType string

// Specifies the content value(s) for the gender code BDT.

type GenderCodeContentType string

const (
	GenderCodeContentTypeFemale GenderCodeContentType = "Female"

	GenderCodeContentTypeMale GenderCodeContentType = "Male"

	GenderCodeContentTypeUnspecified GenderCodeContentType = "Unspecified"
)

// Additional BDT to specify Gender code list.

type GenderCodeType GenderCodeContentType

// A code is a character string of letters. It represents the type a passenger like ADT(Adult).

type PassengerTypeCodeType string

// A code is a character string of letters, numbers, special characters (except escape sequences), and symbols. It represents a definitive
// value, a method, or a property description in an abbreviated or language-independent form that is part of a finite list of allowed values.

type IdentityDocumentTypeCodeType string

// An indicator is a list of two mutually exclusive Boolean values that express the only possible states of a property.

type IndicatorType bool

// A code is a character string of latters , number, special characters (except escape sequences) , and symbols. It represents a definitive value, a method or a property description in an abbreviated or language-independent form that is part of a finite list of allowed values.

type ISO_3166CountryCodeType ISO_3166CountryCodeContentType

// 2 character country code as defined in ISO3166

type ISO_3166CountryCodeContentType string

// A mathematical number that is assigned or is determined by calculation.

type NumberType float64

// A name is a word or a phrase that constitutes a distinctive designation of a person, place, thing or concept.

type ProperNameType string

// An ordinal number is an assigned mathematical number that represents order or sequence.

type OrdinalType int32

// A short name is a word or a phrase that constitutes a distinctive designation of a person, place, thing or concept.

type ShortNameType string

// A code is a character string of letters, numbers, special characters (except escape sequences), and symbols. It represents a definitive
// value, a method, or a property description in an abbreviated or language-independent form that is part of a finite list of allowed values.

type SimpleCodeType string

// A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept

type SimpleNameType string

type SimpleTextType string

// A string of characters used to identify a resource. Such identification enables interaction with representations of the resource over a network, typically the World Wide Web, using specific protocols.

type URI_Type string

type DateTimeType string

type IndType bool

type AirlineTypeAIDM struct {

	// Issuing Airline Name. Example: British Airways
	AirlineName *ProperNameType `xml:"AirlineName,omitempty"`

	// Airline code assigned to a carrier. Either ICAO-defined 3-character code or IATA-defined 2-character code.  Refer to IATA Airline Coding Directory, Section 3.
	AirlineDesignator *AirlineDesignatorCodeType `xml:"AirlineDesignator,omitempty"`
}

type AllianceType struct {

	// Two or more airlines participating in a commercial relationship or joint venture, where a joint and commonly identifiable product is marketed under a single commercial name or brand.
	Name *ProperNameType `xml:"Name,omitempty"`

	// Used to specify the alliance based on PADIS Code List (code list defined in BDT).
	Code *AllianceCodeType `xml:"Code,omitempty"`

	// Alliance information URL.
	// Example: http://www.oneworld.com/home
	URL *URI_Type `xml:"URL,omitempty"`

	// An enterprise operating aircraft for commercial purposes
	Airline []*AirlineTypeAIDM `xml:"Airline,omitempty"`
}

type ContactInformationType struct {

	// Classification for a particular set of contact information (e.g. Primary, Payment, etc.)
	ContactType *SimpleTextType `xml:"ContactType,omitempty"`

	// The address used for postal service. Examples are post office boxes address, postal physical address, postal code
	PostalAddress []*PostalAddressType `xml:"PostalAddress,omitempty"`

	// Other Contact Method information.   (i.e. social media handle, website, etc.)
	OtherAddress []*OtherAddressType `xml:"OtherAddress,omitempty"`

	ContactProvided []*ContactProvided__1 `xml:"ContactProvided,omitempty"`

	// The presence of the empty ContactNotProvided element indicates that the passenger refused to provide contact information.
	ContactNotProvided string `xml:"ContactNotProvided,omitempty"`

	// Reference to Individual instance(s)
	IndividualRef string `xml:"IndividualRef,omitempty"`

	// A single human being as distinct from a group, class, or family.
	//
	Individual *IndividualType `xml:"Individual,omitempty"`

	// Uniquely Identifies a set of Contact Information, within the context of one message.

	ContactID string `xml:"ContactID,attr,omitempty"`
}

type EmailAddressType struct {

	// Used to differentiate multiple email addresses of one contact.
	Label *SimpleTextType `xml:"Label,omitempty"`

	// The email address which should be used for contact purposes.
	EmailAddressValue *SimpleTextType `xml:"EmailAddressValue,omitempty"`
}

type FOID struct {

	// The CC vendor code in case FOID is a Credit Card.
	CreditCardVendorCode *CreditCardVendorCodeType `xml:"CreditCardVendorCode,omitempty"`

	// FOID ID value. Example: NY122345
	FOID_Number *SimpleCodeType `xml:"FOID_Number,omitempty"`

	// Form of identification type code used for booking/ticketing.  Examples: PP (passport), CC (credit card), FF (frequent flyer), DL (drivers license)
	FOID_Type *SimpleCodeType `xml:"FOID_Type,omitempty"`
}

type IdentityDocumentType struct {

	// Uniquely identifies the document from all other identity documents issued by the state or organization. e.g. passport number, drive license number.
	IdentityDocumentNumber *SimpleCodeType `xml:"IdentityDocumentNumber,omitempty"`

	// The type of passenger document.
	// Examples: PT (Passport)
	IdentityDocumentType *IdentityDocumentTypeCodeType `xml:"IdentityDocumentType,omitempty"`

	// Issuing country code of the identity document.
	IssuingCountryCode *ISO_3166CountryCodeType `xml:"IssuingCountryCode,omitempty"`

	// Citizenship Country Code. Examples: US, FR.
	CitizenshipCountryCode *ISO_3166CountryCodeType `xml:"CitizenshipCountryCode,omitempty"`

	// Residence Country Code. Examples: US, FR.
	ResidenceCountryCode *ISO_3166CountryCodeType `xml:"ResidenceCountryCode,omitempty"`

	// The date the identity document was issued.
	IssueDate *DateType `xml:"IssueDate,omitempty"`

	// The date the identity document expires.
	ExpiryDate *DateType `xml:"ExpiryDate,omitempty"`

	// Holder’s date of birth as written on the document.
	Birthdate *DateType `xml:"Birthdate,omitempty"`

	// Holder's birth location (e.g. city and/or country) as written on the  document.
	Birthplace *SimpleTextType `xml:"Birthplace,omitempty"`

	// Holder’s gender as specified on the document (M, F, or X for unspecified).
	Gender *GenderCodeType `xml:"Gender,omitempty"`

	// Holder's name title as written on the document. Examples: MR, MRS, DRn.
	NameTitle *ProperNameType `xml:"NameTitle,omitempty"`

	// Holder's first or given name, as written on the document.  Example: JOHN.
	GivenName *ProperNameType `xml:"GivenName,omitempty"`

	// Holder's middle name or initial, as written on the document.  Examples: G, GEORGE
	MiddleName *ProperNameType `xml:"MiddleName,omitempty"`

	// Holder's family name, last name as written on the document. Example: SMITH.
	Surname *ProperNameType `xml:"Surname,omitempty"`

	// Holder's surname suffixes and letters as written on the document. Examples: Jr., Sr., III, Ret., Esq.
	SurnameSuffix *ShortNameType `xml:"SurnameSuffix,omitempty"`

	// An official entry in a Passport or other Travel Document made by an official of a government to indicate that the bearer has been granted authority to enter or re-enter the country or region concerned.
	Visa []*VisaType `xml:"Visa,omitempty"`
}

type IndividualType struct {

	// Individual's birth location (e.g. city and/or country).
	Birthdate *DateType `xml:"Birthdate,omitempty"`

	// Country Code where the Passenger was born (ISO 3166).  For example: DE
	Birthplace *SimpleTextType `xml:"Birthplace,omitempty"`

	// Gender of the individual (M, F, or X for unspecified).
	Gender *GenderCodeType `xml:"Gender,omitempty"`

	// Individual's name title. Examples: MR, MRS, DRn.
	NameTitle *ShortNameType `xml:"NameTitle,omitempty"`

	// Individual's first or given name. Example: JOHN.
	GivenName *ProperNameType `xml:"GivenName,omitempty"`

	// Individual's middle name or initial.  Examples: G, GEORGE
	MiddleName *ProperNameType `xml:"MiddleName,omitempty"`

	// Individual's family name, last name. Example: SMITH.
	Surname *ProperNameType `xml:"Surname,omitempty"`

	// Individual's surname suffixes and letters. Examples: Jr., Sr., III, Ret., Esq.
	SurnameSuffix *ShortNameType `xml:"SurnameSuffix,omitempty"`

	// Uniquely Identifies an Individual within the context of one message.

	IndividualID string `xml:"IndividualID,attr,omitempty"`
}

type LanguageUsageType struct {

	// Language Code representation.
	//
	// Notes:
	// 1. Language code.  Example: en, en-US
	// 2. Encoding Schemes: ISO 639-1 Code OR Microsoft National Language Support (NLS) Code
	// 3. Supports ISO 639-1 (two alpha character) neutral language encoding indicated by a name such as "en" for English.
	// 4.  Supports MNLS geographically specific language encoding indicated by a name that includes both locale and country/region information. For example, the locale English (United States) has the language name "en-US"
	LanguageCode *CodesetValueTextType `xml:"LanguageCode,omitempty"`

	// Written or Spoken language.
	LanguageUsage *SimpleTextType `xml:"LanguageUsage,omitempty"`
}

type LoyaltyProgramAccountType struct {

	// Two or more airlines participating in a commercial relationship or joint venture.
	Alliance *AllianceType `xml:"Alliance,omitempty"`

	// Loyalty Program Name. Example: Miles and More
	ProgramName *SimpleNameType `xml:"ProgramName,omitempty"`

	// Loyalty Program ID: Example: MAM
	ProgramCode *SimpleCodeType `xml:"ProgramCode,omitempty"`

	// Loyalty Program account number. Example: ABC123456
	AccountNumber *SimpleCodeType `xml:"AccountNumber,omitempty"`

	// Loyalty Program information URL. Example: https://www.britishairways.com/en-gb/executive-club/about-the-club
	URL *URI_Type `xml:"URL,omitempty"`

	// Loyalty Program sign-in ID (or username).
	SignInID *SimpleTextType `xml:"SignInID,omitempty"`

	// Loyalty Program tier code.
	TierCode *SimpleCodeType `xml:"TierCode,omitempty"`

	// Loyalty Program tier name.
	TierName *SimpleTextType `xml:"TierName,omitempty"`

	// Loyalty Program account priority within the tier (e.g. Platinum, executive, etc.)
	TierPriority *SimpleTextType `xml:"TierPriority,omitempty"`

	// An enterprise operating aircraft for commercial purposes
	Airline *AirlineTypeAIDM `xml:"Airline,omitempty"`

	// Non-airline loyalty program provider name.
	ProviderName *SimpleNameType `xml:"ProviderName,omitempty"`
}

type MeasureType struct {
	Value float64 `xml:",chardata"`

	// The type of unit of measure.

	UnitCode string `xml:"UnitCode,attr,omitempty"`
}

type OtherAddressType struct {

	// Used to differentiate multiple Other Addresses of one contact.  (i.e. social media handle, website, etc.)
	Label *SimpleNameType `xml:"Label,omitempty"`

	// Other Contact Method Value. Example: www.marketingsite.com
	OtherAddressValue *SimpleTextType `xml:"OtherAddressValue,omitempty"`
}

type PassengerType struct {

	// Type code applying to the Passenger which typically drives pricing (e.g. ADT, CHD, etc).
	PTC *PassengerTypeCodeType `xml:"PTC,omitempty"`

	// Residence Country Code. Examples: US, FR.
	ResidenceCountryCode *ISO_3166CountryCodeType `xml:"ResidenceCountryCode,omitempty"`

	// Citizenship Country Code. Examples: US, FR.
	CitizenshipCountryCode *ISO_3166CountryCodeType `xml:"CitizenshipCountryCode,omitempty"`

	// A single human being as distinct from a group, class, or family.
	Individual *IndividualType `xml:"Individual,omitempty"`

	// Passenger Profile ID
	ProfileID *SimpleTextType `xml:"ProfileID,omitempty"`

	// An account set up for a customer within a rewards program which holds funds on behalf of that customer.
	LoyaltyProgramAccount []*LoyaltyProgramAccountType `xml:"LoyaltyProgramAccount,omitempty"`

	// Form of identification.  Typically used to identify that the passenger is who he says he is.
	//
	// This is the type of FOID as defined in AIRIMP (FF Number, Credit Card Number, etc.).
	//
	FOID *FOID `xml:"FOID,omitempty"`

	// Any document which may be used to identify a person or verify aspects of a person's personal identity.
	IdentityDocument []*IdentityDocumentType `xml:"IdentityDocument,omitempty"`

	// Reference to Contact Information, within the context of one message.
	ContactInfoRef string `xml:"ContactInfoRef,omitempty"`

	// Reference to Passenger instance within the context of one message, associating an infant on lap to this adult passenger.
	InfantRef string `xml:"InfantRef,omitempty"`

	// Language Code representation.
	Language []*LanguageUsageType `xml:"Language,omitempty"`

	Remark []*Remark__2 `xml:"Remark,omitempty"`

	// The Age of the Passenger.  To be used in NDC Anonymous Shopping requests or when the birthdate (in Individual) is not known.
	Age *MeasureType `xml:"Age,omitempty"`

	// The Date of Birth of the Passenger.  Anonymous Shopping requests or when the birthdate (in Individual) is not known.
	Birthdate *DateType `xml:"Birthdate,omitempty"`

	// Uniquely identifies a Passenger within the context of one message.

	PassengerID string `xml:"PassengerID,attr,omitempty"`

	// When true, passenger authorizes the airline to share his/her profile information or send promotional emails.

	ProfileConsentIndicator *IndicatorType `xml:"ProfileConsentIndicator,attr,omitempty"`
}

type PhoneTypeAIDM struct {

	// Used to differentiate multiple Phone numbers of one contact.
	// Examples: Work, Home, Mobile
	Label *SimpleTextType `xml:"Label,omitempty"`

	// Numeric telephone dialing prefixes for the member countries of the International Telecommunication Union (ITU).
	CountryDialingCode *CountryDialiingCodeType `xml:"CountryDialingCode,omitempty"`

	// Phone number area code.  Example: 813
	AreaCode *NumberType `xml:"AreaCode,omitempty"`

	// Phone number text.
	// Eg: +1 999-999-9999 ext 1234,
	// 617-9976
	// Note: This may be a simple, un-structured phone number, such as +01 999-999-9999 ext 1234 or combined with the additional attributes to create a structured phone number.
	PhoneNumber *NumberType `xml:"PhoneNumber,omitempty"`

	// Phone extension number.  Example: 1234
	Extension *NumberType `xml:"Extension,omitempty"`
}

type PostalAddressType struct {

	// Used to differentiate multiple Postal Addresses of one contact.  Examples: AddressAtOrigin or AddressAtDestination
	Label *SimpleTextType `xml:"Label,omitempty"`

	// Street name and number corresponding to the postal address. Examples: Main Street, 100 Main Street
	Street *SimpleTextType `xml:"Street,omitempty"`

	// Additional address information including building name, room, apartment, or suite number.
	BuildingRoom *SimpleTextType `xml:"BuildingRoom,omitempty"`

	// Post office box.  Example: P.O. Box 21
	POBox *SimpleCodeType `xml:"POBox,omitempty"`

	// Postal code. Examples: 11001, 11001-2345
	PostalCode *SimpleCodeType `xml:"PostalCode,omitempty"`

	// The name, expressed as text, of the city, town or village.
	CityName *SimpleNameType `xml:"CityName,omitempty"`

	// The name, expressed as text, of the subdivision of a country.
	CountrySubdivisionName *ProperNameType `xml:"CountrySubdivisionName,omitempty"`

	// The name, expressed as text, of the country.
	CountryName *ProperNameType `xml:"CountryName,omitempty"`

	// ISO Country Code. Examples: US, FR.
	CountryCode *ISO_3166CountryCodeType `xml:"CountryCode,omitempty"`
}

type RemarkTypeAIDM struct {

	// Additional, supplementary information about the document or service.
	Remark *SimpleTextType `xml:"Remark,omitempty"`

	// When TRUE, this remark should be displayed.  Notes: 1. This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only.  The technical implementation of this capability is not dictated by this specificat

	DisplayInd *IndType `xml:"DisplayInd,attr,omitempty"`

	// Remark creation timestamp.

	Timestamp *DateTimeType `xml:"Timestamp,attr,omitempty"`
}

type VisaType struct {

	// Visa ID value. Example: NY122345.
	VisaNumber *SimpleCodeType `xml:"VisaNumber,omitempty"`

	// The type of visa.
	VisaType *SimpleCodeType `xml:"VisaType,omitempty"`

	// ISO Country Code where the visa is valid.  For example: DE
	VisaHostCountryCode string `xml:"VisaHostCountryCode,omitempty"`

	// Date at which the VISA expires and is no longer a valid entry document.
	EnterBeforeDate *DateType `xml:"EnterBeforeDate,omitempty"`

	// Duration permitted of the Passenger's stay in the visa host country (in days).
	DurationOfStay *OrdinalType `xml:"DurationOfStay,omitempty"`

	// Number of entries permitted by the visa into the host country.
	NumberOfEntries *OrdinalType `xml:"NumberOfEntries,omitempty"`
}

type AirShoppingRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AirShoppingRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	// Parameters that influence overall message results.
	//
	// Supported Parameter Groups: Inventory Guarantee (offer-associated); Service Filter (offer-associated); Pricing.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *AirShopReqParamsType `xml:"Parameters,omitempty"`

	CoreQuery *CoreQuery__1 `xml:"CoreQuery,omitempty"`

	Qualifier *Qualifier__2 `xml:"Qualifier,omitempty"`

	Preference *Preference__1 `xml:"Preference,omitempty"`

	DataLists *DataLists__1 `xml:"DataLists,omitempty"`

	Metadata *Metadata__3 `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type Affinity AirShopReqAffinityQueryType

type FlightSpecific AirShopFlightSpecificType

type AirShopReqMetadataType struct {
	Shopping *Shopping__1 `xml:"Shopping,omitempty"`

	Passenger *Passenger__2 `xml:"Passenger,omitempty"`

	Other *Other__1 `xml:"Other,omitempty"`
}

type AirShopReqParamsType struct {
	*MessageParamsBaseType

	Inventory *Inventory__1 `xml:"Inventory,omitempty"`

	ServiceFilters *ServiceFilters__1 `xml:"ServiceFilters,omitempty"`

	Pricing *Pricing__2 `xml:"Pricing,omitempty"`

	Group *Group__2 `xml:"Group,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`
}

type AirShopFlightSpecificType struct {
	FlightSegment []*FlightSegment__1 `xml:"FlightSegment,omitempty"`

	Flight []*Flight__5 `xml:"Flight,omitempty"`

	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type AirShopReqAttributeQueryType struct {
	OriginDestination []*OriginDestination__1 `xml:"OriginDestination,omitempty"`
}

type AirShopReqAffinityQueryType struct {
	OriginDestination []*OriginDestination__2 `xml:"OriginDestination,omitempty"`

	StayPeriodDateRange *StayPeriodDateRange `xml:"StayPeriodDateRange,omitempty"`

	StayPeriodSeason *StayPeriodSeason `xml:"StayPeriodSeason,omitempty"`

	TripDistance *TripDistance `xml:"TripDistance,omitempty"`

	TripTime *TripTime `xml:"TripTime,omitempty"`

	Budget *Budget__1 `xml:"Budget,omitempty"`

	KeywordPreferences *KeywordPreferences__1 `xml:"KeywordPreferences,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`
}

type AirShoppingRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AirShoppingRS"`

	Document *Document `xml:"Document,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	AirShoppingProcessing *AirShoppingProcessing `xml:"AirShoppingProcessing,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	OffersGroup *OffersGroup__1 `xml:"OffersGroup,omitempty"`

	Payments *Payments__2 `xml:"Payments,omitempty"`

	Promotions *Promotions__3 `xml:"Promotions,omitempty"`

	Commission *Commission `xml:"Commission,omitempty"`

	DataLists *DataLists__2 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *AirShopResMetadataType `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type AirShoppingProcessing OrdViewProcessType

type AirShopResMetadataType struct {
	Shopping *Shopping__2 `xml:"Shopping,omitempty"`

	Passenger *Passenger__3 `xml:"Passenger,omitempty"`

	Other *Other__2 `xml:"Other,omitempty"`
}

type OrdViewProcessType struct {
	*OrderProcessResultType

	Alerts *Alerts `xml:"Alerts,omitempty"`

	Notices *Notices `xml:"Notices,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type BaggageAllowanceRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BaggageAllowanceRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	// Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *BagAllowReqParamsType `xml:"Parameters,omitempty"`

	// Ticket identification group, can be associated per Traveler.
	TicketIdentification []*TicketIdentificationType `xml:"TicketIdentification,omitempty"`

	Preference *Preference__2 `xml:"Preference,omitempty"`

	Qualifier *Qualifier__3 `xml:"Qualifier,omitempty"`

	// Existing Flight Itinerary Information.
	JourneyData *ItineraryType `xml:"JourneyData,omitempty"`

	DataLists *DataLists__3 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *BagAllowReqMetadataType `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	Query *Query__6 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type BagAllowReqParamsType struct {
	*MessageParamsBaseType

	ServiceFilters *ServiceFilters__2 `xml:"ServiceFilters,omitempty"`

	Pricing *Pricing__3 `xml:"Pricing,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`
}

type BagAllowReqMetadataType struct {
	Shopping *Shopping__3 `xml:"Shopping,omitempty"`

	Passenger *Passenger__4 `xml:"Passenger,omitempty"`

	Other *Other__3 `xml:"Other,omitempty"`
}

type BaggageAllowanceRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BaggageAllowanceRS"`

	Document *Document `xml:"Document,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Processing *ProcessingResultType `xml:"Processing,omitempty"`

	// Search Result Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *BagAllowResParamsType `xml:"Parameters,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	OriginDestination []*OriginDestination__3 `xml:"OriginDestination,omitempty"`

	USDOT *USDOT__1 `xml:"USDOT,omitempty"`

	DataLists *DataLists__4 `xml:"DataLists,omitempty"`

	Metadata *Metadata__4 `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type BagAllowResParamsType struct {
	*MessageParamsBaseType

	Pricing *Pricing__4 `xml:"Pricing,omitempty"`
}

type BagAllowResMetadataType struct {
	Shopping *Shopping__4 `xml:"Shopping,omitempty"`

	Passenger *Passenger__5 `xml:"Passenger,omitempty"`

	Other *Other__4 `xml:"Other,omitempty"`
}

type ServiceListRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ServiceListRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	// Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *SrvListReqParamsType `xml:"Parameters,omitempty"`

	Preference *Preference `xml:"Preference,omitempty"`

	Qualifier *Qualifier `xml:"Qualifier,omitempty"`

	// Existing Flight Itinerary Information.
	JourneyData *ItineraryType `xml:"JourneyData,omitempty"`

	DataLists *DataLists__5 `xml:"DataLists,omitempty"`

	Metadata *Metadata__5 `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	Query *Query__7 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type SrvListReqParamsType struct {
	*MessageParamsBaseType

	Inventory *Inventory__2 `xml:"Inventory,omitempty"`

	ServiceFilters *ServiceFilters__3 `xml:"ServiceFilters,omitempty"`

	Pricing *Pricing__5 `xml:"Pricing,omitempty"`

	Group *Group__3 `xml:"Group,omitempty"`
}

type SrvListReqMetadataType struct {
	Shopping *Shopping__5 `xml:"Shopping,omitempty"`

	Passenger *Passenger__6 `xml:"Passenger,omitempty"`

	Other *Other__5 `xml:"Other,omitempty"`
}

type ServiceListRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 ServiceListRS"`

	Document *Document `xml:"Document,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	// Transaction Processing Results, including processing  supplemental marketing messages.
	Processing *ProcessingResultType `xml:"Processing,omitempty"`

	OfferExpiration *OfferExpiration__2 `xml:"OfferExpiration,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	ALaCarteOffer *ALaCarteOffer__1 `xml:"ALaCarteOffer,omitempty"`

	// Search Result Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *SrvListResParamsType `xml:"Parameters,omitempty"`

	Metadata *Metadata__6 `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	DataLists *DataLists__6 `xml:"DataLists,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type SrvListResParamsType struct {
	*MessageParamsBaseType

	Pricing *Pricing__6 `xml:"Pricing,omitempty"`

	InventoryGuarantee *InventoryGuarantee `xml:"InventoryGuarantee,omitempty"`

	Group *Group__4 `xml:"Group,omitempty"`
}

type SrvListResMetadataType struct {
	Shopping *Shopping__6 `xml:"Shopping,omitempty"`

	Passenger *Passenger__7 `xml:"Passenger,omitempty"`

	Other *Other__6 `xml:"Other,omitempty"`
}

type OrderCreateRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderCreateRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	OrderCreateParameters *OrderCreateParameters `xml:"OrderCreateParameters,omitempty"`

	Query *Query__8 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderCreateParameters struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderCreateParameters"`

	*OrdCreateParamsType
}

type OrdCreateMetadataType struct {
	PassengerMetadata []*PassengerMetadata `xml:"PassengerMetadata,omitempty"`

	Other *Other__7 `xml:"Other,omitempty"`
}

type OrdCreateParamsType struct {
	Alerts *Alerts `xml:"Alerts,omitempty"`

	Notices *Notices `xml:"Notices,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	References *MultiAssocSimpleType `xml:"references,attr,omitempty"`
}

type OrderViewRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderViewRS"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	AugmentationPoint *AugmentationPoint__1 `xml:"AugmentationPoint,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Response *Response__1 `xml:"Response,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderViewProcessing OrderViewProcessType

type OrdViewMetadataType struct {
	PassengerMetadata []*PassengerMetadata `xml:"PassengerMetadata,omitempty"`

	Other *Other__8 `xml:"Other,omitempty"`
}

type OrderViewProcessType struct {
	*OrderProcessResultType

	Alerts *Alerts `xml:"Alerts,omitempty"`

	Notices *Notices `xml:"Notices,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type OrderRetrieveRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderRetrieveRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	OrderRetrieveParameters *OrderRetrieveParameters `xml:"OrderRetrieveParameters,omitempty"`

	Query *Query__9 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderRetrieveParameters OrdRetrieveParamsType

type OrdRetrieveParamsType struct {
	Alerts *Alerts `xml:"Alerts,omitempty"`

	Notices *Notices `xml:"Notices,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	References *MultiAssocSimpleType `xml:"references,attr,omitempty"`
}

type FareRulesRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FareRulesRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	// Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *FareRulesReqParamsType `xml:"Parameters,omitempty"`

	Query *Query__10 `xml:"Query,omitempty"`

	Metadata *Metadata__7 `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type FareRulesReqParamsType struct {
	*MessageParamsBaseType
}

type FareRulesReqMetadataType struct {
	Shopping *Shopping__7 `xml:"Shopping,omitempty"`

	Other *Other__9 `xml:"Other,omitempty"`
}

type FareRulesRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 FareRulesRS"`

	Document *Document `xml:"Document,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	Processing *ProcessingResultType `xml:"Processing,omitempty"`

	Rules *Rules__1 `xml:"Rules,omitempty"`

	Metadata *Metadata__8 `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type FareRulesResMetadataType struct {
	Shopping *Shopping__8 `xml:"Shopping,omitempty"`

	Other *Other__10 `xml:"Other,omitempty"`
}

type OrderListRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderListRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	OrderListParameters *OrderListParameters `xml:"OrderListParameters,omitempty"`

	Query *Query__11 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderListParameters OrderListParamsType

type OrderListParamsType struct {
	Notices *Notices `xml:"Notices,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	References *MultiAssocSimpleType `xml:"references,attr,omitempty"`
}

type OrderListRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderListRS"`

	Document *Document `xml:"Document,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Response *Response__2 `xml:"Response,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderListProcessing OrderListProcessType

type OrderListProcessType struct {
	*OrderProcessResultType

	Notices *Notices `xml:"Notices,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type AirDocDisplayRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AirDocDisplayRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	Query *Query__12 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type AirDocDisplayRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 AirDocDisplayRS"`

	Document *Document `xml:"Document,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Response *Response__3 `xml:"Response,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type AirDocDisplayProcessing AirDocDisplayResProcessType

type AirDocDisplayResProcessType struct {
	Alerts *Alerts `xml:"Alerts,omitempty"`

	Notices *Notices `xml:"Notices,omitempty"`

	MarketingMessages *MarketingMessages `xml:"MarketingMessages,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	// When true, processing alerts have been generated and the Alerts node should be parsed.

	AlertInd bool `xml:"AlertInd,attr,omitempty"`

	// When true, supplemental marketing information has been generated and the Notifications/ MarketingMessage node should be parsed.

	MarketingInd bool `xml:"MarketingInd,attr,omitempty"`

	// When true, business warnings have been generated and the Notification/Warning node should be parsed.

	WarningInd bool `xml:"WarningInd,attr,omitempty"`

	// When true, notices have been generated and the Notifications/Notice node should be parsed.

	NoticeInd bool `xml:"NoticeInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SeatAvailabilityRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SeatAvailabilityRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	// Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *SeatAvailReqParamsType `xml:"Parameters,omitempty"`

	// Traveler requested qualifiers to influence search results, e.g. offers and/ or offer pricing.
	//
	// Notes:
	// 1. Included Existing Orders, Payment Card, Programs, Promotions, Seat, Service, Social Media, Special Fare, Special Needs, Trip Purpose.
	//
	// 2. These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only.
	Qualifiers *QualifiersType `xml:"Qualifiers,omitempty"`

	// Existing Flight Itinerary Information.
	JourneyData *ItineraryType `xml:"JourneyData,omitempty"`

	DataLists *DataLists__7 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *SeatAvailReqMetadataType `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	Query *Query__13 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type SeatAvailReqParamsType struct {
	*MessageParamsBaseType

	Inventory *Inventory__3 `xml:"Inventory,omitempty"`

	ServiceFilters *ServiceFilters__4 `xml:"ServiceFilters,omitempty"`

	Pricing *Pricing__7 `xml:"Pricing,omitempty"`

	Group *Group__5 `xml:"Group,omitempty"`
}

type SeatAvailReqMetadataType struct {
	Shopping *Shopping__9 `xml:"Shopping,omitempty"`

	Passenger *Passenger__8 `xml:"Passenger,omitempty"`

	Other *Other__11 `xml:"Other,omitempty"`
}

type SeatAvailabilityRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 SeatAvailabilityRS"`

	Document *Document `xml:"Document,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Processing *ProcessingResultType `xml:"Processing,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	// Search Result Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *SeatAvailResParamsType `xml:"Parameters,omitempty"`

	ALaCarteOffer *ALaCarteOffer__2 `xml:"ALaCarteOffer,omitempty"`

	SeatMap []*SeatMap__1 `xml:"SeatMap,omitempty"`

	// Metadata List(s).
	Metadata *SeatAvailResMetadataType `xml:"Metadata,omitempty"`

	DataLists *DataLists__8 `xml:"DataLists,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type SeatAvailResParamsType struct {
	*MessageParamsBaseType

	Pricing *Pricing__8 `xml:"Pricing,omitempty"`

	InventoryGuarantee *InventoryGuarantee `xml:"InventoryGuarantee,omitempty"`

	Group *Group__6 `xml:"Group,omitempty"`
}

type SeatAvailResMetadataType struct {
	Shopping *Shopping__10 `xml:"Shopping,omitempty"`

	Passenger *Passenger__9 `xml:"Passenger,omitempty"`

	Other *Other__12 `xml:"Other,omitempty"`
}

type OfferPriceRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OfferPriceRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	// Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *FltPriceReqParamsType `xml:"Parameters,omitempty"`

	// Core Flight Pricing query parameters.
	Query *OrderRequestType `xml:"Query,omitempty"`

	Preference *Preference `xml:"Preference,omitempty"`

	Qualifier *Qualifier `xml:"Qualifier,omitempty"`

	// Existing Flight Itinerary Information.
	JourneyData *ItineraryType `xml:"JourneyData,omitempty"`

	// Auto Exchange information.
	InExchangeForTicket *TicketAutoExchangeType `xml:"InExchangeForTicket,omitempty"`

	DataLists *DataLists__9 `xml:"DataLists,omitempty"`

	Metadata *Metadata__9 `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type FltPriceReqParamsType struct {
	*MessageParamsBaseType

	ServiceFilters *ServiceFilters__5 `xml:"ServiceFilters,omitempty"`

	Pricing *Pricing__9 `xml:"Pricing,omitempty"`
}

type FltPriceReqMetadataType struct {
	Shopping *Shopping__11 `xml:"Shopping,omitempty"`

	Passenger *Passenger__10 `xml:"Passenger,omitempty"`

	Other *Other__13 `xml:"Other,omitempty"`
}

type OfferPriceRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OfferPriceRS"`

	Document *Document `xml:"Document,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Processing *ProcessingResultType `xml:"Processing,omitempty"`

	// Search Result Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *FltPriceResParamsType `xml:"Parameters,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	PricedOffer *PricedOffer__1 `xml:"PricedOffer,omitempty"`

	OtherOffers *OtherOffers__1 `xml:"OtherOffers,omitempty"`

	Payments *Payments__3 `xml:"Payments,omitempty"`

	Promotions *Promotions__4 `xml:"Promotions,omitempty"`

	Commission *Commission `xml:"Commission,omitempty"`

	DataLists *DataLists__10 `xml:"DataLists,omitempty"`

	Metadata *Metadata__10 `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type FltPriceResParamsType struct {
	*MessageParamsBaseType

	Pricing *Pricing__10 `xml:"Pricing,omitempty"`
}

type FltPriceResMetadataType struct {
	Shopping *Shopping__12 `xml:"Shopping,omitempty"`

	Traveler *Traveler__1 `xml:"Traveler,omitempty"`

	Other *Other__14 `xml:"Other,omitempty"`
}

type BaggageListRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BaggageListRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	// Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *BagListReqParamsType `xml:"Parameters,omitempty"`

	Preference *Preference `xml:"Preference,omitempty"`

	Qualifier *Qualifier `xml:"Qualifier,omitempty"`

	// Existing Flight Itinerary Information.
	JourneyData *ItineraryType `xml:"JourneyData,omitempty"`

	DataLists *DataLists__11 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *BagListReqMetadataType `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	Query *Query__14 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type BagListReqParamsType struct {
	*MessageParamsBaseType

	ServiceFilters *ServiceFilters__6 `xml:"ServiceFilters,omitempty"`

	Pricing *Pricing__11 `xml:"Pricing,omitempty"`
}

type BagListReqMetadataType struct {
	Shopping *Shopping__13 `xml:"Shopping,omitempty"`

	Passenger *Passenger__11 `xml:"Passenger,omitempty"`

	Other *Other__15 `xml:"Other,omitempty"`
}

type BaggageListRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BaggageListRS"`

	Document *Document `xml:"Document,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Processing *ProcessingResultType `xml:"Processing,omitempty"`

	// Search Result Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *BagListResParamsType `xml:"Parameters,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	Services *Services__3 `xml:"Services,omitempty"`

	DataLists *DataLists__12 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *BagListResMetadataType `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type BagListResParamsType struct {
	*MessageParamsBaseType

	Pricing *Pricing__12 `xml:"Pricing,omitempty"`
}

type BagListResMetadataType struct {
	Shopping *Shopping__14 `xml:"Shopping,omitempty"`

	Passenger *Passenger__12 `xml:"Passenger,omitempty"`

	Other *Other__16 `xml:"Other,omitempty"`
}

type BaggageChargesRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BaggageChargesRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	// Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *BagChargeReqParamsType `xml:"Parameters,omitempty"`

	// Ticket identification group, can be associated per Traveler.
	TicketIdentification []*TicketIdentificationType `xml:"TicketIdentification,omitempty"`

	Preference *Preference `xml:"Preference,omitempty"`

	Qualifier *Qualifier `xml:"Qualifier,omitempty"`

	// Existing Flight Itinerary Information.
	JourneyData *ItineraryType `xml:"JourneyData,omitempty"`

	DataLists *DataLists__13 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *BagChargeReqMetadataType `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	Query *Query__15 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type BagChargeReqParamsType struct {
	*MessageParamsBaseType

	ServiceFilters *ServiceFilters__7 `xml:"ServiceFilters,omitempty"`

	Pricing *Pricing__13 `xml:"Pricing,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`
}

type BagChargeReqMetadataType struct {
	Shopping *Shopping__15 `xml:"Shopping,omitempty"`

	Passenger *Passenger__13 `xml:"Passenger,omitempty"`

	Other *Other__17 `xml:"Other,omitempty"`
}

type BaggageChargesRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 BaggageChargesRS"`

	Document *Document `xml:"Document,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Processing *ProcessingResultType `xml:"Processing,omitempty"`

	// Search Result Parameters that influence overall message results.
	//
	// Note: These capabilities may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. The technical implementation of this capability is not dictated by this specification.
	Parameters *BagChargeResParamsType `xml:"Parameters,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	BaggageCharge *BaggageCharge__1 `xml:"BaggageCharge,omitempty"`

	DataLists *DataLists__14 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *BagChargeResMetadataType `xml:"Metadata,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type BagChargeResParamsType struct {
	*MessageParamsBaseType

	ServiceFilters *ServiceFilters__8 `xml:"ServiceFilters,omitempty"`

	Pricing *Pricing__14 `xml:"Pricing,omitempty"`
}

type BagChargeResMetadataType struct {
	Shopping *Shopping__16 `xml:"Shopping,omitempty"`

	Passenger *Passenger__14 `xml:"Passenger,omitempty"`

	Other *Other__18 `xml:"Other,omitempty"`
}

type InvGuaranteeRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 InvGuaranteeRQ"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	Query *Query__16 `xml:"Query,omitempty"`

	DataLists *DataLists__15 `xml:"DataLists,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type InvGuaranteeRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 InvGuaranteeRS"`

	Document *Document `xml:"Document,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Response *Response__4 `xml:"Response,omitempty"`

	DataLists *DataLists__16 `xml:"DataLists,omitempty"`

	Metadata *Metadata__11 `xml:"Metadata,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type InvGuaranteeProcessing InvGuarResProcessType

type InvGuarResProcessType struct {
	*AssociatedObjectBaseType

	Remarks *Remarks `xml:"Remarks,omitempty"`

	Policies *Policies `xml:"Policies,omitempty"`

	// When true, business warnings have been generated and the Notification/Warning node should be parsed.

	WarningInd bool `xml:"WarningInd,attr,omitempty"`
}

type InvReleaseNotif struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 InvReleaseNotif"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	Query *Query__17 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type Acknowledgement struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 Acknowledgement"`

	Document *Document `xml:"Document,omitempty"`

	// Status Code. Example: OK
	StatusCode *CodesetValueSimpleType `xml:"StatusCode,omitempty"`

	// Status Message.
	StatusMessage *ShortDescSimpleType `xml:"StatusMessage,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderCancelRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderCancelRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	OrderCancelParameters *OrderCancelParameters__1 `xml:"OrderCancelParameters,omitempty"`

	// Refund amount expected from requestor.
	ExpectedRefundAmount *DetailCurrencyPriceType `xml:"ExpectedRefundAmount,omitempty"`

	Query *Query__18 `xml:"Query,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderCancelRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderCancelRS"`

	Document *Document `xml:"Document,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Response []*Response__5 `xml:"Response,omitempty"`

	DataLists *DataLists__17 `xml:"DataLists,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderCancelProcessing OrdCancelProcessType

type OrdCancelProcessType struct {
	*OrderProcessResultType

	Notices *Notices `xml:"Notices,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type OrderChangeRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderChangeRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	OrderChangeParameters *OrderChangeParameters `xml:"OrderChangeParameters,omitempty"`

	Query *Query__19 `xml:"Query,omitempty"`

	DataLists *DataLists__18 `xml:"DataLists,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderChangeMetadata OrdChangeMetadataType

type OrderChangeParameters struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderChangeParameters"`

	*OrdChangeParamsType
}

type OrdChangeMetadataType struct {
	PassengerMetadata []*PassengerMetadata `xml:"PassengerMetadata,omitempty"`

	Other *Other__19 `xml:"Other,omitempty"`
}

type OrdChangeParamsType struct {
	Alerts *Alerts `xml:"Alerts,omitempty"`

	Notices *Notices `xml:"Notices,omitempty"`

	// Reason for change.
	//
	// Encoding Scheme: IATA Padis Codeset REA
	Reason *IATA_CodeType `xml:"Reason,omitempty"`

	RefundFOP_Preference *RefundFOP_Preference__1 `xml:"RefundFOP_Preference,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	References *MultiAssocSimpleType `xml:"References,attr,omitempty"`
}

type OrderReshopRS struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderReshopRS"`

	Document *Document `xml:"Document,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	// The presence of the empty Success element explicitly indicates that the message succeeded.
	Success *SuccessType `xml:"Success,omitempty"`

	// Used in conjunction with the Success element to define one or more business errors.
	Warnings *WarningsType `xml:"Warnings,omitempty"`

	Response *Response__6 `xml:"Response,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type OrderReshopProcessing ItinReshopProcessType

type ItinReshopMetadataType struct {
	PassengerMetadata []*PassengerMetadata `xml:"PassengerMetadata,omitempty"`

	Other *Other__20 `xml:"Other,omitempty"`
}

type ItinReshopProcessType struct {
	*OrderProcessResultType

	Alerts *Alerts `xml:"Alerts,omitempty"`

	Notices *Notices `xml:"Notices,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type OrderReshopRQ struct {
	XMLName xml.Name `xml:"http://www.iata.org/IATA/EDIST/2017.2 OrderReshopRQ"`

	PointOfSale *PointOfSale `xml:"PointOfSale,omitempty"`

	Document *Document `xml:"Document,omitempty"`

	Party *Party `xml:"Party,omitempty"`

	ReshopParameters *ReshopParameters `xml:"ReshopParameters,omitempty"`

	Query *Query__20 `xml:"Query,omitempty"`

	DataLists *DataLists__19 `xml:"DataLists,omitempty"`

	// A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.

	EchoToken *StringLength1to128 `xml:"EchoToken,attr,omitempty"`

	// Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).

	TimeStamp string `xml:"TimeStamp,attr,omitempty"`

	// Used to indicate whether the request is for the Test or Production system.

	Target string `xml:"Target,attr,omitempty"`

	// For all IATA versioned messages, the version of the message is indicated by a decimal value.

	Version string `xml:"Version,attr,omitempty"`

	// A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).

	TransactionIdentifier *StringLength1to32 `xml:"TransactionIdentifier,attr,omitempty"`

	// Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.

	SequenceNmbr int32 `xml:"SequenceNmbr,attr,omitempty"`

	// This indicates where this message falls within a sequence of messages.

	TransactionStatusCode string `xml:"TransactionStatusCode,attr,omitempty"`

	// When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to true) only when a message is retransmitted.

	RetransmissionIndicator bool `xml:"RetransmissionIndicator,attr,omitempty"`

	// Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.

	CorrelationID *StringLength1to64 `xml:"CorrelationID,attr,omitempty"`

	// When true, indicates that the client can accept asynchronous processing.

	AsynchronousAllowedInd bool `xml:"AsynchronousAllowedInd,attr,omitempty"`

	// Identifes the primary language preference for the message.  The human language is identified by ISO 639 codes.

	PrimaryLangID string `xml:"PrimaryLangID,attr,omitempty"`

	// Identifies the alternate language for a customer or message.  The human language is identified by ISO 639 codes.

	AltLangID string `xml:"AltLangID,attr,omitempty"`
}

type ReshopParameters ItinReshopParamsType

type ItinReshopParamsType struct {
	Alerts *Alerts__1 `xml:"Alerts,omitempty"`

	Notices *Notices__1 `xml:"Notices,omitempty"`

	CurrCodes *CurrCodes__2 `xml:"CurrCodes,omitempty"`

	// Reason for change.
	//
	// Encoding Scheme: IATA Padis Codeset REA
	Reason *IATA_CodeType `xml:"Reason,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ALaCarteOffer__1 struct {
	*OfferType

	// One Service or Service  Bundle which is priced per unit. A La Carte Offer Items are optional and variable quantities of these can be selected by any of the eligible passengers for the applicable segments and/or price classes.
	ALaCarteOfferItem []*ALaCarteOfferItemType `xml:"ALaCarteOfferItem,omitempty"`
}

type ALaCarteOffer__2 struct {
	*OfferType

	ALaCarteOfferItem []*ALaCarteOfferItem__1 `xml:"ALaCarteOfferItem,omitempty"`
}

type ATPCO__1 struct {
	Attributes *Attributes `xml:"Attributes,omitempty"`

	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`
}

type AcceptableVariance__1 struct {
	CurrencyAmountValue *CurrencyAmountValue `xml:"CurrencyAmountValue,omitempty"`

	PercentageValue *PercentageValue `xml:"PercentageValue,omitempty"`
}

type AccountID__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AccountNumber__1 struct {
	Value *ContextSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Account__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Account__2 struct {
	SignInID *SignInID__1 `xml:"SignInID,omitempty"`

	Number *Number__2 `xml:"Number,omitempty"`

	// Frequent flyer tier status. Example: "Altitude Elite 100K"
	FQTVStatus string `xml:"FQTVStatus,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Account__3 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Account__4 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AdditionalServicesInfo__1 struct {

	// ATPCO Optional Service Group Code. Example: ???
	//
	// Note: This is a value which specifies the high-level group applicable to the service at the coupon level as defined by ATPCO.

	Group string `xml:"Group,omitempty"`

	// ATPCO Optional Service Sub Group Code. Example: ???
	//
	// Note: This is a value which specifies the sub group (within the specified group) applicable to the service at the coupon level as defined by ATPCO.

	SubGroup string `xml:"SubGroup,omitempty"`

	// RFISC Issuance Type. Example: ZZZ (Mutually Defined)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 1131 (Code List Qualifier)
	//
	// PAULA: Is the right code set?
	RFISC_DefinedType *CodesetType `xml:"RFISC_DefinedType,omitempty"`

	// ATPCO Service Type Code. Example: ?
	//
	// Note: This is a value which specifies the service type.

	ServiceType string `xml:"ServiceType,omitempty"`
}

type AddressFields__1 struct {
	FieldName []*FieldName__1 `xml:"FieldName,omitempty"`
}

type Address__1 struct {
	PaymentAddress *PaymentAddress `xml:"PaymentAddress,omitempty"`

	SimpleAddress *SimpleAddress `xml:"SimpleAddress,omitempty"`

	StructuredAddress *StructuredAddress `xml:"StructuredAddress,omitempty"`
}

type Address__2 struct {
	*EmailID_Type
}

type Address__3 struct {
	StructuredAddress *StructuredAddress `xml:"StructuredAddress,omitempty"`

	SimpleAddress *SimpleAddress `xml:"SimpleAddress,omitempty"`

	PaymentAddress *PaymentAddress `xml:"PaymentAddress,omitempty"`
}

type Address__4 struct {
	SimpleAddress *SimpleAddress `xml:"SimpleAddress,omitempty"`

	StructuredAddress *StructuredAddress `xml:"StructuredAddress,omitempty"`

	PaymentAddress *PaymentAddress `xml:"PaymentAddress,omitempty"`
}

type Address__5 struct {
	SimpleAddress *SimpleAddress `xml:"SimpleAddress,omitempty"`

	StructuredAddress *StructuredAddress `xml:"StructuredAddress,omitempty"`

	PaymentAddress *PaymentAddress `xml:"PaymentAddress,omitempty"`
}

type AdvanceDeparture__1 struct {
	Value string `xml:",chardata"`

	// Restriction context. Example: EARLIEST, LATEST, Other

	Context *AdvPurchaseSimpleType `xml:"Context,attr,omitempty"`
}

type AdvanceReservation__1 struct {
	Value string `xml:",chardata"`

	// Restriction context. Example: EARLIEST, LATEST, Other

	Context *AdvPurchaseSimpleType `xml:"Context,attr,omitempty"`
}

type AdvanceStay__1 struct {
	AdvancePurchase *AdvancePurchase `xml:"AdvancePurchase,omitempty"`

	AdvanceTicketing *AdvanceTicketing `xml:"AdvanceTicketing,omitempty"`

	MinimumStay *MinimumStay `xml:"MinimumStay,omitempty"`

	MaximumStay *MaximumStay `xml:"MaximumStay,omitempty"`
}

type AgentUserID__1 struct {
	*UniqueIDContextType
}

type Aircraft__1 struct {
	Equipment *Equipment__1 `xml:"Equipment,omitempty"`

	Seats *Seats__1 `xml:"Seats,omitempty"`

	Rows *Rows__1 `xml:"Rows,omitempty"`

	// Aircraft Features.
	Features *AircraftFeaturesQueryType `xml:"Features,omitempty"`

	// Aircraft Tail Number(s).
	TailNumbers *AircraftTailNmbrQueryType `xml:"TailNumbers,omitempty"`

	Cabins *Cabins__1 `xml:"Cabins,omitempty"`

	Classes *Classes__2 `xml:"Classes,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AirlineID__1 struct {
	*AirlineID_Type

	// Name. Example: British Airways

	Name *ProperNameSimpleType `xml:"Name,attr,omitempty"`
}

type Airline__1 struct {
	ID *ID__2 `xml:"ID,omitempty"`

	Name *Name__10 `xml:"Name,omitempty"`

	CountryCode *CountryCode__1 `xml:"CountryCode,omitempty"`
}

type Airline__2 struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	// Geographical indicator type.  Example: DOM (DOMESTIC/ DOMESTIC)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 9970 (Product Details Qualifier)
	GeoIndicatorType *IATA_CodeType `xml:"GeoIndicatorType,omitempty"`

	// Flight haul length type.  Example: LH (LONG-HAUL 6 HRS PLUS)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element FHT (Flight Haul Type)
	FlightHaulLength *IATA_CodeType `xml:"FlightHaulLength,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type AirportCode__1 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__2 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type Alert__1 struct {
	*AlertType
}

type Alerts__1 struct {

	// Traveler PIN Phrase Authentication Response.
	//
	// Notes:
	// 1. This is part of an ongoing transaction for a processing condition that occured when additional Traveler authentication was required to complete transaction processing, such as access to secure FQTV information to complete Order amendment.
	// 2. This information contains the authentication scheme response information, e.g. the Pin Phrase answer.
	PIN_AuthAlertResponse *PinPhraseAnswerType `xml:"PIN_AuthAlertResponse,omitempty"`
}

type Alliance__1 struct {
	*CodesetType

	// Geographical indicator type.  Example: DOM (DOMESTIC/ DOMESTIC)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 9970 (Product Details Qualifier)
	GeoIndicatorType *IATA_CodeType `xml:"GeoIndicatorType,omitempty"`

	// Flight haul length type.  Example: LH (LONG-HAUL 6 HRS PLUS)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element FHT (Flight Haul Type)
	FlightHaulLength *IATA_CodeType `xml:"FlightHaulLength,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type AllowableBag__1 struct {

	// The permitted baggage types by RFISC for the applicable baggage allowance.

	Type *AlphaNumericStringLength1to3 `xml:"Type,attr,omitempty"`

	// The maximum numberof this baggage type.

	Number *Numeric0to99 `xml:"Number,attr,omitempty"`
}

type AlternateOffers__1 struct {

	// The total number of Alternate Offers provided by this Airline. Example: 12
	TotalOfferQuantity int32 `xml:"TotalOfferQuantity,omitempty"`

	// Airline designator of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code
	Owner *AirlineID_Type `xml:"Owner,omitempty"`

	AlternateOffer []*AlternateOffer__1 `xml:"AlternateOffer,omitempty"`
}

type Altitude__1 struct {
	Value string `xml:",chardata"`

	// Altitude unit of measure.
	// Example: Feet, Meters

	Unit *DistanceUnitSimpleType `xml:"Unit,attr,omitempty"`

	// Other altitude unit of measure context. Example: MyContext

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Amount__1 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`
}

type Amount__2 struct {
	*CurrencyAmountOptType
}

type Amount__3 struct {
	*CurrencyAmountOptType
}

type Amount__4 struct {
	*CurrencyAmountOptType
}

type Amount__5 struct {
	*CurrencyAmountOptType
}

type Amount__6 struct {
	*CurrencyAmountOptType
}

type ApplicableFeeRemarks__1 struct {
	*RemarkType
}

type AreaValue__1 struct {
	Value float64 `xml:",chardata"`
}

type ArrivalDateTime__1 struct {
	*CoreDateGrpType
}

type Assignment__1 struct {
	*SeatCoreType

	SeatAssociation *SeatAssociation `xml:"SeatAssociation,omitempty"`
}

type AssocCode__1 struct {
	Value *OtherCodeSimpleType `xml:",chardata"`
}

type AssociatedIDs__1 struct {
	AssociatedID []*AssociatedID__1 `xml:"AssociatedID,omitempty"`
}

type Association__1 struct {

	// Named association type. Examples: Equipment, MediaGroup
	Type *MarketMsgBagAssocListType `xml:"Type,omitempty"`

	// Associated object instance value. Example: mediagrp1
	ReferenceValue string `xml:"ReferenceValue,omitempty"`
}

type Associations__1 struct {
	OrderID *OrderID `xml:"OrderID,omitempty"`

	OrderItemID []*OrderItemID `xml:"OrderItemID,omitempty"`

	Passengers *Passengers__2 `xml:"Passengers,omitempty"`

	OtherAssociation []*OtherAssociation__5 `xml:"OtherAssociation,omitempty"`
}

type Associations__2 struct {
	*ServiceAssocType
}

type Associations__3 struct {
	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`
}

type AttachmentURI__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type AttachmentURI__2 struct {
	Value string `xml:",chardata"`
}

type AugPointAssoc__1 struct {

	// Reference to globally unique AUGMENTATION POINT instance/ class Key.
	//
	// Example: 2B75C565-5BB0- 4DCE-8DE6-67CB7B4F25A7

	KeyRef *InstanceClassRefSimpleType `xml:"KeyRef,attr,omitempty"`

	// Owner Airline (or other entity) Code. Examples: BA, WIDGETCO

	Owner *OwnerSimpleType `xml:"Owner,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type AugmentationPoint__1 struct {
}

type AuthRequest__1 struct {
	*PinPhraseQuestionType

	// When true, fulfullment of this Order requires additional Traveler authentication.

	AuthenticationInd bool `xml:"AuthenticationInd,attr,omitempty"`

	// When true, the maximum Authentication attempts have been exceeded.

	MaximumTrxInd bool `xml:"MaximumTrxInd,attr,omitempty"`

	// When true, the Authentication transaction should be resent.

	RetryInd bool `xml:"RetryInd,attr,omitempty"`
}

type BagCharge__1 struct {

	// The baggage charge type by RFISC for the applicable baggage charge.

	Type *AlphaNumericStringLength1to3 `xml:"Type,attr,omitempty"`

	// The baggage charge amount which is applied to the 1st and 2nd checked bag.

	Amount *NumericStringLength1to19 `xml:"Amount,attr,omitempty"`

	// The currency code for payment of a baggage charge. Use ISO 4217, three alpha code.

	CurrencyCode *AlphaLength3 `xml:"CurrencyCode,attr,omitempty"`
}

type BagDetails__1 struct {
	BagDetail []*BagDetail__1 `xml:"BagDetail,omitempty"`
}

type BagDetails__2 struct {
	BagDetail []*BagDetail__2 `xml:"BagDetail,omitempty"`
}

type BagDisclosure__1 struct {

	// US Department of Transportation (DOT) Reservation or Disclosure baggage rule.
	// Examples: Y, Disclosure AND US DOT Reservation
	BagRule *BagDiscloseRuleSimpleType `xml:"BagRule,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	// If True: Additional Taxes, Fees and Charges may be collected at check-in (regionally determined).

	CheckInTFC_ApplicableInd bool `xml:"CheckInTFC_ApplicableInd,attr,omitempty"`

	// If True, The ORA advises the POA that the POA is given the Baggage Determining Carrier designation

	DeferralInd bool `xml:"DeferralInd,attr,omitempty"`

	// Bi-lateral agreement identifier, i.e. - baggage cost, Baggage Determining Carrier, etc.

	CommercialAgreementID string `xml:"CommercialAgreementID,attr,omitempty"`

	// Allows POA to tell the ORA if the ORA may alter the POA’s pre-paid baggage charges
	//
	// If True: prepaid charge may NOT be altered
	// If False: prepaid charge MAY be altered

	FixedPrePaidInd bool `xml:"FixedPrePaidInd,attr,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type BaggageAllowanceList__1 struct {
	BaggageAllowance []*BaggageAllowance__1 `xml:"BaggageAllowance,omitempty"`
}

type BaggageCharge__1 struct {
	OrderID *OrderID `xml:"OrderID,omitempty"`

	TotalPrice *TotalPrice__3 `xml:"TotalPrice,omitempty"`

	OriginDestination []*OriginDestination__4 `xml:"OriginDestination,omitempty"`

	USDOT *USDOT__2 `xml:"USDOT,omitempty"`
}

type BankID__1 struct {
	Value *ContextSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BilateralTimeLimit__1 struct {

	// Bilateral Time Limit name.  Example: Other Time Limit
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Bilateral Time Limit name.  Example: Other Time Limit
	Description *DescriptionSimpleType `xml:"Description,omitempty"`

	// Date and time. Example: 2017-01-03T13:20:00

	DateTime string `xml:"DateTime,attr,omitempty"`

	// Short date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)

	ShortDate string `xml:"ShortDate,attr,omitempty"`

	// Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Time. Example: 14:00
	//
	// [Encoding Scheme] ISO 8601 Military/ 24 Hour (HH:MM)

	Time *TimeSimpleType `xml:"Time,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type BookingInstructions__1 struct {

	// Passenger assistance SSR code value.
	// Examples:
	// EXST (EXTRA SEAT REQUIRED)
	// INFT (INFANT ACCOMPANYING ADULT PASSENGER)
	// PETC (PASSENGER TRAVELING WITH PET IN CABIN)
	// UMNR (UNACCOMPANIED MINOR)
	//
	// For maximum interoperability, it is recommended that IATA (four character) Special Service Request (SSR) Code values be used. Select an enumerated value from the list of enter a four character SSR code string.
	//
	// =notes=
	// 1. Although optional in the schema, some SSR codes may require associated description elements.
	SSRCode []string `xml:"SSRCode,omitempty"`

	// Other service information (OSI) text.
	// Example: PAX VIP MEMBER OF PARLIAMENT
	OSIText []string `xml:"OSIText,omitempty"`

	// PNR booking method.
	// Example: AE (BY SSR - SPECIAL SERVICE REQUEST)
	//
	// For maximum interoperability, refer to IATA PADIS Code List for data element 9750. Select a code value or enter a value that is bilaterally agreed upon between trading partners.
	Method string `xml:"Method,omitempty"`

	UpgradeMethod *UpgradeMethod__1 `xml:"UpgradeMethod,omitempty"`

	// Data center instructions.
	Text []string `xml:"Text,omitempty"`

	// Aircraft equipment information.
	Equipment string `xml:"Equipment,omitempty"`
}

type BookingInstructions__2 struct {

	// Passenger assistance SSR code value.
	// Examples:
	// EXST (EXTRA SEAT REQUIRED)
	// INFT (INFANT ACCOMPANYING ADULT PASSENGER)
	// PETC (PASSENGER TRAVELING WITH PET IN CABIN)
	// UMNR (UNACCOMPANIED MINOR)
	//
	// For maximum interoperability, it is recommended that IATA (four character) Special Service Request (SSR) Code values be used. Select an enumerated value from the list of enter a four character SSR code string.
	//
	// =notes=
	// 1. Although optional in the schema, some SSR codes may require associated description elements.
	SSRCode []string `xml:"SSRCode,omitempty"`

	// Other service information (OSI) text.
	// Example: PAX VIP MEMBER OF PARLIAMENT
	OSIText []string `xml:"OSIText,omitempty"`

	// PNR booking method.
	// Example: AE (BY SSR - SPECIAL SERVICE REQUEST)
	//
	// For maximum interoperability, refer to IATA PADIS Code List for data element 9750. Select a code value or enter a value that is bilaterally agreed upon between trading partners.
	Method string `xml:"Method,omitempty"`

	UpgradeMethod *UpgradeMethod__2 `xml:"UpgradeMethod,omitempty"`

	// Data center instructions.
	Text []string `xml:"Text,omitempty"`

	// Aircraft equipment information.
	Equipment string `xml:"Equipment,omitempty"`
}

type Breakdown__1 struct {
	Fee []*Fee__1 `xml:"Fee,omitempty"`
}

type Breakdown__2 struct {
	Tax []*Tax__2 `xml:"Tax,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Budget__1 struct {
	GroupBudget *GroupBudget `xml:"GroupBudget,omitempty"`

	PerPersonBudget *PerPersonBudget `xml:"PerPersonBudget,omitempty"`
}

type CabinDesignator__1 struct {
	Value *Flight_COS_SimpleType `xml:",chardata"`

	// When true indicates that it applies to all Cabins, otherwise the specified Cabin applies.

	AllCabins bool `xml:"AllCabins,attr,omitempty"`
}

type CardFields__1 struct {
	FieldName []*FieldName__2 `xml:"FieldName,omitempty"`
}

type CardHolderBillingAddress__1 struct {
	*StructuredAddrType
}

type CardHolderName__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CardHolderName__2 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CardIssuerName__1 struct {

	// Issuer Name. Example: Bank of America
	//
	// Note: This is the name of bank or organization issuing the card (e.g., alumni association, bank, fraternal organization, etc.).
	BankID *ProperNameSimpleType `xml:"BankID,omitempty"`
}

type CardIssuerName__2 struct {

	// Issuer Name. Example: Bank of America
	//
	// Note: This is the name of bank or organization issuing the card (e.g., alumni association, bank, fraternal organization, etc.).
	BankID *ProperNameSimpleType `xml:"BankID,omitempty"`
}

type CardNumber__1 struct {
	Value *PayCardNmbrSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CardholderAddress__1 struct {
	SimpleAddress *SimpleAddress `xml:"SimpleAddress,omitempty"`

	StructuredAddress *StructuredAddress `xml:"StructuredAddress,omitempty"`

	PaymentAddress *PaymentAddress `xml:"PaymentAddress,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CarrierFees__1 struct {
	Fee []*Fee__2 `xml:"Fee,omitempty"`
}

type Carriers__1 struct {
	Carrier *Carrier__1 `xml:"Carrier,omitempty"`
}

type CarryOnAllowableBag__1 struct {

	// The determining carrier code of the carry-on allowance baggage type.

	DeterminingCarrierCode *AirlineType `xml:"DeterminingCarrierCode,attr,omitempty"`

	// The permitted baggage type by RFISC for the carry-on baggage allowance.

	Type *AlphaNumericStringLength1to3 `xml:"Type,attr,omitempty"`

	// The maximum number of each allowable baggage type.

	Number *Numeric0to99 `xml:"Number,attr,omitempty"`
}

type CarryOnBag__1 struct {
	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	// In concert with BaggageDeterminingCarrier data field, specifies the reason for the carrier code.
	//
	// Encoding Scheme: IATA PADIS Code List for data element RES.
	BDC_AnalysisResult *IATA_CodeType `xml:"BDC_AnalysisResult,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CarryOnChargeableBag__1 struct {
	Embargo *Embargo__1 `xml:"Embargo,omitempty"`

	// The permitted baggage type by RFISC for the carry-on baggage allowance.

	Type *AlphaNumericStringLength1to3 `xml:"Type,attr,omitempty"`

	// The baggage charge amount which is applied to the 1st and 2nd checked bag.

	Amount *NumericStringLength1to19 `xml:"Amount,attr,omitempty"`

	// The currency code for payment of a baggage charge. Use ISO 4217, three alpha code.

	CurrencyCode *AlphaLength3 `xml:"CurrencyCode,attr,omitempty"`

	// The maximum linear dimensions of the baqggage follwed by centimeters 'C' or inches 'I'.

	MaxBagDim *AlphaNumericStringLength1to4 `xml:"MaxBagDim,attr,omitempty"`

	// The maximum baggage weight followed by kilos 'K' or pounds 'L'.

	MaxBagWght *AlphaNumericStringLength1to3 `xml:"MaxBagWght,attr,omitempty"`
}

type CarryOnFree__1 struct {

	// The maximum linear dimensions of the baqggage follwed by centimeters 'C' or inches 'I'.

	MaxBagDim *AlphaNumericStringLength1to4 `xml:"MaxBagDim,attr,omitempty"`

	// The maximum baggage weight followed by kilos 'K' or pounds 'L'.

	MaxBagWght *AlphaNumericStringLength1to3 `xml:"MaxBagWght,attr,omitempty"`
}

type Certificates__1 struct {
	CertificateNumber []*CertificateNumber__1 `xml:"CertificateNumber,omitempty"`
}

type Certificates__2 struct {
	CertificateNumber []*CertificateNumber__2 `xml:"CertificateNumber,omitempty"`
}

type Challenge__1 struct {

	// URL to source location for authentication service, instructions, etc.
	SourceURL string `xml:"SourceURL,omitempty"`

	Parameters *Parameters__4 `xml:"Parameters,omitempty"`
}

type Characteristic__1 struct {
	NonStopPreferences *NonStopPreferences__1 `xml:"NonStopPreferences,omitempty"`

	DirectPreferences *DirectPreferences__1 `xml:"DirectPreferences,omitempty"`

	OvernightStopPreferences *OvernightStopPreferences__1 `xml:"OvernightStopPreferences,omitempty"`

	AirportChangePreferences *AirportChangePreferences__1 `xml:"AirportChangePreferences,omitempty"`

	RedEyePreferences *RedEyePreferences__1 `xml:"RedEyePreferences,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Characteristics__1 struct {
	Characteristic []*Characteristic__2 `xml:"Characteristic,omitempty"`
}

type CheckNumber__1 struct {
}

type CheckedBag__1 struct {
	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	// In concert with BaggageDeterminingCarrier data field, specifies the reason for the carrier code.
	//
	// Encoding Scheme: IATA PADIS Code List for data element RES.
	BDC_AnalysisResult *IATA_CodeType `xml:"BDC_AnalysisResult,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CheckedChargeableBag__1 struct {
	Embargo *Embargo__2 `xml:"Embargo,omitempty"`

	// The permitted baggage type by RFISC for the checked baggage allowance.

	Type *AlphaNumericStringLength1to3 `xml:"Type,attr,omitempty"`

	// The baggage charge amount which is applied to the 1st and 2nd checked bag.

	Amount *NumericStringLength1to19 `xml:"Amount,attr,omitempty"`

	// The currency code for payment of a baggage charge. Use ISO 4217, three alpha code.

	CurrencyCode *AlphaLength3 `xml:"CurrencyCode,attr,omitempty"`

	// The maximum linear dimensions of the baqggage follwed by centimeters 'C' or inches 'I'.

	MaxBagDim *AlphaNumericStringLength1to4 `xml:"MaxBagDim,attr,omitempty"`

	// The maximum baggage weight followed by kilos 'K' or pounds 'L'.

	MaxBagWght *AlphaNumericStringLength1to3 `xml:"MaxBagWght,attr,omitempty"`
}

type CheckedFree__1 struct {

	// The maximum linear dimensions of the baqggage follwed by centimeters 'C' or inches 'I'.

	MaxBagDim *AlphaNumericStringLength1to4 `xml:"MaxBagDim,attr,omitempty"`

	// The maximum baggage weight followed by kilos 'K' or pounds 'L'.

	MaxBagWght *AlphaNumericStringLength1to3 `xml:"MaxBagWght,attr,omitempty"`
}

type City__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type ClassesOfService__1 struct {
	ClassOfService *ClassOfService `xml:"ClassOfService,omitempty"`
}

type Classes__1 struct {
	ClassOfService []*ClassOfService `xml:"ClassOfService,omitempty"`
}

type Code__1 struct {
	Value *CodesetValueSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type Code__2 struct {
	Value *SpecialSrvcSimpleType `xml:",chardata"`
}

type Code__3 struct {
	Value *Flight_COS_SimpleType `xml:",chardata"`

	// Inidcates how many seats are still available in this class of service.

	SeatsLeft int32 `xml:"SeatsLeft,attr,omitempty"`
}

type Code__4 struct {
	Value *CodesetValueSimpleType `xml:",chardata"`
}

type Column__1 struct {

	// Column position value.
	// Example: C
	Position *CodesetValueSimpleType `xml:"Position,omitempty"`

	// Icon placement (in orientation to cabin row or column).
	//
	// Examples:
	// FRO (Place icon before row)
	// INL (Place icon inline with row or column)
	// LEF (Place icon left of column)
	// REA (Place icon behind row)
	// RIG (Place icon right of column)
	//
	// Encoding Scheme: IATA PADIS code list COT - Camera Orientation Type
	Orientation *IATA_CodeType `xml:"Orientation,omitempty"`
}

type Combination__1 struct {

	// Service Combination Rule.
	// Examples: Permitted, NotPermitted, Other
	Rule *SrvcCombineRuleSimpleType `xml:"Rule,omitempty"`

	ServiceID []*ServiceID `xml:"ServiceID,omitempty"`

	ServiceReference []*ServiceReference `xml:"ServiceReference,omitempty"`
}

type CompanyIndex__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CompanyIndex__2 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Connection__1 struct {
	Codes *Codes__1 `xml:"Codes,omitempty"`

	// Maximum number of connections. Example: 2
	MaxNumber int32 `xml:"MaxNumber,omitempty"`

	// Maximum connection time preference. Example: PT360M
	MaxTime string `xml:"MaxTime,omitempty"`

	// Minimum connection time preference. Example: PT90M
	MinTime string `xml:"MinTime,omitempty"`

	Interline *Interline__1 `xml:"Interline,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ContactProvided__1 struct {

	// The email address which should be used for contact purposes.
	EmailAddress []*EmailAddressType `xml:"EmailAddress,omitempty"`

	// A telephone number is a sequence of digits assigned to a fixed-line telephone subscriber station connected to a telephone line or to a wireless electronic telephony device, such as a radio telephone or a mobile telephone, or to other devices for data transmission via the public switched telephone network (PSTN) or other private networks.
	//
	Phone []*PhoneTypeAIDM `xml:"Phone,omitempty"`
}

type Contact__1 struct {
	AddressContact *AddressContact `xml:"AddressContact,omitempty"`

	EmailContact *EmailContact `xml:"EmailContact,omitempty"`

	OtherContactMethod *OtherContactMethod `xml:"OtherContactMethod,omitempty"`

	PhoneContact *PhoneContact `xml:"PhoneContact,omitempty"`

	Name *Name__11 `xml:"Name,omitempty"`

	// Type of contact. For e.g. Primary or Emergency contact.

	ContactType string `xml:"ContactType,attr,omitempty"`
}

type Contact__2 struct {
	*KeyObjectBaseType

	PhoneContact *PhoneContact `xml:"PhoneContact,omitempty"`

	OtherContactMethod *OtherContactMethod `xml:"OtherContactMethod,omitempty"`

	EmailContact *EmailContact `xml:"EmailContact,omitempty"`

	AddressContact *AddressContact `xml:"AddressContact,omitempty"`
}

type Contact__3 struct {
	AddressContact *AddressContact `xml:"AddressContact,omitempty"`

	EmailContact *EmailContact `xml:"EmailContact,omitempty"`

	OtherContactMethod *OtherContactMethod `xml:"OtherContactMethod,omitempty"`

	PhoneContact *PhoneContact `xml:"PhoneContact,omitempty"`
}

type ContentSource__1 struct {

	// XPath to element or attribute in the message.
	// Encoding Scheme: W3C xPath Notation
	NodePath string `xml:"NodePath,omitempty"`

	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	OtherID *OtherID__2 `xml:"OtherID,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type Contract__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Contract__2 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Conversion__1 struct {

	// Currency equivalent of redemption amount.  Example: 50000
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Redemption unit to currency ratio.  Example: 2:1 (two redemption units = one currency unit.)

	Ratio string `xml:"Ratio,omitempty"`
}

type Coordinates__1 struct {
	*PositionType

	CoordinateRadius *CoordinateRadius__1 `xml:"CoordinateRadius,omitempty"`
}

type CoreQuery__1 struct {
	Affinity *Affinity `xml:"Affinity,omitempty"`

	// ATTRIBUTE Query ORIGIN/ DESTINATION qualifiers and preferences.
	//
	// Note:
	// 1. An Attribute Query is a search specifying one or more attributes to get more focused results   Note that this node only contains Origin/ Destination Airport/ City code information which are mandatory.
	//
	// 2. Other Attribute Query parameters that may be specified (in other document nodes) include Aircraft Equipment preferences, Seat types and characteristics, Meal preferences and Special Need qualifiers.
	OriginDestinations *AirShopReqAttributeQueryType `xml:"OriginDestinations,omitempty"`

	FlightSpecific *FlightSpecific `xml:"FlightSpecific,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`
}

type Countries__1 struct {
	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`
}

type CountryCodes__1 struct {
	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`
}

type CouponType__1 struct {
	Value *SrvceCouponSimpleType `xml:",chardata"`
}

type CpnNbrs__1 struct {

	// Coupon number.

	CpnNbr int32 `xml:"CpnNbr,omitempty"`
}

type CurrCodes__1 struct {
	FiledInCurrency []*FiledInCurrency__1 `xml:"FiledInCurrency,omitempty"`
}

type CurrCodes__2 struct {
	CurrCode []*CurrCode `xml:"CurrCode,omitempty"`
}

type Currencies__1 struct {
	CurrCode []*CurrCode `xml:"CurrCode,omitempty"`
}

type DataLists__1 struct {
	PassengerList *PassengerList__1 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__1 `xml:"ContactList,omitempty"`
}

type DataLists__10 struct {
	PassengerList *PassengerList__2 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__2 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__2 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__2 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__2 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__2 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__2 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__1 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__1 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__1 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__11 struct {
	PassengerList *PassengerList__3 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__3 `xml:"ContactList,omitempty"`
}

type DataLists__12 struct {
	*DataListType

	PassengerList *PassengerList__4 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__4 `xml:"ContactList,omitempty"`
}

type DataLists__13 struct {
	PassengerList *PassengerList__5 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__5 `xml:"ContactList,omitempty"`
}

type DataLists__14 struct {
	*DataListType

	PassengerList *PassengerList__6 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__6 `xml:"ContactList,omitempty"`
}

type DataLists__15 struct {
	*DataListType

	PassengerList *PassengerList__7 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__7 `xml:"ContactList,omitempty"`
}

type DataLists__16 struct {
	*DataListType

	PassengerList *PassengerList__8 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__8 `xml:"ContactList,omitempty"`
}

type DataLists__17 struct {
	PassengerList *PassengerList__9 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__9 `xml:"ContactList,omitempty"`
}

type DataLists__18 struct {
	PassengerList *PassengerList__10 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__10 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__3 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__3 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__3 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__3 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__3 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__2 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__2 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__2 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__19 struct {
	PassengerList *PassengerList__11 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__11 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__4 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__4 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__4 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__4 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__4 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__3 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__3 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__3 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__2 struct {
	PassengerList *PassengerList__12 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__12 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__5 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__5 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__5 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__5 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__5 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__4 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__4 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__4 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__3 struct {
	PassengerList *PassengerList__13 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__13 `xml:"ContactList,omitempty"`
}

type DataLists__4 struct {
	*DataListType

	PassengerList *PassengerList__14 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__14 `xml:"ContactList,omitempty"`
}

type DataLists__5 struct {
	PassengerList *PassengerList__15 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__15 `xml:"ContactList,omitempty"`
}

type DataLists__6 struct {
	PassengerList *PassengerList__16 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__16 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__6 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__6 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__6 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__6 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__6 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__5 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__5 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__5 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__7 struct {
	PassengerList *PassengerList__17 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__17 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__7 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__7 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__7 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__7 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__7 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__6 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__6 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__6 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__8 struct {
	PassengerList *PassengerList__18 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__18 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__8 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__8 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__8 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__8 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__8 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__7 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__7 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__7 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__9 struct {
	PassengerList *PassengerList__19 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__19 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__9 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__9 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__9 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__9 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__9 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__8 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__8 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__8 `xml:"SeatDefinitionList,omitempty"`
}

type DateTimes__1 struct {
	DateTime *DateTime__1 `xml:"DateTime,omitempty"`
}

type Date__1 struct {
	Value string `xml:",chardata"`

	// Order Reservation (booking) Time.  Example: 13:20

	Time *TimeSimpleType `xml:"time,attr,omitempty"`
}

type DayQuantity__1 struct {
	Value int32 `xml:",chardata"`

	// Restriction context. Example: EARLIEST, LATEST, Other

	Context *AdvPurchaseSimpleType `xml:"Context,attr,omitempty"`
}

type DayQuantity__2 struct {
	Value int32 `xml:",chardata"`

	// Restriction context. Example: EARLIEST, LATEST, Other

	Context *AdvPurchaseSimpleType `xml:"Context,attr,omitempty"`
}

type DepartureDateTime__1 struct {
	*CoreDateGrpType
}

type DepartureDateTime__2 struct {
	*CoreDateGrpType
}

type Desc1__1 struct {

	// =sample values=
	// 05 = up to 5 kg
	// 1Y = One Year
	// AI = Aisle
	// B1 = First Bag
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Description code text.
	// Example: UP TO 5 KG
	Text *DescriptionSimpleType `xml:"Text,omitempty"`
}

type Desc2__1 struct {

	// Description code.
	// Example: HT (HOT)
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Description code text.
	// Example: HOT
	Text *DescriptionSimpleType `xml:"Text,omitempty"`
}

type DescriptionList__1 struct {
	Description *Description `xml:"Description,omitempty"`
}

type Description__1 struct {
	Value *ShortDescSimpleType `xml:",chardata"`
}

type Description__2 struct {
	*DescriptionType

	// Description Application.  Examples: SEAT 3B, Discount 15P
	Application *ContextSimpleType `xml:"Application,omitempty"`
}

type Descriptions__1 struct {

	// Policy Description, including text and link.
	Description []*LinkDescriptionType `xml:"Description,omitempty"`
}

type Detail__1 struct {
	SupportedDomain []*SupportedDomain__1 `xml:"SupportedDomain,omitempty"`

	// Encoding Scheme Name. Example: Optional Service Encoding

	SchemeName *ProperNameSimpleType `xml:"SchemeName,attr,omitempty"`

	// Vocabulary Purpose. Example: Optional Service Encoding

	SchemePurpose *ApplicationSimpleType `xml:"SchemePurpose,attr,omitempty"`

	// Encoding Scheme Source Location URI.

	Scheme_URI string `xml:"Scheme_URI,attr,omitempty"`

	// Encoding Scheme Version. Example: 1.7

	SchemeVersion *CodesetValueSimpleType `xml:"SchemeVersion,attr,omitempty"`
}

type Detail__2 struct {

	// Net Reporting Code.
	//
	// Note: This is a code indicating if the transaction is subject to a net reporting arrangement.

	NetReportingCode string `xml:"NetReportingCode,omitempty"`

	// Statistical code.
	//
	// Note; This is used for domestic or international sales differentiation.

	StatisticalCode string `xml:"StatisticalCode,omitempty"`

	TourCode *TourCode `xml:"TourCode,omitempty"`

	CountryCode *CountryCode `xml:"CountryCode,omitempty"`

	// The two/three character IATA assigned code identifying the system used to price the itinerary for the document being issued.
	PricingSystemCode *AlphaNumericStringLength1to3 `xml:"PricingSystemCode,omitempty"`
}

type Detail__3 struct {
	ServiceCombinations *ServiceCombinations `xml:"ServiceCombinations,omitempty"`

	ServiceCoupon *ServiceCoupon `xml:"ServiceCoupon,omitempty"`

	ServiceFulfillment *ServiceFulfillment `xml:"ServiceFulfillment,omitempty"`

	ServiceItemQuantityRules *ServiceItemQuantityRules `xml:"ServiceItemQuantityRules,omitempty"`
}

type Detail__4 struct {
	ServiceCombinations *ServiceCombinations `xml:"ServiceCombinations,omitempty"`

	ServiceCoupon *ServiceCoupon `xml:"ServiceCoupon,omitempty"`

	ServiceFulfillment *ServiceFulfillment `xml:"ServiceFulfillment,omitempty"`

	ServiceItemQuantityRules *ServiceItemQuantityRules `xml:"ServiceItemQuantityRules,omitempty"`
}

type Details__1 struct {
	Detail []*Detail__5 `xml:"Detail,omitempty"`
}

type Details__2 struct {
	Detail []*Detail__6 `xml:"Detail,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Details__3 struct {

	// 3DS Transaction Timestamp. Example: 2015-01-13T13:59:38Z
	TrxTimestamp *TimestampRepType `xml:"TrxTimestamp,omitempty"`

	ClientType *ClientType__1 `xml:"ClientType,omitempty"`

	CustomerDevice *CustomerDevice__1 `xml:"CustomerDevice,omitempty"`

	Currency *Currency__1 `xml:"Currency,omitempty"`

	ReservationInfo *ReservationInfo `xml:"ReservationInfo,omitempty"`

	TxnDatas *TxnDatas__1 `xml:"TxnDatas,omitempty"`
}

type Details__4 struct {
	SubTotal *SubTotal__2 `xml:"SubTotal,omitempty"`

	Detail []*Detail__7 `xml:"Detail,omitempty"`
}

type Device__1 struct {
	*DeviceType

	Position *Position `xml:"Position,omitempty"`
}

type Device__2 struct {
	*DeviceType

	Position *Position `xml:"Position,omitempty"`
}

type Dimensions__1 struct {

	// Baggage dimensions category.
	// Examples: Length, Height, Width
	Category *BagDimensionSimpleType `xml:"Category,omitempty"`

	// Maximum dimension value.  Example: 30
	MaxValue float64 `xml:"MaxValue,omitempty"`

	MinValue *MinValue__1 `xml:"MinValue,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Dimensions__2 struct {

	// Dimension Unit of Measure.  Example: Pixels
	UOM *ImageUnitSimpleType `xml:"UOM,omitempty"`

	// Height in specified units.  Example: 120
	Height *CodesetValueSimpleType `xml:"Height,omitempty"`

	// Width in specified units.  Example: 120
	Width *CodesetValueSimpleType `xml:"Width,omitempty"`

	// "The “Format” is the “CREATIVE UNIT NAME”, Example: (Billboard, Filmstrip, Portrait, Pushdown, Medium Rectangle, Rectangle, Half Page ,…) IATA codeset MDF. Please refer to http://www.iab.com/wp-content/uploads/2015/11/IAB_Display_Mobile_Creative_Guidelines_HTML5_2015.pdf"
	Format *IATA_CodeType `xml:"Format,omitempty"`
}

type Directions__1 struct {
	Direction []*Direction `xml:"Direction,omitempty"`
}

type Directions__2 struct {
	Direction []*Direction `xml:"Direction,omitempty"`
}

type Disclosures__1 struct {

	// Plain Text or Rich Media Disclosure Description(s).
	Description []*DescriptionType `xml:"Description,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type Distance__1 struct {

	// Total Flight Distance Value and distance unit of measure. Example: 8,5467
	Value int32 `xml:"Value,omitempty"`

	// Flight Distance Unit of Measure. Examples: Kilometers, Miles
	UOM *DistanceUnitSimpleType `xml:"UOM,omitempty"`
}

type Earliest__1 struct {
	*CoreDateGrpType
}

type EffectiveDatePeriod__1 struct {
	*DatePeriodRepType

	// Effective period duration. Example: P3M
	//
	// Note: This maybe used in combination with the Effective date, versus specifying an Expiration date.
	Duration string `xml:"Duration,omitempty"`
}

type EffectiveDateTimePeriod__1 struct {
	*DateTimePeriodRepType

	// Effective period duration. Example: P3M
	//
	// Note: This maybe used in combination with the Effective date, versus specifying an Expiration date.
	Duration string `xml:"Duration,omitempty"`
}

type EffectiveExpireDate__1 struct {

	// Voucher Effective Date. Example: 2017-01-13
	Effective string `xml:"Effective,omitempty"`

	// Voucher Expiration date. Example: 2017-06-13
	Expiration string `xml:"Expiration,omitempty"`
}

type EffectiveExpireDate__2 struct {

	// Payment Card Effective Date. Example: 0116
	Effective *PayCardDateSimpleType `xml:"Effective,omitempty"`

	// Payment Card Expiration Date. Example: 0119
	Expiration *PayCardDateSimpleType `xml:"Expiration,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type EffectiveExpireDate__3 struct {

	// Payment Card Effective Date. Example: 0116
	Effective *PayCardDateSimpleType `xml:"Effective,omitempty"`

	// Payment Card Expiration Date. Example: 0119
	Expiration *PayCardDateSimpleType `xml:"Expiration,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type EffectiveExpireDate__4 struct {

	// Voucher Effective Date. Example: 2017-01-13
	Effective string `xml:"Effective,omitempty"`

	// Voucher Expiration date. Example: 2017-06-13
	Expiration string `xml:"Expiration,omitempty"`
}

type EffectivePeriod__1 struct {
	DatePeriod *DatePeriod `xml:"DatePeriod,omitempty"`

	DateTimePeriod *DateTimePeriod `xml:"DateTimePeriod,omitempty"`

	QuarterPeriod *QuarterPeriod `xml:"QuarterPeriod,omitempty"`

	DayPeriod *DayPeriod `xml:"DayPeriod,omitempty"`

	MonthPeriod *MonthPeriod `xml:"MonthPeriod,omitempty"`

	YearPeriod *YearPeriod `xml:"YearPeriod,omitempty"`

	YearMonthPeriod *YearMonthPeriod `xml:"YearMonthPeriod,omitempty"`

	TimePeriod *TimePeriod `xml:"TimePeriod,omitempty"`
}

type EffectivePeriod__2 struct {
	YearPeriod *YearPeriod `xml:"YearPeriod,omitempty"`

	YearMonthPeriod *YearMonthPeriod `xml:"YearMonthPeriod,omitempty"`

	TimePeriod *TimePeriod `xml:"TimePeriod,omitempty"`

	QuarterPeriod *QuarterPeriod `xml:"QuarterPeriod,omitempty"`

	MonthPeriod *MonthPeriod `xml:"MonthPeriod,omitempty"`

	DayPeriod *DayPeriod `xml:"DayPeriod,omitempty"`

	DateTimePeriod *DateTimePeriod `xml:"DateTimePeriod,omitempty"`

	DatePeriod *DatePeriod `xml:"DatePeriod,omitempty"`
}

type Eligibility__1 struct {
	PassengerRefs *PassengerRefs__2 `xml:"PassengerRefs,omitempty"`

	SegmentRefs *SegmentRefs__2 `xml:"SegmentRefs,omitempty"`

	PriceClassRefs string `xml:"PriceClassRefs,omitempty"`
}

type EmailAddress__1 struct {
	*EmailID_Type
}

type EnrollmentStatus__1 struct {
	Value *EnrollStatusSimpleType `xml:",chardata"`

	// Enrollment Status context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Entities__1 struct {

	// Exempt tax entity name.  Example: Military, IBM

	Entity *ProperNameSimpleType `xml:"Entity,omitempty"`
}

type EquivID__1 struct {
	EquivalentID_Key *EquivalentID_Key `xml:"EquivalentID_Key,omitempty"`

	// Equivalent ID value. Example: MYSRVC123
	ID_Value *UniqueStringID_SimpleType `xml:"ID_Value,omitempty"`

	// Airline designator or CRS code of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline or CRS Designator Code
	Owner *ProperNameSimpleType `xml:"Owner,omitempty"`

	// Association(s) between this metadata object and any metadata instance(s).

	Metarefs *InstanceClassRefSimpleType `xml:"metarefs,attr,omitempty"`

	// Object association(s) between this metadata object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// A globally unique identifier for this Metadata instance.

	MetadataKey string `xml:"MetadataKey,attr,omitempty"`
}

type Equivalent__1 struct {
}

type Equivalent__2 struct {
}

type ExcessBaggage__1 struct {

	// Excess Baggage Amount. Example: 100 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Unit of Measure Code. Example: W (Weight)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 5463 (Allowance or Charge Qualifier)
	UnitOfMeasureCode *IATA_CodeType `xml:"UnitOfMeasureCode,omitempty"`

	// Excess Baggage Unit Quantity. Example: 10
	Quantity float64 `xml:"Quantity,omitempty"`

	// Excess Baggage Unit of Measure. Example: Pounds
	//
	// Note: This is a standard unit of measure name (e.g., it could be generic such as metric or imperial or specific such as inches, feet, yards, miles, millimeters, centimeters, meters, kilometers- according to usage).

	UnitOfMeasure string `xml:"UnitOfMeasure,omitempty"`
}

type Exclusion__1 struct {

	// When true, do not return fares with minimum stay restrictions.
	NoMinStayInd bool `xml:"NoMinStayInd,omitempty"`

	// When true, do not return fares with maximum stay restrictions.
	NoMaxStayInd bool `xml:"NoMaxStayInd,omitempty"`

	// When true, do not return fares with advance purchase restrictions.
	NoAdvPurchaseInd bool `xml:"NoAdvPurchaseInd,omitempty"`

	// When true, do not return fares with penalties.
	NoPenaltyInd bool `xml:"NoPenaltyInd,omitempty"`
}

type FOID__1 struct {

	// ID form. Examples: PT (passport), CC (credit card), FF (frequent flyer), DL (drivers license)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 7365 - Processing indicator, coded
	Type *IATA_CodeType `xml:"Type,omitempty"`

	// FOID ID value. Example: NY122345
	ID *ContextSimpleType `xml:"ID,omitempty"`

	// Owner/ Issuer of FOID. Example: United State Department Of State
	Issuer *ProperNameSimpleType `xml:"Issuer,omitempty"`
}

type FareBasisCodes__1 struct {
	FareBasisCode *FareBasisCode `xml:"FareBasisCode,omitempty"`
}

type FareBasis__1 struct {
	FareBasisCode *FareBasisCode `xml:"FareBasisCode,omitempty"`

	FareRulesRemarks *FareRulesRemarks `xml:"FareRulesRemarks,omitempty"`

	FareBasisCityPair *FareBasisCityPair `xml:"FareBasisCityPair,omitempty"`

	// Reservation Booking Designator or Booking Class e.g. T
	RBD string `xml:"RBD,omitempty"`

	CabinType *CabinType__1 `xml:"CabinType,omitempty"`
}

type FareCodes__1 struct {
	Code []*Code__5 `xml:"Code,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type FareGroup__1 struct {
	Fare *Fare__1 `xml:"Fare,omitempty"`

	FareBasisCode *FareBasisCode__1 `xml:"FareBasisCode,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type FareIndicatorCode__1 struct {
	Value *IATA_CodeType `xml:",chardata"`

	// A component of this item has been priced using filed fare data;
	// True = Partially or All Filed
	// False or missing = All dynamic

	FiledFareInd bool `xml:"FiledFareInd,attr,omitempty"`
}

type FareIndicatorCode__2 struct {
	Value *FareIndicatorSimpleType `xml:",chardata"`
}

type FareRulesRemark__1 struct {

	// Fare rule category (associated with FareBasisCode.)
	// Example: ACC (Accompanied Travel)
	//
	// Encoding Scheme: IATA PADIS codeset FRC-Fare Rule Category
	Category *IATA_CodeType `xml:"Category,omitempty"`

	// Fare Rule Text.
	Text *DescriptionSimpleType `xml:"Text,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FareTariff__1 struct {
	Value string `xml:",chardata"`

	// Fare Type.

	FareType string `xml:"FareType,attr,omitempty"`
}

type Feature__1 struct {
	Value *IATA_CodeType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type FeeMethod__1 struct {
	Value string `xml:",chardata"`
}

type FeeMethod__2 struct {
	Value string `xml:",chardata"`
}

type Fees__1 struct {
	*FeeSurchargeType
}

type Fees__2 struct {
	*FeeSurchargeType
}

type Fees__3 struct {
	*FeeSurchargeType
}

type FiledFeeInfo__1 struct {

	// Filed Fee Amount. Example: 100 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Bankers Seller Rate. Example: 1.25
	//
	// Note: This is the BSR and/ or BBR used to convert the tax/fee/charge filed amount from the filed currency into the tax/fee/charge amount in currency of country of payment.

	BSR_Rate float64 `xml:"BSR_Rate,attr,omitempty"`
}

type FlightCouponData__1 struct {
	*CouponFlightSegmentType

	IntermediateStop *IntermediateStop__1 `xml:"IntermediateStop,omitempty"`

	// When true, a stopover is permitted.

	StopoverInd bool `xml:"StopoverInd,attr,omitempty"`

	// Used to indiccate when a transaction occurred due to a diversion en route.  Refer to IATA PADIS Code List for data element 1245.

	InvoluntaryIndCode *IATA_CodeType `xml:"InvoluntaryIndCode,attr,omitempty"`
}

type FlightList__1 struct {
	Flight []*Flight__6 `xml:"Flight,omitempty"`
}

type FlightNumbers__1 struct {
	FlightNumber *FlightNumber `xml:"FlightNumber,omitempty"`
}

type FlightSegmentList__1 struct {

	// FlighSegment information. Contains details flight segment information.
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegment__1 struct {
	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	// Marketing Carrier information.
	MarketingAirline *MarketingCarrierFlightType `xml:"MarketingAirline,omitempty"`

	// Operating Carrier information.
	//
	// Note: This is the carrier that holds the Air Operator’s Certificate for the aircraft used for that flight.
	OperatingAirline *OperatingCarrierFlightType `xml:"OperatingAirline,omitempty"`

	// A globally unique identifier for this Flight Segment instance. Example: segment1

	SegmentKey *KeyIdentifier `xml:"SegmentKey,attr,omitempty"`
}

type Flight__1 struct {
	SegmentKey *SegmentKey `xml:"SegmentKey,omitempty"`

	Indicators *Indicators__1 `xml:"Indicators,omitempty"`

	Status *Status__6 `xml:"Status,omitempty"`

	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	// Marketing Carrier information.
	//
	// Notes: This is the carrier that sells with its own code as part of a code share agreement on a flight that is actually operated by another carrier.
	MarketingCarrier *MarketingCarrierFlightType `xml:"MarketingCarrier,omitempty"`

	OperatingCarrier *OperatingCarrier__5 `xml:"OperatingCarrier,omitempty"`

	Equipment *Equipment `xml:"Equipment,omitempty"`

	CabinType *CabinType `xml:"CabinType,omitempty"`

	ClassOfService *ClassOfService `xml:"ClassOfService,omitempty"`

	// Flight Details.
	Details *FlightDetailType `xml:"Details,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__2 struct {
	*FlightType
}

type Flight__3 struct {

	// When true, this Baggage Offer applies to all specified flights.
	AllFlightInd bool `xml:"AllFlightInd,omitempty"`

	// When true, this Baggage Offer applies to all specified flight Origin/ Destination Pairs.
	AllOriginDestinationInd bool `xml:"AllOriginDestinationInd,omitempty"`

	// When true, this Baggage Offer applies to all specified flight Segments.
	AllSegmentInd bool `xml:"AllSegmentInd,omitempty"`
}

type Flight__4 struct {

	// When true, this Baggage Offer applies to all specified flights.
	AllFlightInd bool `xml:"AllFlightInd,omitempty"`

	// When true, this Baggage Offer applies to all specified flight Origin/ Destination Pairs.
	AllOriginDestinationInd bool `xml:"AllOriginDestinationInd,omitempty"`

	// When true, this Baggage Offer applies to all specified flight Segments.
	AllSegmentInd bool `xml:"AllSegmentInd,omitempty"`
}

type Flight__5 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FormOfPayment__1 struct {
	Query *Query__21 `xml:"Query,omitempty"`

	Results *Results__6 `xml:"Results,omitempty"`
}

type Fulfillment__1 struct {
	OfferValidDates *OfferValidDates__2 `xml:"OfferValidDates,omitempty"`

	// Information about the company or party that will fulfill the service.
	Provider *FulfillmentPartnerType `xml:"Provider,omitempty"`

	Location *Location__3 `xml:"Location,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fulfillments__1 struct {
	Fulfillment []*Fulfillment__2 `xml:"Fulfillment,omitempty"`
}

type GroupCode__1 struct {
	Value *CodesetValueSimpleType `xml:",chardata"`
}

type GroupFare__1 struct {
	FareBasis []*FareBasis__2 `xml:"FareBasis,omitempty"`

	// Passenger Type Code. Example: ADT
	//
	// Encoding Scheme: IATA (three character) Passenger Type Code (PTC)
	PTC *PaxSimpleType `xml:"PTC,omitempty"`
}

type Group__1 struct {

	// Service Group code.
	//
	// BD (BUNDLED SERVICE)
	// BG (BAGGAGE)
	// IE (IN-FLIGHT ENTERTAINMENT)
	// LG (LOUNGE)
	//
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Service group description.
	// Example: BAGGAGE OPTIONS
	Text *DescriptionSimpleType `xml:"Text,omitempty"`
}

type Group__2 struct {
	PrimaryContact *PrimaryContact `xml:"PrimaryContact,omitempty"`
}

type Group__3 struct {
	PrimaryContact *PrimaryContact `xml:"PrimaryContact,omitempty"`
}

type Group__4 struct {
	PrimaryContact *PrimaryContact `xml:"PrimaryContact,omitempty"`
}

type Group__5 struct {
	PrimaryContact *PrimaryContact `xml:"PrimaryContact,omitempty"`
}

type Group__6 struct {
	PrimaryContact *PrimaryContact `xml:"PrimaryContact,omitempty"`
}

type Highest__1 struct {
	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ID__1 struct {
	Value *UniqueStringID_SimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`

	// Entity Name.

	Name *ProperNameSimpleType `xml:"Name,attr,omitempty"`
}

type Images__1 struct {

	// Image ID defined in root node MediaContent.
	// Examples:
	// IMG713
	// SFO_LOUNGE
	ImageID string `xml:"ImageID,omitempty"`

	// =notes=
	// 1. This is the desired position where camera icon or equivalent needs to be positioned on a seat map.
	Position *CabinCameraPosType `xml:"Position,omitempty"`
}

type Incentive__1 struct {

	// Rules engine offer ID.
	// Example: 0AR123
	OfferCodeID *CodesetValueSimpleType `xml:"OfferCodeID,omitempty"`

	ExpirationDate *ExpirationDate__1 `xml:"ExpirationDate,omitempty"`

	OfferSubCode *OfferSubCode__1 `xml:"OfferSubCode,omitempty"`

	// Quantity of available units.  Example: 4
	AvailableUnits int32 `xml:"AvailableUnits,omitempty"`

	DiscountLevel *DiscountLevel__1 `xml:"DiscountLevel,omitempty"`

	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Incentives__1 struct {
	*OfferIncentiveType
}

type IncompletePayment__1 struct {

	// In-complete Payment Status Code.
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 9321 (Application error, coded)
	//
	// Note: This status includes partially completed payments, payment verification required and failed payments.
	StatusCode *IATA_CodeType `xml:"StatusCode,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type Instruction__1 struct {
	*OfferInstructionType

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type InvGuaranteeTimeLimit__1 struct {
	*CoreDateGrpType
}

type Inventory__1 struct {

	// When true, inventory guarantee is requested for applicable Optional Services.
	//
	// Note: This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	GuaranteeInd bool `xml:"GuaranteeInd,omitempty"`
}

type Inventory__2 struct {

	// When true, inventory guarantee is requested for applicable Optional Services.
	//
	// Note: This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	GuaranteeInd bool `xml:"GuaranteeInd,omitempty"`
}

type Inventory__3 struct {

	// When true, inventory guarantee is requested for applicable Optional Services.
	//
	// Note: This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	GuaranteeInd bool `xml:"GuaranteeInd,omitempty"`
}

type Issuer__1 struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	AgencyID *AgencyID `xml:"AgencyID,omitempty"`

	PartnerID *PartnerID `xml:"PartnerID,omitempty"`
}

type KeywordPreferences__1 struct {
	KeywordPreference []*KeywordPreference__1 `xml:"KeywordPreference,omitempty"`
}

type Keywords__1 struct {
	KeyWord []*KeyWord `xml:"KeyWord,omitempty"`
}

type Keywords__2 struct {
	KeyWord []*KeyWord__1 `xml:"KeyWord,omitempty"`
}

type Languages__1 struct {
	LanguageCode []*LanguageCode `xml:"LanguageCode,omitempty"`
}

type Latest__1 struct {
	*CoreDateGrpType
}

type Latitude__1 struct {
	Value string `xml:",chardata"`

	// Latitude sign. Example: SOUTH (South of Meridian)

	Sign string `xml:"Sign,attr,omitempty"`

	// Latitude degree minute value. Example: 45

	Minute *ContextSimpleType `xml:"Minute,attr,omitempty"`

	// Latitude degree second value. Example: 30

	Second *ContextSimpleType `xml:"Second,attr,omitempty"`
}

type LeadPricing__1 struct {
	LeadDatePeriod *LeadDatePeriod `xml:"LeadDatePeriod,omitempty"`

	LeadTimePeriod *LeadTimePeriod `xml:"LeadTimePeriod,omitempty"`
}

type LeadPricing__2 struct {
	LeadDatePeriod *LeadDatePeriod `xml:"LeadDatePeriod,omitempty"`

	LeadTimePeriod *LeadTimePeriod `xml:"LeadTimePeriod,omitempty"`
}

type Link__1 struct {
	*CoreBaseType

	// Link Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`

	// Link Text. Example: Visit Program Benefits

	Text *ShortDescSimpleType `xml:"Text,attr,omitempty"`

	// Link Value. Example: www.thislink.com

	Value string `xml:"Value,attr,omitempty"`
}

type Links__1 struct {

	// Description Link. Example: thisairline.com/myLink
	Link []*LinkFormattedType `xml:"Link,omitempty"`
}

type Links__2 struct {
	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// =notes=
	// 1. This is the desired position where camera icon or equivalent needs to be positioned on a seat map.
	Position *CabinCameraPosType `xml:"Position,omitempty"`
}

type List__1 struct {
	AugPointAssoc []*AugPointAssoc__2 `xml:"AugPointAssoc,omitempty"`

	// Augmentation Point List Named Association(s).
	//
	// Note: This capability supports implementer-specified, or "Named", reference associations to other (target) instantiated objects with @Key, @GroupKey, @GroupTokenKey, @ListKey and @ListTokenKey attributes.
	NamedAssocs *NamedAssocType `xml:"NamedAssocs,omitempty"`

	// Globally Unique Group instance/ class Key.
	//
	// Example: {CA2016A0-0AE1-4E65-8EA6-0A16AE906596}

	ListKey *InstanceClassSimpleType `xml:"ListKey,attr,omitempty"`

	// List Name. Example: MyList

	ListName *ContextSimpleType `xml:"ListName,attr,omitempty"`

	// Source Entity Code or ID. Examples: BA, WIDGETCO

	Owner *OwnerSimpleType `xml:"Owner,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type LocationCode__1 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type LocationCode__2 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type Location__1 struct {
	CountryCode *CountryCode `xml:"CountryCode,omitempty"`

	CityCode *CityCode `xml:"CityCode,omitempty"`
}

type Location__2 struct {
	AirportFulfillmentLocation *AirportFulfillmentLocation `xml:"AirportFulfillmentLocation,omitempty"`

	OtherFulfillmentLocation *OtherFulfillmentLocation `xml:"OtherFulfillmentLocation,omitempty"`
}

type Longitude__1 struct {
	Value string `xml:",chardata"`

	// Longitude sign. Example: EAST (East of Meridian)

	Sign string `xml:"Sign,attr,omitempty"`

	// Longitude degree minute value. Example: 130

	Minute *ContextSimpleType `xml:"Minute,attr,omitempty"`

	// Longitude degree second value. Example: 69

	Second *ContextSimpleType `xml:"Second,attr,omitempty"`
}

type Lowest__1 struct {
	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MarketMessage__1 struct {
	*DescriptionType

	//
	// Business Warning Association(s), including Order, Order Item, Passenger, Group, Offer Item and Service.
	//
	Associations *MultiAssociationType `xml:"Associations,omitempty"`
}

type MarketingName__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Designator code for the cabin. Example: Y

	CabinDesignator string `xml:"CabinDesignator,attr,omitempty"`
}

type MarketingName__2 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type Marketing__1 struct {
	*SeatMapMessageType
}

type MaskedCardNumber__1 struct {
	Value *MaskedCardNmbrSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MaskedCardNumber__2 struct {
	Value *MaskedCardNmbrSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MatchResult__1 struct {
	Value *MatchResultsSimpleType `xml:",chardata"`
}

type Matches__1 struct {
	Match []*Match__1 `xml:"Match,omitempty"`
}

type MaxFlightTime__1 struct {

	// Travel time (unit) Value.
	// Example: 45, 45 (Minutes)

	TimeAmount float64 `xml:"TimeAmount,omitempty"`

	// Travel time unit of measure. Example: Minutes, Hours, Days

	UOM string `xml:"UOM,omitempty"`
}

type MaxLinear__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MaximumWeight__1 struct {

	// Maximum weight value.  Example: 50
	Value float64 `xml:"Value,omitempty"`

	// Baggage weight unit of measure.
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 6411
	UOM *IATA_CodeType `xml:"UOM,omitempty"`

	SpreadOverBagsQuantity int32 `xml:"SpreadOverBagsQuantity,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Meals__1 struct {

	// Meal served code. Example: B (Breakfast)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 7161 - Special Service, Coded
	Meal []*IATA_CodeType `xml:"Meal,omitempty"`
}

type MediaItems__1 struct {
	MediaItemReference *MediaItemReference `xml:"MediaItemReference,omitempty"`

	// Associated Media URL.
	MediaLink string `xml:"MediaLink,omitempty"`
}

type MediaSource__1 struct {

	// Media Code. Example: IMG123
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Media version. Example: 14
	Version *CodesetValueSimpleType `xml:"Version,omitempty"`

	// The media object file name.  Example: ThisPlane.swf
	FileName *ProperNameSimpleType `xml:"FileName,omitempty"`

	// Image barcode symbology applied. Example: PDF417
	Symbology *ContextSimpleType `xml:"Symbology,omitempty"`

	// Media object copyright.  Example: © COPYRIGHT IATA 2014
	Copyright *ShortDescSimpleType `xml:"Copyright,omitempty"`
}

type Media__1 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__2 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`

	Descriptions *Descriptions `xml:"Descriptions,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type MemberNumber__1 struct {
	Value *ContextSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MemberNumber__2 struct {
	Value *ContextSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MemberStatus__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Message__1 struct {
	*DescriptionType

	// Marketing Message Association(s).
	Associations *MarketMsgAssocType `xml:"Associations,omitempty"`
}

type Metadata__1 struct {
	*MetaBaseType

	// Remark(s).
	Remarks *RemarkType `xml:"Remarks,omitempty"`

	// Scheme Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`
}

type Metadata__10 struct {
	*FltPriceResMetadataType
}

type Metadata__11 struct {
	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`
}

type Metadata__2 struct {
	*MetaBaseType

	// Remark(s).
	Remarks []*RemarkType `xml:"Remarks,omitempty"`

	EncodingScheme *EncodingScheme__1 `xml:"EncodingScheme,omitempty"`

	ValidPeriod []*ValidPeriod__1 `xml:"ValidPeriod,omitempty"`

	// Policy Code or ID. Example: DATA1

	PolicyCode *CodesetValueSimpleType `xml:"PolicyCode,attr,omitempty"`
}

type Metadata__3 struct {
	*AirShopReqMetadataType
}

type Metadata__4 struct {
	*BagAllowResMetadataType
}

type Metadata__5 struct {
	*SrvListReqMetadataType
}

type Metadata__6 struct {
	*SrvListResMetadataType
}

type Metadata__7 struct {
	*FareRulesReqMetadataType
}

type Metadata__8 struct {
	*FareRulesResMetadataType
}

type Metadata__9 struct {
	*FltPriceReqMetadataType
}

type Method__1 struct {
	VoucherMethod *VoucherMethod `xml:"VoucherMethod,omitempty"`

	RedemptionMethod *RedemptionMethod `xml:"RedemptionMethod,omitempty"`

	PaymentCardMethod *PaymentCardMethod `xml:"PaymentCardMethod,omitempty"`

	OtherMethod *OtherMethod `xml:"OtherMethod,omitempty"`

	MiscChargeMethod *MiscChargeMethod `xml:"MiscChargeMethod,omitempty"`

	DirectBillMethod *DirectBillMethod `xml:"DirectBillMethod,omitempty"`

	CashMethod *CashMethod `xml:"CashMethod,omitempty"`

	BankAccountMethod *BankAccountMethod `xml:"BankAccountMethod,omitempty"`

	Check *Check `xml:"Check,omitempty"`
}

type Method__2 struct {
	Voucher *Voucher `xml:"Voucher,omitempty"`

	PaymentCard *PaymentCard `xml:"PaymentCard,omitempty"`

	Other *Other `xml:"Other,omitempty"`

	MiscChargeOrder *MiscChargeOrder `xml:"MiscChargeOrder,omitempty"`

	LoyaltyRedemption *LoyaltyRedemption `xml:"LoyaltyRedemption,omitempty"`

	DirectBill *DirectBill `xml:"DirectBill,omitempty"`

	Cash *Cash `xml:"Cash,omitempty"`

	BankAccount *BankAccount `xml:"BankAccount,omitempty"`

	Check *Check `xml:"Check,omitempty"`
}

type Method__3 struct {

	// Used to specify if this is the old, new, or orginal form of payment.
	//
	// Encoding Scheme: IATA  PADIS code list 9988 - Data Indicator
	Qualifier *IATA_CodeType `xml:"Qualifier,omitempty"`

	VoucherMethod *VoucherMethod `xml:"VoucherMethod,omitempty"`

	RedemptionMethod *RedemptionMethod `xml:"RedemptionMethod,omitempty"`

	PaymentCardMethod *PaymentCardMethod `xml:"PaymentCardMethod,omitempty"`

	OtherMethod *OtherMethod `xml:"OtherMethod,omitempty"`

	MiscChargeMethod *MiscChargeMethod `xml:"MiscChargeMethod,omitempty"`

	DirectBillMethod *DirectBillMethod `xml:"DirectBillMethod,omitempty"`

	CashMethod *CashMethod `xml:"CashMethod,omitempty"`

	BankAccountMethod *BankAccountMethod `xml:"BankAccountMethod,omitempty"`

	Check *Check `xml:"Check,omitempty"`

	Promotions *Promotions__5 `xml:"Promotions,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Method__4 struct {
	BankAccountMethod *BankAccountMethod `xml:"BankAccountMethod,omitempty"`

	CashMethod *CashMethod `xml:"CashMethod,omitempty"`

	DirectBillMethod *DirectBillMethod `xml:"DirectBillMethod,omitempty"`

	MiscChargeMethod *MiscChargeMethod `xml:"MiscChargeMethod,omitempty"`

	OtherMethod *OtherMethod `xml:"OtherMethod,omitempty"`

	PaymentCardMethod *PaymentCardMethod `xml:"PaymentCardMethod,omitempty"`

	RedemptionMethod *RedemptionMethod `xml:"RedemptionMethod,omitempty"`

	VoucherMethod *VoucherMethod `xml:"VoucherMethod,omitempty"`

	Check *Check `xml:"Check,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MinLinear__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type NameDetail__1 struct {

	// Given name prefix. Example: MR
	GivenNamePrefix *ProperNameSimpleType `xml:"GivenNamePrefix,omitempty"`

	// Title degree or honors. Examples: Ph.D., M.D.
	TitleSuffix *CodesetValueSimpleType `xml:"TitleSuffix,omitempty"`

	// Surname prefix. Examples: van der, von, de
	SurnamePrefix *CodesetValueSimpleType `xml:"SurnamePrefix,omitempty"`

	// Surname suffixes and letters. Examples: Jr., Sr., III, Ret., Esq.
	SurnameSuffix *CodesetValueSimpleType `xml:"SurnameSuffix,omitempty"`
}

type Name__1 struct {
	Surname *Surname__1 `xml:"Surname,omitempty"`

	Given *Given__1 `xml:"Given,omitempty"`

	// Name Title. Examples: MR, MRS, DR
	Title string `xml:"Title,omitempty"`

	SurnameSuffix *SurnameSuffix__1 `xml:"SurnameSuffix,omitempty"`

	Middle *Middle__1 `xml:"Middle,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type Name__2 struct {
	Surname *Surname__2 `xml:"Surname,omitempty"`

	Given *Given__2 `xml:"Given,omitempty"`

	Middle *Middle__2 `xml:"Middle,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type Name__3 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Name__4 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type Name__5 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type Name__6 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Name__7 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type Name__8 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type Name__9 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type NamedAssoc__1 struct {
	Group []*Group__7 `xml:"Group,omitempty"`

	List []*List__2 `xml:"List,omitempty"`

	UniqueKeyID []*UniqueKeyID__1 `xml:"UniqueKeyID,omitempty"`

	// Target Object Source Name.
	//
	// Example: PolicyList

	Target *ContextSimpleType `xml:"Target,attr,omitempty"`

	// A reference to the @Target OBJECT instance/ class Key.
	//
	// Example: 23D20750-1FFE-4EA7-A5CD-A4B9733A491B

	KeyRef *InstanceClassRefSimpleType `xml:"KeyRef,attr,omitempty"`

	// From Object Name.
	//
	// Example: FlightSegmentList

	From *ContextSimpleType `xml:"From,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type Nodes__1 struct {
	Node []*Node__1 `xml:"Node,omitempty"`
}

type Notice__1 struct {
	TaxExemptionNotice *TaxExemptionNotice `xml:"TaxExemptionNotice,omitempty"`

	ServiceFilterNotice *ServiceFilterNotice `xml:"ServiceFilterNotice,omitempty"`

	PricingParametersNotice *PricingParametersNotice `xml:"PricingParametersNotice,omitempty"`

	PriceVarianceNotice *PriceVarianceNotice `xml:"PriceVarianceNotice,omitempty"`

	PaymentRulesNotice *PaymentRulesNotice `xml:"PaymentRulesNotice,omitempty"`

	InventoryGuaranteeNotif *InventoryGuaranteeNotif `xml:"InventoryGuaranteeNotif,omitempty"`
}

type Notices__1 struct {
	*NoticeBaseType

	PricingParameters *PricingParameters__1 `xml:"PricingParameters,omitempty"`
}

type Number__1 struct {
	Value string `xml:",chardata"`

	// Phone number country code. Examples: 1, 01, +1

	CountryCode *CodesetValueSimpleType `xml:"CountryCode,attr,omitempty"`

	// Phone number area code.  Example: 813

	AreaCode *CodesetValueSimpleType `xml:"AreaCode,attr,omitempty"`

	// Phone extension number.  Examples: 1234, ext 1234

	Extension *ContextSimpleType `xml:"Extension,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferExpiration__1 struct {
	*CoreDateGrpType

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type OfferExpiration__2 struct {
	*CoreDateGrpType

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type OfferItemType__1 struct {
	BaggageItem []*BaggageItem `xml:"BaggageItem,omitempty"`

	DetailedFlightItem []*DetailedFlightItem `xml:"DetailedFlightItem,omitempty"`

	OtherItem []*OtherItem `xml:"OtherItem,omitempty"`

	SeatItem []*SeatItem `xml:"SeatItem,omitempty"`
}

type OfferItems__1 struct {
	OfferItemID []*OfferItemID `xml:"OfferItemID,omitempty"`
}

type OfferPrice__1 struct {

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`

	// A (detailed) CURRENCY-based Price with Price Break-down for Tax and/ or Fee information.
	DetailCurrencyPrice *DetailCurrencyPriceType `xml:"DetailCurrencyPrice,omitempty"`

	// Monetary value amount and currency code.
	EncodedCurrencyPrice *EncodedPriceType `xml:"EncodedCurrencyPrice,omitempty"`

	// A (simple) CURRENCY-based Price with NO taxes and/ or fees.
	// Examples: 100.00, 100, 100 (USD)
	SimpleCurrencyPrice *SimpleCurrencyPriceType `xml:"SimpleCurrencyPrice,omitempty"`
}

type OfferPrice__2 struct {
	*OfferPriceLeadType
}

type OfferPrice__3 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type OfferValidDates__1 struct {
	Start *Start__1 `xml:"Start,omitempty"`

	End *End__1 `xml:"End,omitempty"`
}

type Offer__1 struct {
	OfferReferences *OfferReferences `xml:"OfferReferences,omitempty"`
}

type Offer__2 struct {

	// The total price for all selected Offer Items (and respective quantities) for all passengers and segments associated with the respective Offer(s), as calculated by the seller system. Without adding any optional Offer Items, the value of this TotalOfferPrice should be that of the TotalPrice of the Offer(s) being referenced.
	TotalOfferPrice *SimpleCurrencyPriceType `xml:"TotalOfferPrice,omitempty"`

	OfferItem []*OfferItem__1 `xml:"OfferItem,omitempty"`

	// Reference to the OfferID of the selected Offer (either a standard Offer or an a-la-carte Offer) returned in a previous shopping response.

	OfferID string `xml:"OfferID,attr,omitempty"`

	// Designator of Airline that owns/ assigned these IDs. Examples: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code

	Owner string `xml:"Owner,attr,omitempty"`

	// Reference to unique shopping session response ID, as provided in the airline's previous shopping response.

	ResponseID string `xml:"ResponseID,attr,omitempty"`
}

type OffersGroup__1 struct {
	AllOffersSnapshot *AllOffersSnapshot `xml:"AllOffersSnapshot,omitempty"`

	AirlineOffers []*AirlineOffers__1 `xml:"AirlineOffers,omitempty"`
}

type OperatingCarrier__1 struct {
	*OperatingCarrierFlightType

	Disclosures *Disclosures `xml:"Disclosures,omitempty"`
}

type OperatingCarrier__2 struct {
	*OperatingCarrierFlightType

	Disclosures *Disclosures `xml:"Disclosures,omitempty"`
}

type OperatingCarrier__3 struct {
	*OperatingCarrierFlightType

	Disclosures *Disclosures `xml:"Disclosures,omitempty"`
}

type OperatingCarrier__4 struct {
	*OperatingCarrierFlightType

	Disclosures *Disclosures `xml:"Disclosures,omitempty"`
}

type OrderCancelParameters__1 struct {

	// Reason for cancellation.
	//
	// Encoding Scheme: IATA Padis Codeset REA
	Reason *IATA_CodeType `xml:"Reason,omitempty"`

	RefundFOP_Preference *RefundFOP_Preference__2 `xml:"RefundFOP_Preference,omitempty"`
}

type OrderItemDetail__1 struct {
	OrderCommision *OrderCommision `xml:"OrderCommision,omitempty"`

	OrderInstructions *OrderInstructions `xml:"OrderInstructions,omitempty"`
}

type OrderItem__1 struct {
	ItemStatus *ItemStatus `xml:"ItemStatus,omitempty"`

	PriceDetail *PriceDetail__2 `xml:"PriceDetail,omitempty"`

	Service []*Service__5 `xml:"Service,omitempty"`

	// Order item-associated Time Limit(s).
	TimeLimits *OrderItemTimeLimitsType `xml:"TimeLimits,omitempty"`

	InventoryGuarantee *InventoryGuarantee__1 `xml:"InventoryGuarantee,omitempty"`

	Disclosures *Disclosures `xml:"Disclosures,omitempty"`

	// Penalty information.
	Penalty *OrderPenaltyType `xml:"Penalty,omitempty"`

	OrderItemDetails *OrderItemDetails `xml:"OrderItemDetails,omitempty"`

	// Fare Detail, including Fare Component and Fare Rules.
	FareDetail []*FareDetailType `xml:"FareDetail,omitempty"`

	// The airline-assigned unique Order Item ID. Example: ORD769-A850-4EC4-8F46-02293F72D7E6

	OrderItemID string `xml:"OrderItemID,attr,omitempty"`

	// Airline designator or CRS code of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline or CRS Designator Code

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`

	// Timestamp. Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`

	// Deep linking into another site to complete the transaction.

	WebAddressID string `xml:"WebAddressID,attr,omitempty"`
}

type OrderItems__1 struct {
	OrderItemID []*OrderItemID `xml:"OrderItemID,omitempty"`
}

type OriginDestinationList__1 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestination__1 struct {
	*AssociatedObjectBaseType

	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	SegMaxTimePreferences *SegMaxTimePreferences `xml:"SegMaxTimePreferences,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	MarketingCarrierAirline *MarketingCarrierAirline `xml:"MarketingCarrierAirline,omitempty"`

	CalendarDates *CalendarDates__1 `xml:"CalendarDates,omitempty"`

	// A globally unique identifier for this OriginDestination instance. Example: origDest1

	OriginDestinationKey *KeyIdentifier `xml:"OriginDestinationKey,attr,omitempty"`
}

type OriginDestination__2 struct {
	*AssociatedObjectBaseType

	AirportCityDeparture *AirportCityDeparture `xml:"AirportCityDeparture,omitempty"`

	CountryDeparture *CountryDeparture `xml:"CountryDeparture,omitempty"`

	ReferencePointDeparture *ReferencePointDeparture `xml:"ReferencePointDeparture,omitempty"`

	StateProvDeparture *StateProvDeparture `xml:"StateProvDeparture,omitempty"`

	AirportCityArrival *AirportCityArrival `xml:"AirportCityArrival,omitempty"`

	CountryArrival *CountryArrival `xml:"CountryArrival,omitempty"`

	ReferencePointArrival *ReferencePointArrival `xml:"ReferencePointArrival,omitempty"`

	StateProvArrival *StateProvArrival `xml:"StateProvArrival,omitempty"`

	SegMaxTimePreferences *SegMaxTimePreferences `xml:"SegMaxTimePreferences,omitempty"`
}

type OriginDestination__3 struct {
	DepartureCode *DepartureCode `xml:"DepartureCode,omitempty"`

	ArrivalCode *ArrivalCode `xml:"ArrivalCode,omitempty"`

	CheckedBags *CheckedBags `xml:"CheckedBags,omitempty"`

	CarryOnBags *CarryOnBags `xml:"CarryOnBags,omitempty"`

	Services *Services__4 `xml:"Services,omitempty"`
}

type OriginalOrder__1 struct {
	PriceQuotes *PriceQuotes__1 `xml:"PriceQuotes,omitempty"`

	OriginalOrderID *UniqueID_SimpleType `xml:"OriginalOrderID,attr,omitempty"`

	// Airline Designator of airline that owns/ assigned this ID. Example: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Codes

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`

	// Deep linking into another site to complete the transaction.

	WebAddressID string `xml:"WebAddressID,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	MetadataRefs *InstanceClassRefSimpleType `xml:"MetadataRefs,attr,omitempty"`
}

type OriginalTransactionID__1 struct {
	Value string `xml:",chardata"`

	// ID or name of the source of this Transaction ID.  Examples: UA, ABC123
	//
	// Note: If this is an airline ID, use IATA/ A4A (two or three character) Airline Designator Code Encoding Scheme.

	Source *ProperNameSimpleType `xml:"source,attr,omitempty"`
}

type OriginalTransactionID__2 struct {
	Value string `xml:",chardata"`

	// ID or name of the source of this Transaction ID.  Examples: UA, ABC123
	//
	// Note: If this is an airline ID, use IATA 2 character or ICAO 3 letter  Airline Designator Code Encoding Scheme.
	//
	//

	Source *ProperNameSimpleType `xml:"source,attr,omitempty"`
}

type OtherAssociation__1 struct {

	// Named association type. Examples: Equipment, MediaGroup
	Type *COS_AssocListType `xml:"Type,omitempty"`

	// Associated object instance value. Example: mediagrp1
	ReferenceValue string `xml:"ReferenceValue,omitempty"`
}

type OtherAssociation__2 struct {

	// Named association type. Examples: CarryOnAllowance, MediaGroup
	Type *OtherAssocListType `xml:"Type,omitempty"`

	// Associated object instance value. Example: mediagrp1
	ReferenceValue string `xml:"ReferenceValue,omitempty"`
}

type OtherAssociation__3 struct {

	// Named association type. Examples: CarryOnAllowance, MediaGroup
	Type *OtherOrderAssocListType `xml:"Type,omitempty"`

	// Associated object instance value. Example: mediaGroup1
	ReferenceValue string `xml:"ReferenceValue,omitempty"`
}

type OtherAssociation__4 struct {
	Type *Type__2 `xml:"Type,omitempty"`

	// Associated object instance value. Example: mediagrp1
	ReferenceValue string `xml:"ReferenceValue,omitempty"`
}

type OtherID__1 struct {
	Value *UniqueStringID_SimpleType `xml:",chardata"`

	//
	// Object association(s) between this object and any other object or metadata instance(s).
	//

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	//
	// Object Metadata Association(s). Example: meta1 meta3
	//

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`

	// Entity Name.

	Name *ProperNameSimpleType `xml:"Name,attr,omitempty"`
}

type OtherIDs__1 struct {
	OtherID []*OtherID__3 `xml:"OtherID,omitempty"`
}

type OtherIDs__2 struct {
	OtherID []*OtherID__4 `xml:"OtherID,omitempty"`
}

type OtherLanguage__1 struct {
	LanguageCode *LanguageCode `xml:"LanguageCode,omitempty"`

	// Codeset table or list name.  Example: Data Element 9972-Originator Type
	Description *DescriptionSimpleType `xml:"Description,omitempty"`
}

type OtherLimits__1 struct {
	OtherLimit []*OtherLimit__1 `xml:"OtherLimit,omitempty"`
}

type OtherOffers__1 struct {
	Offer []*Offer__3 `xml:"Offer,omitempty"`

	ALaCarteOffer *ALaCarteOffer__3 `xml:"ALaCarteOffer,omitempty"`
}

type Other__1 struct {
	OtherMetadata []*OtherMetadata__1 `xml:"OtherMetadata,omitempty"`
}

type Other__10 struct {
	OtherMetadata []*OtherMetadata__2 `xml:"OtherMetadata,omitempty"`
}

type Other__11 struct {
	OtherMetadata []*OtherMetadata__3 `xml:"OtherMetadata,omitempty"`
}

type Other__12 struct {
	OtherMetadata []*OtherMetadata__4 `xml:"OtherMetadata,omitempty"`
}

type Other__13 struct {
	OtherMetadata []*OtherMetadata__5 `xml:"OtherMetadata,omitempty"`
}

type Other__14 struct {
	OtherMetadata []*OtherMetadata__6 `xml:"OtherMetadata,omitempty"`
}

type Other__15 struct {
	OtherMetadata []*OtherMetadata__7 `xml:"OtherMetadata,omitempty"`
}

type Other__16 struct {
	OtherMetadata []*OtherMetadata__8 `xml:"OtherMetadata,omitempty"`
}

type Other__17 struct {
	OtherMetadata []*OtherMetadata__9 `xml:"OtherMetadata,omitempty"`
}

type Other__18 struct {
	OtherMetadata []*OtherMetadata__10 `xml:"OtherMetadata,omitempty"`
}

type Other__19 struct {
	OtherMetadata []*OtherMetadata__11 `xml:"OtherMetadata,omitempty"`
}

type Other__2 struct {
	OtherMetadata []*OtherMetadata__12 `xml:"OtherMetadata,omitempty"`
}

type Other__20 struct {
	OtherMetadata []*OtherMetadata__13 `xml:"OtherMetadata,omitempty"`
}

type Other__3 struct {
	OtherMetadata []*OtherMetadata__14 `xml:"OtherMetadata,omitempty"`
}

type Other__4 struct {
	OtherMetadata []*OtherMetadata__15 `xml:"OtherMetadata,omitempty"`
}

type Other__5 struct {
	OtherMetadata []*OtherMetadata__16 `xml:"OtherMetadata,omitempty"`
}

type Other__6 struct {
	OtherMetadata []*OtherMetadata__17 `xml:"OtherMetadata,omitempty"`
}

type Other__7 struct {
	OtherMetadata []*OtherMetadata__18 `xml:"OtherMetadata,omitempty"`
}

type Other__8 struct {
	OtherMetadata []*OtherMetadata__19 `xml:"OtherMetadata,omitempty"`
}

type Other__9 struct {
	OtherMetadata []*OtherMetadata__20 `xml:"OtherMetadata,omitempty"`
}

type OutputFormat__1 struct {
	Value *ShortDescSimpleType `xml:",chardata"`
}

type Overview__1 struct {
	Value *DescriptionSimpleType `xml:",chardata"`
}

type Owner__1 struct {
}

type PIN__1 struct {
}

type Parameter__1 struct {

	// Rendering Parameter Name.
	Name *ShortDescSimpleType `xml:"Name,omitempty"`

	// Rendering Parameter Value.

	Value string `xml:"Value,omitempty"`
}

type Parameters__1 struct {
	*RenderingParameterType
}

type Parameters__2 struct {

	// The total number of fare components within the fare component calculation. Example: 2

	Quantity int32 `xml:"Quantity,attr,omitempty"`
}

type Parameters__3 struct {

	// Total Offer Items in this Offer. Example: 3
	TotalItemQuantity int32 `xml:"TotalItemQuantity,omitempty"`

	PTC_Priced []*PTC_Priced `xml:"PTC_Priced,omitempty"`

	// When true, this Offer applies to all Travelers.

	ApplyToAllInd bool `xml:"ApplyToAllInd,attr,omitempty"`

	// When true, this Offer must be redeemed, e.g. it cannot be purchased.
	//
	// Note: Taxes may still apply.

	RedemptionOnlyInd bool `xml:"RedemptionOnlyInd,attr,omitempty"`
}

type Partial__1 struct {
	Currency *Currency__2 `xml:"Currency,omitempty"`

	// Redemption amount and unit.
	// Example: 15000 Miles
	Redemption *AwardRedemptionType `xml:"Redemption,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Partial__2 struct {
	Currency *Currency__3 `xml:"Currency,omitempty"`

	// Redemption amount and unit.
	// Example: 15000 Miles
	Redemption *AwardRedemptionType `xml:"Redemption,omitempty"`
}

type Participants__1 struct {
	Participant []*Participant__1 `xml:"Participant,omitempty"`
}

type PassengerQuantity__1 struct {
	Value int32 `xml:",chardata"`
}

type PassengerRefs__1 struct {
	Value string `xml:",chardata"`
}

type Passenger__1 struct {

	// When true, this Baggage Offer applies to all specified Passengers.
	AllPassengerInd bool `xml:"AllPassengerInd,omitempty"`

	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`
}

type Passenger__10 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__11 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__12 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__13 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__14 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__2 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__3 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__4 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__5 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__6 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__7 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__8 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passenger__9 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Passengers__1 struct {
	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`
}

type Path__1 struct {
	Value *DescriptionSimpleType `xml:",chardata"`
}

type PayerAuth__1 struct {

	// Payer Authentication Request value.
	// Example: eNp1UttugzAM/RXE+0gosF5kUkFZtT506rp222sUvJatXBqgtPv6JQzW7WFRIvnY1rF9HJie04NxQlk
	// meeabtkVNAzO/GAw==
	PAReq string `xml:"PAReq,omitempty"`

	// Payer Authentication Response value.
	// Example: eJzVWFmzosgSfudXdPQ8Gt1sbkzYRhQ7KCjI/sYOsimgoL/+lp7Tp5c5t2d67tMw8yv/WqiluJXS8WyyVFEQT28qz
	//
	// Note: This is the PARes (Payer Authentication Response) to be POSTed back to the TermURL (the URL to which the user will be directed at the conclusion of 3D secure authentication.)
	PARes string `xml:"PARes,omitempty"`
}

type Payer__1 struct {

	// Ref to Contact Information of the Order's Payer. The information can be a company, or include the name details of the individual paying.
	ContactInfoRefs string `xml:"ContactInfoRefs,omitempty"`
}

type Payer__2 struct {

	// Ref to Contact Information of the Order's Payer. The information can be a company, or include the name details of the individual paying.
	ContactInfoRefs string `xml:"ContactInfoRefs,omitempty"`
}

type PaymentTimeLimit__1 struct {
	*CoreDateGrpType

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Payments__1 struct {

	// Payment Processing detail.
	Payment []*PaymentProcessType `xml:"Payment,omitempty"`
}

type Payments__2 struct {
	Payment []*Payment__1 `xml:"Payment,omitempty"`
}

type Payments__3 struct {
	Payment []*Payment__2 `xml:"Payment,omitempty"`
}

type Penalty__1 struct {

	// Penalty or change fee amount.
	// Example: 100 USD
	Commission *CommissionType `xml:"Commission,omitempty"`

	// Commission amount. Example: 20.00 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Commission percentage. Example: 20
	Percentage *WholePercentageSimpleType `xml:"percentage,omitempty"`
}

type Penalty__2 struct {
	*OfferPenaltyType
}

type PieceMeasurements__1 struct {

	// BAGGAGE WEIGHT allowance per baggage piece.
	PieceWeightAllowance []*BagAllowanceWeightType `xml:"PieceWeightAllowance,omitempty"`

	// BAGGAGE DIMENSION allowance per baggage piece.
	PieceDimensionAllowance []*BagAllowanceDimensionType `xml:"PieceDimensionAllowance,omitempty"`

	// Quantity of pieces with these measurements.

	Quantity int32 `xml:"Quantity,attr,omitempty"`
}

type PointOfSaleCode__1 struct {
	Value *PointOfSaleCodeType `xml:",chardata"`

	// Further defines the type of PointOfSaleCode                                                          Values include the following: T = Pseudo Code/Travel Agency Code                    I = IATA Travel Agency No.                                 H = Home IATA Agency No.                                 U = Home Travel Agency Code                                X = Department/Identifier    V = CRS/CXR Department Code                                L = LNIATA Number (CRT Address)                             A = Airline Specific Codes Blank = No application

	PointOfSaleType string `xml:"PointOfSaleType,attr,omitempty"`
}

type Policy__1 struct {
	*PolicyType

	DefaultPolicy *DefaultPolicy `xml:"DefaultPolicy,omitempty"`

	PolicyAugmentation *PolicyAugmentation `xml:"PolicyAugmentation,omitempty"`
}

type Policy__2 struct {

	// When true, data handling policy(s) apply.
	DataPolicyInd bool `xml:"DataPolicyInd,omitempty"`

	// Policy Code or ID.  Example: DATA1
	PolicyID *CodesetValueSimpleType `xml:"PolicyID,omitempty"`

	Type *Type__3 `xml:"Type,omitempty"`

	NodePath *NodePath `xml:"NodePath,omitempty"`

	// Policy short description.
	Description *ShortDescSimpleType `xml:"Description,omitempty"`

	PolicyLink *PolicyLink `xml:"PolicyLink,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`
}

type Policy__3 struct {

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`
}

type Policy__4 struct {
	*PolicyType
}

type Preference__1 struct {
	AirlinePreferences *AirlinePreferences `xml:"AirlinePreferences,omitempty"`

	AlliancePreferences *AlliancePreferences `xml:"AlliancePreferences,omitempty"`

	FarePreferences *FarePreferences `xml:"FarePreferences,omitempty"`

	FlightPreferences *FlightPreferences `xml:"FlightPreferences,omitempty"`

	PricingMethodPreference *PricingMethodPreference `xml:"PricingMethodPreference,omitempty"`

	SegMaxTimePreferences *SegMaxTimePreferences `xml:"SegMaxTimePreferences,omitempty"`

	ServicePricingOnlyPreference *ServicePricingOnlyPreference `xml:"ServicePricingOnlyPreference,omitempty"`

	TransferPreferences *TransferPreferences `xml:"TransferPreferences,omitempty"`

	CabinPreferences *CabinPreferences `xml:"CabinPreferences,omitempty"`
}

type Preference__2 struct {
	AirlinePreferences *AirlinePreferences `xml:"AirlinePreferences,omitempty"`

	AlliancePreferences *AlliancePreferences `xml:"AlliancePreferences,omitempty"`

	FarePreferences *FarePreferences `xml:"FarePreferences,omitempty"`

	FlightPreferences *FlightPreferences `xml:"FlightPreferences,omitempty"`

	PricingMethodPreference *PricingMethodPreference `xml:"PricingMethodPreference,omitempty"`

	SegMaxTimePreferences *SegMaxTimePreferences `xml:"SegMaxTimePreferences,omitempty"`

	ServicePricingOnlyPreference *ServicePricingOnlyPreference `xml:"ServicePricingOnlyPreference,omitempty"`

	TransferPreferences *TransferPreferences `xml:"TransferPreferences,omitempty"`
}

type PrepaidProgramDetail__1 struct {
}

type PresentInfo__1 struct {

	// The name of service provider. Example: ???

	To string `xml:"To,attr,omitempty"`

	// The location of the service provider. Example: ???

	At string `xml:"At,attr,omitempty"`
}

type PriceClass__1 struct {
	PriceClassReference *PriceClassReference `xml:"PriceClassReference,omitempty"`
}

type PriceClass__2 struct {
	PriceClassReference *PriceClassReference `xml:"PriceClassReference,omitempty"`
}

type PriceDetail__1 struct {
	TotalAmount *TotalAmount__2 `xml:"TotalAmount,omitempty"`

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	FareFiledIn *FareFiledIn `xml:"FareFiledIn,omitempty"`

	// Discount Information
	Discount *DiscountType `xml:"Discount,omitempty"`

	Surcharges *Surcharges__4 `xml:"Surcharges,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	//
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	Fees *Fees__4 `xml:"Fees,omitempty"`

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`

	OriginDestinationReference *OriginDestinationReference `xml:"OriginDestinationReference,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`
}

type PricedOffer__1 struct {
	*OfferType

	FlightsOverview *FlightsOverview__1 `xml:"FlightsOverview,omitempty"`

	// A set of one or more Service s. The Offer Item assigns a total price for all included services for all passengers and all segments referenced. Once constructed, the OfferItem cannot be modifed.
	OfferItem []*OfferItemType `xml:"OfferItem,omitempty"`

	BaggageAllowance []*BaggageAllowance__2 `xml:"BaggageAllowance,omitempty"`
}

type Pricing__1 struct {

	// When true, apply selected CONNECTION PRICING.

	ConnectionPricingInd bool `xml:"ConnectionPricingInd,attr,omitempty"`
}

type Pricing__10 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__1 `xml:"FeeExemption,omitempty"`

	// When true, fare information for one or more Offer Items has been returned from an auto-exchanging application.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares have been returned.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers has been applied.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__11 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__2 `xml:"FeeExemption,omitempty"`

	// When true, this request is to be handled by an auto-exchange process.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__12 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__3 `xml:"FeeExemption,omitempty"`

	// When true, fare information for one or more Offer Items has been returned from an auto-exchanging application.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares have been returned.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers has been applied.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__13 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__4 `xml:"FeeExemption,omitempty"`

	// When true, this request is to be handled by an auto-exchange process.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__14 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__5 `xml:"FeeExemption,omitempty"`

	// When true, this request is to be handled by an auto-exchange process.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__2 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__6 `xml:"FeeExemption,omitempty"`

	// When true, this request is to be handled by an auto-exchange process

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__3 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__7 `xml:"FeeExemption,omitempty"`

	// When true, this request is to be handled by an auto-exchange process .

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__4 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__8 `xml:"FeeExemption,omitempty"`

	// When true, fare information for one or more Offer Items has been returned from an auto-exchanging application.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares have been returned.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers has been applied.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__5 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__9 `xml:"FeeExemption,omitempty"`

	// When true, this request is to be handled by an auto-exchange process.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__6 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__10 `xml:"FeeExemption,omitempty"`

	// When true, fare information for one or more Offer Items has been returned from an auto-exchanging application.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares have been returned.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers has been applied.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__7 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__11 `xml:"FeeExemption,omitempty"`

	// When true, this request is to be handled by an auto-exchange process.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__8 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__12 `xml:"FeeExemption,omitempty"`

	// When true, fare information for one or more Offer Items has been returned from an auto-exchanging application.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares have been returned.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers has been applied.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Pricing__9 struct {

	// Requested override currency code for pricing.
	// Example: EUR
	OverrideCurrency *CurrencySimpleType `xml:"OverrideCurrency,omitempty"`

	FeeExemption *FeeExemption__13 `xml:"FeeExemption,omitempty"`

	// When true, this request is to be handled by an auto-exchange process.

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type ProcessingInfos__1 struct {
	ProcessingInfo []*ProcessingInfo__1 `xml:"ProcessingInfo,omitempty"`
}

type ProductCharacteristic__1 struct {

	// Optional Service Product Characteristic. Example: ???
	//
	// Note: This identifies the type of optional service product characteristic described in description.

	Type string `xml:"Type,omitempty"`

	// Product Characteristic Description. Example: ????

	Description string `xml:"Description,omitempty"`
}

type ProgramStatus__1 struct {
}

type Promotions__1 struct {
	Promotion []*Promotion__1 `xml:"Promotion,omitempty"`
}

type Promotions__2 struct {
	Promotion []*Promotion__2 `xml:"Promotion,omitempty"`
}

type Promotions__3 struct {

	// Promotion Code.
	Promotion []*PromotionType `xml:"Promotion,omitempty"`
}

type Promotions__4 struct {

	// Promotion Code.
	Promotion []*PromotionType `xml:"Promotion,omitempty"`
}

type Proximity__1 struct {
	ReferencePoint *ReferencePoint__1 `xml:"ReferencePoint,omitempty"`

	// Proximity Data Application.  Example: SearchRadius, ActualProximity, Other
	Application *ProximityAppSimpleType `xml:"Application,omitempty"`

	AreaValue *AreaValue__2 `xml:"AreaValue,omitempty"`
}

type PseudoCityCode__1 struct {
	Value string `xml:",chardata"`

	// Defines where the PCC was created. For example 1A, 1P, 1S

	Owner string `xml:"Owner,attr,omitempty"`
}

type PseudoCity__1 struct {
	Value *PseudoCitySimpleType `xml:",chardata"`

	// Defines where the PCC was created. For example 1A, 1P, 1S

	Owner string `xml:"Owner,attr,omitempty"`
}

type Qualifier__1 struct {
	SeatQualifier *SeatQualifier `xml:"SeatQualifier,omitempty"`

	ServiceQualifier *ServiceQualifier `xml:"ServiceQualifier,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Qualifier__2 struct {
	BaggagePricingQualifier *BaggagePricingQualifier `xml:"BaggagePricingQualifier,omitempty"`

	ExistingOrderQualifier *ExistingOrderQualifier `xml:"ExistingOrderQualifier,omitempty"`

	PaymentCardQualifiers []*PaymentCardQualifiers `xml:"PaymentCardQualifiers,omitempty"`

	ProgramQualifiers *ProgramQualifiers `xml:"ProgramQualifiers,omitempty"`

	PromotionQualifiers *PromotionQualifiers `xml:"PromotionQualifiers,omitempty"`

	SeatQualifier *SeatQualifier `xml:"SeatQualifier,omitempty"`

	ServiceQualifier *ServiceQualifier `xml:"ServiceQualifier,omitempty"`

	SocialMediaQualifiers *SocialMediaQualifiers `xml:"SocialMediaQualifiers,omitempty"`

	SpecialFareQualifiers *SpecialFareQualifiers `xml:"SpecialFareQualifiers,omitempty"`

	SpecialNeedQualifiers *SpecialNeedQualifiers `xml:"SpecialNeedQualifiers,omitempty"`

	TripPurposeQualifier *TripPurposeQualifier `xml:"TripPurposeQualifier,omitempty"`

	FOPQualifier *FOPQualifier__1 `xml:"FOPQualifier,omitempty"`
}

type Qualifier__3 struct {
	BaggagePricingQualifier *BaggagePricingQualifier `xml:"BaggagePricingQualifier,omitempty"`

	ExistingOrderQualifier *ExistingOrderQualifier `xml:"ExistingOrderQualifier,omitempty"`

	PaymentCardQualifiers []*PaymentCardQualifiers `xml:"PaymentCardQualifiers,omitempty"`

	ProgramQualifiers *ProgramQualifiers `xml:"ProgramQualifiers,omitempty"`

	PromotionQualifiers *PromotionQualifiers `xml:"PromotionQualifiers,omitempty"`

	SeatQualifier *SeatQualifier `xml:"SeatQualifier,omitempty"`

	ServiceQualifier *ServiceQualifier `xml:"ServiceQualifier,omitempty"`

	SocialMediaQualifiers *SocialMediaQualifiers `xml:"SocialMediaQualifiers,omitempty"`

	SpecialFareQualifiers *SpecialFareQualifiers `xml:"SpecialFareQualifiers,omitempty"`

	SpecialNeedQualifiers *SpecialNeedQualifiers `xml:"SpecialNeedQualifiers,omitempty"`

	TripPurposeQualifier *TripPurposeQualifier `xml:"TripPurposeQualifier,omitempty"`
}

type Query__1 struct {

	//
	// When true, inventory guarantee is requested for offers.
	//

	GuaranteeRequestInd bool `xml:"GuaranteeRequestInd,attr,omitempty"`
}

type Query__10 struct {
	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	FareBasisCode *FareBasisCode `xml:"FareBasisCode,omitempty"`

	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	FareCode *FareCode `xml:"FareCode,omitempty"`

	FareInd *FareInd `xml:"FareInd,omitempty"`

	// Special fares, which may be private or negotiated fares.
	SpecialFare *FareQualifierType `xml:"SpecialFare,omitempty"`

	FareQualifierCodes *FareQualifierCodes `xml:"FareQualifierCodes,omitempty"`

	RuleCategories *RuleCategories__1 `xml:"RuleCategories,omitempty"`

	FareTextInd *FareTextInd `xml:"FareTextInd,omitempty"`

	FareReferenceKey *FareReferenceKey `xml:"FareReferenceKey,omitempty"`
}

type Query__11 struct {
	Filters *Filters__1 `xml:"Filters,omitempty"`
}

type Query__12 struct {
	DisplayCriteria *DisplayCriteria__1 `xml:"DisplayCriteria,omitempty"`

	Flight *Flight__7 `xml:"Flight,omitempty"`

	// The ticket/document number to be displayed.
	TicketDocument []*TicketDocumentType `xml:"TicketDocument,omitempty"`

	// The order id for which a ticket/document is requested.
	OrderID *CouponOrderKeyType `xml:"OrderID,omitempty"`

	// The frequent flier information  for which a ticket/document is requested.
	FQTV *TravelerFQTV_Type `xml:"FQTV,omitempty"`

	// Passenger check in information for which a ticket/document is requested.
	FOID *TravelerFOID_Type `xml:"FOID,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	DataLists *DataLists__20 `xml:"DataLists,omitempty"`
}

type Query__13 struct {
	FlightSegment []*FlightSegment__2 `xml:"FlightSegment,omitempty"`

	Offer *Offer__4 `xml:"Offer,omitempty"`

	Order *Order__1 `xml:"Order,omitempty"`

	BookingReference *BookingReference `xml:"BookingReference,omitempty"`
}

type Query__14 struct {
	OriginDestination []*OriginDestination__5 `xml:"OriginDestination,omitempty"`

	Flight []*Flight__8 `xml:"Flight,omitempty"`
}

type Query__15 struct {
	OriginDestination []*OriginDestination__6 `xml:"OriginDestination,omitempty"`

	Flight []*Flight__9 `xml:"Flight,omitempty"`

	// Globally unique Offer instance ID. It is not recommended to exceed 64, and it is not recommended to use dashes. Example: QWASZXERDFCVTYGHBNUIJKNMF67D5F9GHR567SWER41SD458F9456FMDIRTN34DF
	OfferID *ItemID_Type `xml:"OfferID,omitempty"`
}

type Query__16 struct {
	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	OrderID *OrderID `xml:"OrderID,omitempty"`

	OrderItemID []*OrderItemID `xml:"OrderItemID,omitempty"`

	OfferID *OfferID__1 `xml:"OfferID,omitempty"`

	OfferItemID []*OfferItemID `xml:"OfferItemID,omitempty"`

	Qualifiers *Qualifiers__1 `xml:"Qualifiers,omitempty"`
}

type Query__17 struct {
	Guarantee []*Guarantee__1 `xml:"Guarantee,omitempty"`
}

type Query__18 struct {
	Order *Order__2 `xml:"Order,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`
}

type Query__19 struct {
	Group *Group__8 `xml:"Group,omitempty"`

	OrderID *OrderID__1 `xml:"OrderID,omitempty"`

	// Reference to PADIS codeset REA. When used, provides context for the change being requested.
	ActionContext *IATA_CodeType `xml:"ActionContext,omitempty"`

	Payments *Payments__4 `xml:"Payments,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	OrderChangeMetadata *OrderChangeMetadata `xml:"OrderChangeMetadata,omitempty"`

	OrderServicing *OrderServicing__1 `xml:"OrderServicing,omitempty"`

	PassengerServicing []*PassengerServicing__1 `xml:"PassengerServicing,omitempty"`

	AcceptRepricedOrder *AcceptRepricedOrder__1 `xml:"AcceptRepricedOrder,omitempty"`
}

type Query__2 struct {
	PriceVarianceRule []*PriceVarianceRule__1 `xml:"PriceVarianceRule,omitempty"`

	//
	// When true, price variance rule(s) have been specified.
	//

	VarianceRuleInd bool `xml:"VarianceRuleInd,attr,omitempty"`
}

type Query__20 struct {

	// Reference to existing Order to which the Seller wants to add, udpate, delete an OrderItem.
	OrderID string `xml:"OrderID,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	// Reference to PADIS codeset REA. When used, provides context for the change being requested.
	ActionContext *IATA_CodeType `xml:"ActionContext,omitempty"`

	Reshop *Reshop__1 `xml:"Reshop,omitempty"`

	Reprice *Reprice__1 `xml:"Reprice,omitempty"`
}

type Query__3 struct {

	// When true, this request is to be handled by an auto-exchange process.
	//

	AutoExchangeReqInd bool `xml:"AutoExchangeReqInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.
	//

	IncludeAwardReqInd bool `xml:"IncludeAwardReqInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.
	//

	AwardOnlyReqInd bool `xml:"AwardOnlyReqInd,attr,omitempty"`

	// When true, Simple Pricing for flight offers is requested.
	//

	SimpleReqInd bool `xml:"SimpleReqInd,attr,omitempty"`
}

type Query__4 struct {

	// Optional Service Filter(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type Query__5 struct {
	Named *Named__1 `xml:"Named,omitempty"`

	// Additional Tax Exemption Rule(s).
	Rules *RuleSetType `xml:"Rules,omitempty"`

	// When true, all pricing is tax/ fee exempt.

	ExemptAllInd bool `xml:"ExemptAllInd,attr,omitempty"`
}

type Query__6 struct {
	OriginDestination []*OriginDestination__7 `xml:"OriginDestination,omitempty"`

	Flight []*Flight__10 `xml:"Flight,omitempty"`

	// Globally unique Offer instance ID. It is not recommended to exceed 64, and it is not recommended to use dashes. Example: QWASZXERDFCVTYGHBNUIJKNMF67D5F9GHR567SWER41SD458F9456FMDIRTN34DF
	OfferID *ItemID_Type `xml:"OfferID,omitempty"`
}

type Query__7 struct {
	OriginDestination []*OriginDestination__8 `xml:"OriginDestination,omitempty"`

	OrderID *OrderID `xml:"OrderID,omitempty"`

	Offers *Offers__1 `xml:"Offers,omitempty"`
}

type Query__8 struct {

	// Group Information.
	Group *GroupType `xml:"Group,omitempty"`

	Order *Order__3 `xml:"Order,omitempty"`

	Payments *Payments__5 `xml:"Payments,omitempty"`

	Promotions *Promotions__6 `xml:"Promotions,omitempty"`

	// Commission information
	Commission *CommissionType `xml:"Commission,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	DataLists *DataLists__21 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *OrdCreateMetadataType `xml:"Metadata,omitempty"`
}

type Query__9 struct {
	Filters *Filters__2 `xml:"Filters,omitempty"`
}

type ReasonForIssuance__1 struct {
	RFIC *RFIC `xml:"RFIC,omitempty"`

	// Reason for Issuance Subcode. Example: ???

	Code string `xml:"Code,omitempty"`

	// Corresponding description to the reason for issuance subcode. Example: ???
	Description *ShortDescSimpleType `xml:"Description,omitempty"`
}

type Recipient__1 struct {
	AgentUserRecipient *AgentUserRecipient `xml:"AgentUserRecipient,omitempty"`

	AggregatorRecipient *AggregatorRecipient `xml:"AggregatorRecipient,omitempty"`

	EnabledSystemRecipient *EnabledSystemRecipient `xml:"EnabledSystemRecipient,omitempty"`

	MarketingCarrierRecipient *MarketingCarrierRecipient `xml:"MarketingCarrierRecipient,omitempty"`

	ORA_Recipient *ORA_Recipient `xml:"ORA_Recipient,omitempty"`

	OperatingCarrierRecipient *OperatingCarrierRecipient `xml:"OperatingCarrierRecipient,omitempty"`

	POA_Recipient *POA_Recipient `xml:"POA_Recipient,omitempty"`

	RetailPartnerRecipient *RetailPartnerRecipient `xml:"RetailPartnerRecipient,omitempty"`

	TravelAgencyRecipient *TravelAgencyRecipient `xml:"TravelAgencyRecipient,omitempty"`
}

type ReferencePoints__1 struct {
	ReferencePoint []*ReferencePoint__2 `xml:"ReferencePoint,omitempty"`
}

type Reference__1 struct {
	ACS_TxnReference *ACS_TxnReference `xml:"ACS_TxnReference,omitempty"`

	SPM_TxnReference *SPM_TxnReference `xml:"SPM_TxnReference,omitempty"`

	OriginalTransactionID *OriginalTransactionID__3 `xml:"OriginalTransactionID,omitempty"`

	// 3DS Transaction Timestamp. Example: 2015-01-13T13:59:38Z
	TrxTimestamp *TimestampRepType `xml:"TrxTimestamp,omitempty"`

	// Transaction description. Example: Air Fare Two PAX
	TxnDescription *UniqueStringID_SimpleType `xml:"TxnDescription,omitempty"`

	TxnDatas *TxnDatas__2 `xml:"TxnDatas,omitempty"`
}

type RefundFOP_Preference__1 struct {
	Voucher *Voucher `xml:"Voucher,omitempty"`

	PaymentCard *PaymentCard `xml:"PaymentCard,omitempty"`

	Cash *Cash `xml:"Cash,omitempty"`

	BankAccount *BankAccount `xml:"BankAccount,omitempty"`

	Check *Check `xml:"Check,omitempty"`

	// If true, preference is to apply refund to carrier credit.
	CarrierCredit bool `xml:"CarrierCredit,omitempty"`

	// When true, it is requested that the refund be applied to the original FOP

	OriginalFOP_Ind bool `xml:"OriginalFOP_Ind,attr,omitempty"`
}

type RefundableValue__1 struct {

	// Price breakdown amount in currency. Example: 800 USD
	//
	// Note: This is the individual price excluding base price, taxes and fees/ surcharges.
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Commission percentage. Example: 20
	Percentage *WholePercentageSimpleType `xml:"Percentage,omitempty"`
}

type Remark__1 struct {
	Value string `xml:",chardata"`

	// When true, this remark should be displayed.
	//
	// Notes:
	// 1. This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only.  The technical implementation of this capability is not dictated by this specification.

	DisplayInd bool `xml:"DisplayInd,attr,omitempty"`

	// Remark creation timestamp.  Example: 2017-01-13T13:59:38Z

	Timestamp string `xml:"Timestamp,attr,omitempty"`
}

type Remark__2 struct {
	*RemarkTypeAIDM
}

type RequestTime__1 struct {
	Value string `xml:",chardata"`

	// Point of sale time zone.
	// Example: UTC

	Zone *CodesetValueSimpleType `xml:"Zone,attr,omitempty"`
}

type RequestedDate__1 struct {
	*OfferPriceLeadDetailType

	// Fare Offer Associations.
	Associations []*PricedFlightOfferAssocType `xml:"Associations,omitempty"`
}

type ResBookDesigCode__1 struct {
}

type ResDesigAirportCityCode__1 struct {
	Value *AirportCitySimpleType `xml:",chardata"`
}

type ResFlightDepartureTime__1 struct {
	Value *TimeSimpleType `xml:",chardata"`
}

type ResFlightNumber__1 struct {
	Value *FlightNumberType `xml:",chardata"`
}

type ResOriginAirportCityCode__1 struct {
	Value *AirportCitySimpleType `xml:",chardata"`
}

type ResidenceCode__1 struct {
	Value *CountrySimpleType `xml:",chardata"`
}

type ResponseID__1 struct {
	Value *UniqueStringID_SimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Response__1 struct {
	OrderViewProcessing *OrderViewProcessing `xml:"OrderViewProcessing,omitempty"`

	// Group Information.
	Group *GroupType `xml:"Group,omitempty"`

	Order []*Order__4 `xml:"Order,omitempty"`

	TicketDocInfos *TicketDocInfos__1 `xml:"TicketDocInfos,omitempty"`

	// Commission information.
	Commission *CommissionType `xml:"Commission,omitempty"`

	Amendments *Amendments__1 `xml:"Amendments,omitempty"`

	DataLists *DataLists__22 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *OrdViewMetadataType `xml:"Metadata,omitempty"`
}

type Response__2 struct {
	OrderListProcessing *OrderListProcessing `xml:"OrderListProcessing,omitempty"`

	Orders *Orders__1 `xml:"Orders,omitempty"`
}

type Response__3 struct {
	AirDocDisplayProcessing *AirDocDisplayProcessing `xml:"AirDocDisplayProcessing,omitempty"`

	TicketDocInfos *TicketDocInfos__2 `xml:"TicketDocInfos,omitempty"`

	DataLists *DataLists__23 `xml:"DataLists,omitempty"`
}

type Response__4 struct {
	InvGuaranteeProcessing *InvGuaranteeProcessing `xml:"InvGuaranteeProcessing,omitempty"`

	Guarantees *Guarantees__1 `xml:"Guarantees,omitempty"`

	// When true, no inventory could be guaranteed.

	NoGuaranteeInd bool `xml:"NoGuaranteeInd,attr,omitempty"`
}

type Response__5 struct {
	OrderCancelProcessing *OrderCancelProcessing `xml:"OrderCancelProcessing,omitempty"`

	// Cancelled order reference. Example: REF12345
	OrderReference *UniqueStringID_SimpleType `xml:"OrderReference,omitempty"`

	ChangeFees *ChangeFees__1 `xml:"ChangeFees,omitempty"`

	TicketDocInfos *TicketDocInfos__3 `xml:"TicketDocInfos,omitempty"`
}

type Response__6 struct {
	OrderReshopProcessing *OrderReshopProcessing `xml:"OrderReshopProcessing,omitempty"`

	// Notes:
	// 1. This capability supports reduced message payload sizes by providing a mechanism that supports references to cached Shopping Transactions and/ or Offer information so only object identifiers (e.g. Offer, Service) need to be exchanged in a subsequent Shopping request message, versus specifying the full object details.
	//
	// 2. This capability may not be supported by all NDC-enabled systems or may be supported by bilateral agreement only.  The technical implementation of this capability is not dictated by this specification.
	ReShoppingResponseID *ShoppingResponseID_Type `xml:"ReShoppingResponseID,omitempty"`

	Group *Group__9 `xml:"Group,omitempty"`

	// Reshop Fees(s) and Penalty(s).
	ChangeFees *OrderPenaltyType `xml:"ChangeFees,omitempty"`

	Payments *Payments__6 `xml:"Payments,omitempty"`

	Commission *Commission__1 `xml:"Commission,omitempty"`

	DataLists *DataLists__24 `xml:"DataLists,omitempty"`

	// Metadata List(s).
	Metadata *ItinReshopMetadataType `xml:"Metadata,omitempty"`

	ReshopOffers *ReshopOffers__1 `xml:"ReshopOffers,omitempty"`

	RepricedOffer *RepricedOffer__1 `xml:"RepricedOffer,omitempty"`

	// When "true", the Reprice had no effect on the price(s) of the original Order/OrderItems.
	NoPriceChangeInd bool `xml:"NoPriceChangeInd,omitempty"`
}

type Results__1 struct {
	InventoryGuarantee *InventoryGuarantee__2 `xml:"InventoryGuarantee,omitempty"`

	// When true, no offers have guaranteed inventory .

	NoGuaranteeInd bool `xml:"NoGuaranteeInd,attr,omitempty"`
}

type Results__2 struct {
	PriceVariance []*PriceVariance__1 `xml:"PriceVariance,omitempty"`

	//
	// When true, a pricing variant was applied to the total order price or one or more priced Order Items.
	//

	VarianceAppliedInd bool `xml:"VarianceAppliedInd,attr,omitempty"`
}

type Results__3 struct {

	// When true, this request was handled by an auto-exchange process.
	//

	AutoExchangeInd bool `xml:"AutoExchangeInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares are included in the results.
	//

	AwardIncludedInd bool `xml:"AwardIncludedInd,attr,omitempty"`

	// When true, only award eligible offers/ fares have been returned.
	//

	AwardOnlyInd bool `xml:"AwardOnlyInd,attr,omitempty"`

	// When true, Simple Pricing for flight offers was applied.
	//

	SimpleInd bool `xml:"SimpleInd,attr,omitempty"`
}

type Results__4 struct {
	AppliedFilters *AppliedFilters__1 `xml:"AppliedFilters,omitempty"`

	//
	// When true, service filters specified in the request message have resulted in offers in this reponse.
	//

	SrvcFilterAppliedInd bool `xml:"SrvcFilterAppliedInd,attr,omitempty"`
}

type Results__5 struct {
	TaxExemption []*TaxExemption__1 `xml:"TaxExemption,omitempty"`

	//
	// When true, a tax/ fee exemption was applied to the total order price or one or more priced Order Items.
	//

	ExemptionAppliedInd bool `xml:"ExemptionAppliedInd,attr,omitempty"`
}

type Row__1 struct {

	// Seat row number. Example: 2
	Number *SeatMapRowNbrType `xml:"Number,omitempty"`

	// Row characteristic.
	// Examples:
	// A (Extra Leg Room)
	// B (Buffer Row)
	// MV (Row With Movie Screen)
	//
	// Encoding Scheme: IATA PADIS Code List for data element 9864 - Row Characteristic
	Type *IATA_CodeType `xml:"Type,omitempty"`

	SeatData *SeatData__1 `xml:"SeatData,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Row__2 struct {

	// Row number value.
	// Example: 11
	Position int32 `xml:"Position,omitempty"`

	// Icon placement (in orientation to cabin row or column).
	//
	// Examples:
	// FRO (Place icon before row)
	// INL (Place icon inline with row or column)
	// LEF (Place icon left of column)
	// REA (Place icon behind row)
	// RIG (Place icon right of column)
	//
	// Encoding Scheme: IATA PADIS code list COT - Camera Orientation Type
	Orientation *IATA_CodeType `xml:"Orientation,omitempty"`
}

type RuleID__1 struct {
	Value string `xml:",chardata"`
}

type RuleInd__1 struct {

	// ATPCO fare category number.

	RuleCode int32 `xml:"RuleCode,omitempty"`
}

type RuleSetID__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Rule Set Name. Example: Order Item Price Variance

	Name string `xml:"Name,attr,omitempty"`
}

type RuleValid__1 struct {
	YearPeriod *YearPeriod `xml:"YearPeriod,omitempty"`

	YearMonthPeriod *YearMonthPeriod `xml:"YearMonthPeriod,omitempty"`

	TimePeriod *TimePeriod `xml:"TimePeriod,omitempty"`

	QuarterPeriod *QuarterPeriod `xml:"QuarterPeriod,omitempty"`

	MonthPeriod *MonthPeriod `xml:"MonthPeriod,omitempty"`

	DayPeriod *DayPeriod `xml:"DayPeriod,omitempty"`

	DateTimePeriod *DateTimePeriod `xml:"DateTimePeriod,omitempty"`

	DatePeriod *DatePeriod `xml:"DatePeriod,omitempty"`
}

type Rule__1 struct {
	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`
}

type Rules__1 struct {
	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	FareBasisCode *FareBasisCode `xml:"FareBasisCode,omitempty"`

	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	FareCode *FareCode `xml:"FareCode,omitempty"`

	Rule []*Rule__2 `xml:"Rule,omitempty"`
}

type SeatMap__1 struct {
	SegmentRef *SegmentRef__1 `xml:"SegmentRef,omitempty"`

	Cabin []*Cabin__1 `xml:"Cabin,omitempty"`
}

type SegmentRefs__1 struct {
	Value string `xml:",chardata"`

	// Flight Slice ON Point.  Example: ORD
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code

	ON_Point *AirportCitySimpleType `xml:"ON_Point,attr,omitempty"`

	// Flight Slice OFF Point.  Example: NYC
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code

	OFF_Point *AirportCitySimpleType `xml:"OFF_Point,attr,omitempty"`
}

type Sender__1 struct {
	AgentUserSender *AgentUserSender `xml:"AgentUserSender,omitempty"`

	AggregatorSender *AggregatorSender `xml:"AggregatorSender,omitempty"`

	EnabledSystemSender *EnabledSystemSender `xml:"EnabledSystemSender,omitempty"`

	MarketingCarrierSender *MarketingCarrierSender `xml:"MarketingCarrierSender,omitempty"`

	ORA_Sender *ORA_Sender `xml:"ORA_Sender,omitempty"`

	OperatingCarrierSender *OperatingCarrierSender `xml:"OperatingCarrierSender,omitempty"`

	POA_Sender *POA_Sender `xml:"POA_Sender,omitempty"`

	RetailPartnerSender *RetailPartnerSender `xml:"RetailPartnerSender,omitempty"`

	TravelAgencySender *TravelAgencySender `xml:"TravelAgencySender,omitempty"`

	CorporateSender *CorporateSender `xml:"CorporateSender,omitempty"`
}

type SeriesCode__1 struct {
	Value *PayCardCVV_SimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ServiceAttributes__1 struct {
	ServiceAttribute []*ServiceAttribute__1 `xml:"ServiceAttribute,omitempty"`

	// AUX Category like Car Rental etc. Max Length: 20
	AuxCategory string `xml:"AuxCategory,omitempty"`
}

type ServiceBundle__1 struct {

	// Individual service items in bundle count. Example: 4
	ItemCount int32 `xml:"ItemCount,omitempty"`

	Associations *Associations__4 `xml:"Associations,omitempty"`

	Selection *Selection__1 `xml:"Selection,omitempty"`

	BundleID *BundleID__1 `xml:"BundleID,omitempty"`

	// Price for Bundled service
	Price []*ServicePriceType `xml:"Price,omitempty"`

	// Name of Bundle
	BundleName string `xml:"BundleName,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type ServiceBundle__2 struct {
	ServiceDefinitionRef []*ServiceDefinitionRef__1 `xml:"ServiceDefinitionRef,omitempty"`

	// Maximum quantity of bundle services that can be selected by each passenger referenced in the Offer

	MaximumQuantity int32 `xml:"MaximumQuantity,attr,omitempty"`
}

type ServiceClass__1 struct {

	// Class of Service. Example: T
	Code *Flight_COS_SimpleType `xml:"Code,omitempty"`

	// Name. Example: Economy
	MarketingName *ProperNameSimpleType `xml:"MarketingName,omitempty"`

	// Class of Service Association(s).
	Associations *COS_AssocType `xml:"Associations,omitempty"`

	// Object association(s) between this object and any object instance(s).

	Refs *InstanceClassRefSimpleType `xml:"refs,attr,omitempty"`

	// Globally unique id for this Data List instance.

	ListKey string `xml:"ListKey,attr,omitempty"`
}

type ServiceFilters__1 struct {
	*AssociatedObjectBaseType

	// Service group and subgroup code(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type ServiceFilters__2 struct {
	*AssociatedObjectBaseType

	// Service group and subgroup code(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type ServiceFilters__3 struct {
	*AssociatedObjectBaseType

	// Service group and subgroup code(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type ServiceFilters__4 struct {
	*AssociatedObjectBaseType

	// Service group and subgroup code(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type ServiceFilters__5 struct {
	*AssociatedObjectBaseType

	// Service group and subgroup code(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type ServiceFilters__6 struct {
	*AssociatedObjectBaseType

	// Service group and subgroup code(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type ServiceFilters__7 struct {
	*AssociatedObjectBaseType

	// Service group and subgroup code(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type ServiceFilters__8 struct {
	*AssociatedObjectBaseType

	// Service group and subgroup code(s).
	ServiceFilter []*ServiceFilterType `xml:"ServiceFilter,omitempty"`
}

type Service__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type Service__2 struct {
	ServiceDefinitionRef *ServiceDefinitionRef__2 `xml:"ServiceDefinitionRef,omitempty"`

	// ID for the Service unique across the entire XML document.

	ServiceID string `xml:"ServiceID,attr,omitempty"`
}

type Service__3 struct {

	// Create dependencies with parent services to which this particular Service is linked. Can reference ServiceItems across different OfferItems within the same Offer.
	ServiceRef string `xml:"ServiceRef,omitempty"`

	ServiceDefinitionRef string `xml:"ServiceDefinitionRef,omitempty"`

	// Unique identifier for this Service instance.

	ServiceID string `xml:"ServiceID,attr,omitempty"`
}

type Service__4 struct {

	// Reference to the PassengerID of one or more Passengers in DataLists. The Passenger is the recipient entitled to receive/consume the Service(s) offered by the Airline, whether the Service(s) are flight-related or not.
	PassengerRefs string `xml:"PassengerRefs,omitempty"`

	// Create dependencies with parent services to which this particular Service is linked. Can reference Services across different OfferItems within the same Offer.
	ServiceRef string `xml:"ServiceRef,omitempty"`

	// Reference to one or more flights in the Datalists that are being sold as part of this OfferItem/Service.
	FlightRefs string `xml:"FlightRefs,omitempty"`

	ServiceDefinitionRef *ServiceDefinitionRef__3 `xml:"ServiceDefinitionRef,omitempty"`

	SelectedSeat *SelectedSeat__1 `xml:"SelectedSeat,omitempty"`

	// ID for the Service unique across the entire XML document.

	ServiceID string `xml:"ServiceID,attr,omitempty"`
}

type Services__1 struct {
	Service []*Service__6 `xml:"Service,omitempty"`
}

type Services__2 struct {
	ServiceID []*ServiceID `xml:"ServiceID,omitempty"`
}

type Services__3 struct {

	// Service detail.
	Service []*ServiceDetailType `xml:"Service,omitempty"`
}

type Settlement__1 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__2 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__3 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Shopping__1 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__10 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__11 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__12 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__13 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__14 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__15 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__16 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__2 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__3 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__4 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__5 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__6 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__7 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__8 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type Shopping__9 struct {
	ShopMetadataGroup *ShopMetadataGroup `xml:"ShopMetadataGroup,omitempty"`
}

type SoldAirlineInfo__1 struct {
	*CouponSoldAirlineType
}

type SoldAirlineInfo__2 struct {
	*CouponSoldAirlineType
}

type Source__1 struct {
	OwnerID *OwnerID__1 `xml:"OwnerID,omitempty"`

	// Codeset file or resource name. Example: PADIS Codeset
	File *ShortDescSimpleType `xml:"File,omitempty"`

	// Codeset version. Example: 14
	Version *CodesetValueSimpleType `xml:"Version,omitempty"`
}

type StateCode__1 struct {
	*StateProvCodeType

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type StateCodes__1 struct {
	StateCode []*StateCode__2 `xml:"StateCode,omitempty"`
}

type Status__1 struct {
	Value *CustomerAuthStatusSimpleType `xml:",chardata"`

	// Authentication Status Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Status__2 struct {
	Value *CustomerAuthStatusSimpleType `xml:",chardata"`

	// Authentication Status Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Status__3 struct {
	Value *RuleStatusSimpleType `xml:",chardata"`
}

type Status__4 struct {

	//
	// Current Order Item status. Example: OK (Confirmed) Encoding Scheme: IATA Padis Codeset - List for data element 4405 (Status, coded)
	//
	StatusCode *IATA_CodeType `xml:"StatusCode,omitempty"`

	//
	// When true, the order item cannot be fulfilled due to an aircraft change.
	//

	ChangeOfGaugeInd bool `xml:"ChangeOfGaugeInd,attr,omitempty"`

	//
	// When true, the order item cannot be fulfilled due to a flight schedule change.
	//

	ScheduleChangeInd bool `xml:"ScheduleChangeInd,attr,omitempty"`
}

type Status__5 struct {
	*PaymentStatusType

	// When true, payment for this Order has failed.
	//
	// Note: Payment Failure status is specified in the PaymentStatus node.

	FailedPaymentInd bool `xml:"FailedPaymentInd,attr,omitempty"`

	// When true, this Order has been partially paid.
	//
	// Note: Partial Payment status and information is specified in the PaymentStatus node.

	PartialPaymentInd bool `xml:"PartialPaymentInd,attr,omitempty"`

	// When true, payment for this Order requires additional authentication.
	//
	// Note: Payment Verification status and information is specified in the PaymentStatus node.

	VerificationInd bool `xml:"VerificationInd,attr,omitempty"`

	// When true, a price variance was applied.

	PriceVarianceInd bool `xml:"PriceVarianceInd,attr,omitempty"`
}

type StopLocation__1 struct {
	AirportCode *AirportCode `xml:"AirportCode,omitempty"`

	// Airport Name. Example: Tampa International
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Stop Arrival date. Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	ArrivalDate string `xml:"ArrivalDate,omitempty"`

	// Arrival time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	ArrivalTime *TimeSimpleType `xml:"ArrivalTime,omitempty"`

	// Scheduled Departure Date. Example: 2017-01-13
	//
	// Note: This is the date and time of departure in GMT from the unticketed point.
	DepartureDate string `xml:"DepartureDate,omitempty"`

	// Departure time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)
	DepartureTime *TimeSimpleType `xml:"DepartureTime,omitempty"`

	Equipment *Equipment `xml:"Equipment,omitempty"`

	// Flight Stop Groundtime.
	// Example: PT5M (45 minutes)
	GroundTime string `xml:"GroundTime,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type StopLocations__1 struct {
	StopLocation *StopLocation__2 `xml:"StopLocation,omitempty"`
}

type Stops__1 struct {

	// Stop Quantity. Example: 1
	StopQuantity int32 `xml:"StopQuantity,omitempty"`

	StopLocations *StopLocations `xml:"StopLocations,omitempty"`
}

type Stops__2 struct {

	// Stop Quantity. Example: 1
	StopQuantity int32 `xml:"StopQuantity,omitempty"`

	StopLocations *StopLocations `xml:"StopLocations,omitempty"`
}

type SubCode__1 struct {
	Value string `xml:",chardata"`
}

type SubGroupCode__1 struct {
	Value *CodesetValueSimpleType `xml:",chardata"`
}

type SubGroup__1 struct {

	// ENCODING: Note, Standard Group and Sub Group on the Services Record S5 that can be used as filter criteria for a service.
	//
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Service subgroup description.
	// Example: CARRY ON HAND BAGGAGE
	Text *DescriptionSimpleType `xml:"Text,omitempty"`
}

type SubTotal__1 struct {
	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Surcharge__1 struct {

	// Authorized credit card amount. Example: 500 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	PercentageValue *PercentageValue `xml:"PercentageValue,omitempty"`
}

type Surcharge__2 struct {
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	PercentageValue *WholePercentageSimpleType `xml:"PercentageValue,omitempty"`
}

type Surcharges__1 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type Surcharges__2 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type Surcharges__3 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type TagName__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type Tax__1 struct {

	// Tax nature. Example: US2
	Designator *CodesetValueSimpleType `xml:"Designator,omitempty"`

	// Amount. Example: 15000 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	CountryCode *CountryCode `xml:"CountryCode,omitempty"`

	// Tax nature. Example: US2
	Nature *ProperNameSimpleType `xml:"Nature,omitempty"`

	// Local tax amount. Example: 24 CHF
	LocalAmount *CurrencyAmountOptType `xml:"LocalAmount,omitempty"`

	// Tax short description.
	// Example: $4 per flight segment, per passenger (U.S. domestic segment tax)
	Description *ShortDescSimpleType `xml:"Description,omitempty"`

	// When true, this tax is approximate.

	ApproxInd bool `xml:"ApproxInd,attr,omitempty"`

	// When true, this tax must be collected.

	CollectionInd bool `xml:"CollectionInd,attr,omitempty"`

	// When true, this tax amount is refundable.

	RefundInd bool `xml:"RefundInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Taxes__1 struct {
	*TaxDetailType
}

type Taxes__2 struct {
	*TaxDetailType
}

type Terminal__1 struct {

	// Terminal name or ID.  Example: Terminal C
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Terminal Gate Number.  Example: C39
	Gate *ContextSimpleType `xml:"Gate,omitempty"`
}

type Terminal__2 struct {

	// Terminal name or ID.  Example: Terminal C
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Terminal Gate Number.  Example: C39
	Gate *ContextSimpleType `xml:"Gate,omitempty"`
}

type Terms__1 struct {
	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`
}

type Territories__1 struct {

	// Exempt tax territory code.  Example: QC

	Territory *ProperNameSimpleType `xml:"Territory,omitempty"`
}

type Text__1 struct {
	Value *DescriptionSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Text__2 struct {
	Value *DescriptionSimpleType `xml:",chardata"`
}

type Texts__1 struct {

	// Description detail.
	Text []*DescriptionSimpleType `xml:"Text,omitempty"`
}

type TicketBy__1 struct {
	Value string `xml:",chardata"`
}

type TicketDesigs__1 struct {
	TicketDesig []*TicketDesig__1 `xml:"TicketDesig,omitempty"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type TicketDocument__1 struct {
	CouponNumber *CouponNumber__1 `xml:"CouponNumber,omitempty"`

	// The ticket/document number for this transaction.

	TicketDocumentNbr *StringLength1to16 `xml:"TicketDocumentNbr,attr,omitempty"`

	// The date of issue of the document.

	DateOfIssue string `xml:"DateOfIssue,attr,omitempty"`
}

type TicketNumbers__1 struct {
	TicketNumber []*TicketNumber__1 `xml:"TicketNumber,omitempty"`
}

type Ticketing__1 struct {

	// When true, the Fare can be Purchased Without Issuing a Ticket.
	TicketlessInd bool `xml:"TicketlessInd,omitempty"`

	InstantPurchase *InstantPurchase `xml:"InstantPurchase,omitempty"`

	Endorsements *Endorsements__1 `xml:"Endorsements,omitempty"`
}

type TimeLimit__1 struct {
	PriceGuaranteeTimeLimit *PriceGuaranteeTimeLimit `xml:"PriceGuaranteeTimeLimit,omitempty"`

	TicketByTimeLimit *TicketByTimeLimit `xml:"TicketByTimeLimit,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TimeLimits__1 struct {
	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`
}

type TimeLimits__2 struct {
	PaymentTimeLimit *PaymentTimeLimit__2 `xml:"PaymentTimeLimit,omitempty"`

	DepositTimeLimit *DepositTimeLimit `xml:"DepositTimeLimit,omitempty"`

	NamingTimeLimit *NamingTimeLimit `xml:"NamingTimeLimit,omitempty"`

	BilateralTimeLimits *BilateralTimeLimits `xml:"BilateralTimeLimits,omitempty"`
}

type TimeStamp__1 struct {

	// Effective (start) Timestamp. Example: 2017-01-13T13:59:38Z

	Effective string `xml:"Effective,attr,omitempty"`

	// Expiration (end) Timestamp. Example: 2017-11-13T13:00:00Z

	Expiration string `xml:"Expiration,attr,omitempty"`
}

type TotalAmount__1 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type TotalOrderPrice__1 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type TotalPriceDetail__1 struct {
	TotalAmount *TotalAmount__3 `xml:"TotalAmount,omitempty"`

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	FareFiledIn *FareFiledIn `xml:"FareFiledIn,omitempty"`

	// Discount Information
	Discount *DiscountType `xml:"Discount,omitempty"`

	Surcharges *Surcharges__5 `xml:"Surcharges,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	Fees *Fees__5 `xml:"Fees,omitempty"`

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`
}

type TotalPriceDetail__2 struct {
	TotalAmount *TotalAmount__4 `xml:"TotalAmount,omitempty"`

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	FareFiledIn *FareFiledIn `xml:"FareFiledIn,omitempty"`

	// Discount Information
	Discount *DiscountType `xml:"Discount,omitempty"`

	Surcharges *Surcharges__6 `xml:"Surcharges,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	Fees *Fees__6 `xml:"Fees,omitempty"`

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`
}

type TotalPrice__1 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TotalPrice__2 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`
}

type Total__1 struct {
	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceSimpleType `xml:"CombinationPricing,omitempty"`

	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`
}

type Total__2 struct {
	*CurrencyAmountOptType

	// When true, all fee/ surcharge amounts are refundable.
	// Example: true

	RefundInd bool `xml:"refundInd,attr,omitempty"`
}

type Total__3 struct {
	*CurrencyAmountOptType
}

type Total__4 struct {
	*CurrencyAmountOptType
}

type TouchPoint__1 struct {
	Device *Device__3 `xml:"Device,omitempty"`

	// The travel event that triggered the request.
	// Example: Order/Buy, Check-In, In Flight
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element TTT (Touchpoint Transaction Type)
	Event *IATA_CodeType `xml:"Event,omitempty"`
}

type TransactionType__1 struct {
	Value *SecureTransactionSimpleType `xml:",chardata"`

	// Transaction Type context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Traveler__1 struct {
	PassengerMetadata *PassengerMetadata `xml:"PassengerMetadata,omitempty"`
}

type Type__1 struct {
	*CodesetType

	Position *Position `xml:"Position,omitempty"`
}

type Types__1 struct {
	Type []*Type__4 `xml:"Type,omitempty"`
}

type URLs__1 struct {
	*SecurePaymentUrlType
}

type USDOT__1 struct {
	*BagDisclosureType

	BagDisclosureKey *BagDisclosureKey `xml:"BagDisclosureKey,omitempty"`
}

type UnitPriceDetail__1 struct {
	TotalAmount *TotalAmount__5 `xml:"TotalAmount,omitempty"`

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	FareFiledIn *FareFiledIn `xml:"FareFiledIn,omitempty"`

	// Discount Information
	Discount *DiscountType `xml:"Discount,omitempty"`

	Surcharges *Surcharges__7 `xml:"Surcharges,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	Fees *Fees__7 `xml:"Fees,omitempty"`

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`
}

type Unit__1 struct {
	Value *RedemptionUnitSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type User__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Value__1 struct {
	Value *ShortDescSimpleType `xml:",chardata"`
}

type Value__2 struct {

	// Rule text value.
	Text *ShortDescSimpleType `xml:"Text,omitempty"`

	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`
}

type Values__1 struct {
	Value []*Value__3 `xml:"Value,omitempty"`
}

type Variance__1 struct {

	// Price Variance Amount. Example: .67 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`

	// Price Variance Rule Applied.
	Rule *PriceVarianceRuleType `xml:"Rule,omitempty"`
}

type WaitListing__1 struct {
	WaitListPreferences *WaitListPreferences__1 `xml:"WaitListPreferences,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Waiver__1 struct {

	// Fare Rule Waiver Code.
	//
	// Note: This is a code assigned by the validating carrier that allows fare rule modification or override.

	Code string `xml:"Code,omitempty"`

	// Fare Waiver Rule Type. Examples: ExchangeReissued, FareComponent
	Type *FareWaiverRuleSimpleType `xml:"Type,omitempty"`
}

type Word__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type ALaCarteOfferItem__1 struct {
	*ALaCarteOfferItemType
}

type ALaCarteOffer__3 struct {
	*OfferType

	// One Service or Service  Bundle which is priced per unit. A La Carte Offer Items are optional and variable quantities of these can be selected by any of the eligible passengers for the applicable segments and/or price classes.
	ALaCarteOfferItem []*ALaCarteOfferItemType `xml:"ALaCarteOfferItem,omitempty"`
}

type AcceptRepricedOrder__1 struct {
	ResponseID string `xml:"ResponseID,omitempty"`
}

type AirlineOffers__1 struct {
	AirlineOfferSnapshot *AirlineOfferSnapshot `xml:"AirlineOfferSnapshot,omitempty"`

	Offer []*Offer__5 `xml:"Offer,omitempty"`

	ALaCarteOffer *ALaCarteOffer__4 `xml:"ALaCarteOffer,omitempty"`

	PriceCalendar []*PriceCalendar__1 `xml:"PriceCalendar,omitempty"`
}

type AirportChangePreferences__1 struct {
	Value *PreferencesLevelSimpleType `xml:",chardata"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type AlternateOffer__1 struct {
	*OfferType

	AltBaggageOffer *AltBaggageOffer `xml:"AltBaggageOffer,omitempty"`

	AltOtherOffer *AltOtherOffer `xml:"AltOtherOffer,omitempty"`

	AltPricedFlightOffer *AltPricedFlightOffer `xml:"AltPricedFlightOffer,omitempty"`

	AltSeatOffer *AltSeatOffer `xml:"AltSeatOffer,omitempty"`
}

type Amendments__1 struct {
	Amendment []*Amendment__1 `xml:"Amendment,omitempty"`
}

type AppliedFilters__1 struct {
	AppliedFilter []*AppliedFilter__1 `xml:"AppliedFilter,omitempty"`
}

type AreaValue__2 struct {
	Value float64 `xml:",chardata"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitSimpleType `xml:"UOM,attr,omitempty"`
}

type AssociatedID__1 struct {
	OrderItemID *OrderItemID `xml:"OrderItemID,omitempty"`

	OfferItemID *OfferItemID `xml:"OfferItemID,omitempty"`

	ServiceID *ServiceID `xml:"ServiceID,omitempty"`
}

type Associations__4 struct {
	ServiceReference []*ServiceReference `xml:"ServiceReference,omitempty"`

	ServiceID []*ServiceID `xml:"ServiceID,omitempty"`
}

type AugPointAssoc__2 struct {

	// Reference to globally unique AUGMENTATION POINT instance/ class Key.
	//
	// Example: 2B75C565-5BB0- 4DCE-8DE6-67CB7B4F25A7

	KeyRef *InstanceClassRefSimpleType `xml:"KeyRef,attr,omitempty"`

	// Source Entity Code or ID. Examples: BA, WIDGETCO

	Owner *OwnerSimpleType `xml:"Owner,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type BagDetail__1 struct {

	// Validating Carrier Airline Designator.
	// A two-character alpha-numeric code assigned according to the IATA Resolution 762 or a three-letter airline designator assigned by ICAO.  Refer to IATA Airline Coding Directory .  Example: BA
	ValidatingCarrier *AirlineDesigSimpleType `xml:"ValidatingCarrier,omitempty"`

	//
	// Baggage Offer Association(s), including Shopper, Flight, Baggage Details, Optional Services and other miscellaneous association.
	//
	Associations *BagOfferAssocType `xml:"Associations,omitempty"`

	CheckedBags *CheckedBags `xml:"CheckedBags,omitempty"`

	CarryOnBags *CarryOnBags `xml:"CarryOnBags,omitempty"`

	// Baggage Disclosure information.
	Disclosure *BagDisclosureType `xml:"Disclosure,omitempty"`

	Price *Price__1 `xml:"Price,omitempty"`
}

type BagDetail__2 struct {

	// Validating Carrier Airline Designator.
	// A two-character alpha-numeric code assigned according to the IATA Resolution 762 or a three-letter airline designator assigned by ICAO.  Refer to IATA Airline Coding Directory .  Example: BA
	ValidatingCarrier *AirlineDesigSimpleType `xml:"ValidatingCarrier,omitempty"`

	CheckedBags *CheckedBags `xml:"CheckedBags,omitempty"`

	CarryOnBags *CarryOnBags `xml:"CarryOnBags,omitempty"`

	// Baggage Disclosure information.
	Disclosure *BagDisclosureType `xml:"Disclosure,omitempty"`

	Price *Price__2 `xml:"Price,omitempty"`

	BagDetailAssociation *BagDetailAssociation `xml:"BagDetailAssociation,omitempty"`
}

type BaggageAllowanceList__2 struct {
	BaggageAllowance []*BaggageAllowance__3 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__3 struct {
	BaggageAllowance []*BaggageAllowance__4 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__4 struct {
	BaggageAllowance []*BaggageAllowance__5 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__5 struct {
	BaggageAllowance []*BaggageAllowance__6 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__6 struct {
	BaggageAllowance []*BaggageAllowance__7 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__7 struct {
	BaggageAllowance []*BaggageAllowance__8 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__8 struct {
	BaggageAllowance []*BaggageAllowance__9 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__9 struct {
	BaggageAllowance []*BaggageAllowance__10 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowance__1 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__2 struct {

	// Reference to FlightIDs in DataLists
	FlightRefs string `xml:"FlightRefs,omitempty"`

	// Reference to PassengerIDs in DataLists
	PassengerRefs string `xml:"PassengerRefs,omitempty"`

	// Reference to BaggageAllowanceIDs in DataLists
	BaggageAllowanceRef string `xml:"BaggageAllowanceRef,omitempty"`
}

type BundleID__1 struct {
	Value *UniqueStringID_SimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type CabinType__1 struct {
	CabinTypeCode *CabinTypeCode__1 `xml:"CabinTypeCode,omitempty"`

	CabinTypeName *CabinTypeName__1 `xml:"CabinTypeName,omitempty"`
}

type Cabin__1 struct {
	CabinType *CabinType__2 `xml:"CabinType,omitempty"`

	CabinLayout *CabinLayout__1 `xml:"CabinLayout,omitempty"`

	Component []*Component__1 `xml:"Component,omitempty"`

	Row []*Row__3 `xml:"Row,omitempty"`

	// When true, this seat is on the upper deck.

	UpperDeckInd bool `xml:"UpperDeckInd,attr,omitempty"`
}

type Cabins__1 struct {
	Cabin []*Cabin__2 `xml:"Cabin,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CalendarDates__1 struct {

	// Number of days  befiore the specified date.

	DaysBefore int32 `xml:"DaysBefore,attr,omitempty"`

	// Number  of days after the specified date.

	DaysAfter int32 `xml:"DaysAfter,attr,omitempty"`
}

type Carrier__1 struct {
	*AirlineID_Type

	// Airline Carrier Application. Examples: Operating, Marketing

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`
}

type CertificateNumber__1 struct {
	Value *ContextSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CertificateNumber__2 struct {
	Value *ContextSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ChangeFees__1 struct {
	*OrderPenaltyType
}

type Characteristic__2 struct {
	*CodesetType

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type Classes__2 struct {
	Class []*Class__1 `xml:"Class,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ClientType__1 struct {
	Value *SecureTrxClientSimpleType `xml:",chardata"`

	// Client Type context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Code__5 struct {
	*FareBasisCodeType

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type Codes__1 struct {
	Code []*Code__6 `xml:"Code,omitempty"`
}

type Commission__1 struct {
	*CommissionType

	ActionType *ActionType__1 `xml:"ActionType,omitempty"`
}

type ContactList__1 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__10 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__11 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__12 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__13 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__14 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__15 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__16 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__17 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__18 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__19 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__2 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__3 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__4 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__5 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__6 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__7 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__8 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__9 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type CoordinateRadius__1 struct {
	Value float64 `xml:",chardata"`

	// Unit of measure to specify Kilometers and miles.

	UOM string `xml:"UOM,attr,omitempty"`
}

type CountryCode__1 struct {
	Value *CountrySimpleType `xml:",chardata"`
}

type CouponNumber__1 struct {
	TaxCouponInfo *TaxCouponInfo__1 `xml:"TaxCouponInfo,omitempty"`

	Tax *Tax__3 `xml:"Tax,omitempty"`

	UnticketedPointInfo *UnticketedPointInfo__1 `xml:"UnticketedPointInfo,omitempty"`

	// The coupon number.

	Number *Numeric1to4 `xml:"Number,attr,omitempty"`
}

type Currency__1 struct {

	// Input Payment Currency code. Example: USD
	//
	// Encoding Scheme: ISO 4217 (three alpha character) Currency Code
	InputCurrCode *CurrencySimpleType `xml:"InputCurrCode,omitempty"`

	// Settlement Payment Currency code. Example: CHF
	//
	// Encoding Scheme: ISO 4217 (three alpha character) Currency Code
	SettlementCurrCode *CurrencySimpleType `xml:"SettlementCurrCode,omitempty"`
}

type Currency__2 struct {
	EncodedCurrencyAmount *EncodedCurrencyAmount `xml:"EncodedCurrencyAmount,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type Currency__3 struct {
	EncodedCurrencyAmount *EncodedCurrencyAmount `xml:"EncodedCurrencyAmount,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type CustomerDevice__1 struct {
	*DeviceType

	// Browser Accept Header.
	//
	// Note: This contains MIME types accepted by the device.
	BowserAcceptHeader string `xml:"BowserAcceptHeader,omitempty"`

	// User Agent String.
	//
	// Note: This contains the user agent string.
	BrowserUserAgentHeader string `xml:"BrowserUserAgentHeader,omitempty"`

	// Device type. Example: Desktop, Mobile
	//
	// Note: This is the device that the transaction will occur on.
	DeviceCategoryCode *ContextSimpleType `xml:"DeviceCategoryCode,omitempty"`
}

type DataLists__20 struct {
	PassengerList *PassengerList__20 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__20 `xml:"ContactList,omitempty"`
}

type DataLists__21 struct {
	PassengerList *PassengerList__21 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__21 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__10 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__10 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__10 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__10 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__10 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__9 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__9 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__9 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__22 struct {
	PassengerList *PassengerList__22 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__22 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__11 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__11 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__11 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__11 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__11 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__10 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__10 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__10 `xml:"SeatDefinitionList,omitempty"`
}

type DataLists__23 struct {
	PassengerList *PassengerList__23 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__23 `xml:"ContactList,omitempty"`
}

type DataLists__24 struct {
	PassengerList *PassengerList__24 `xml:"PassengerList,omitempty"`

	ContactList *ContactList__24 `xml:"ContactList,omitempty"`

	BagDisclosureList *BagDisclosureList `xml:"BagDisclosureList,omitempty"`

	BaggageAllowanceList *BaggageAllowanceList__12 `xml:"BaggageAllowanceList,omitempty"`

	ClassOfServiceList *ClassOfServiceList `xml:"ClassOfServiceList,omitempty"`

	ContentSourceList *ContentSourceList `xml:"ContentSourceList,omitempty"`

	DescriptionList *DescriptionList__12 `xml:"DescriptionList,omitempty"`

	DisclosureList *DisclosureList `xml:"DisclosureList,omitempty"`

	FareList *FareList `xml:"FareList,omitempty"`

	FlightSegmentList *FlightSegmentList__12 `xml:"FlightSegmentList,omitempty"`

	FlightList *FlightList__12 `xml:"FlightList,omitempty"`

	OriginDestinationList *OriginDestinationList__12 `xml:"OriginDestinationList,omitempty"`

	InstructionsList *InstructionsList `xml:"InstructionsList,omitempty"`

	MediaList *MediaList `xml:"MediaList,omitempty"`

	PenaltyList *PenaltyList `xml:"PenaltyList,omitempty"`

	PriceClassList *PriceClassList__11 `xml:"PriceClassList,omitempty"`

	ServiceDefinitionList *ServiceDefinitionList__11 `xml:"ServiceDefinitionList,omitempty"`

	TermsList *TermsList `xml:"TermsList,omitempty"`

	SeatDefinitionList *SeatDefinitionList__11 `xml:"SeatDefinitionList,omitempty"`
}

type DateTime__1 struct {

	// Date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)

	Date string `xml:"Date,attr,omitempty"`

	// Time. Example: 09:15
	//
	// Encoding Scheme: ISO 8601 Military/ 24 Hour Format (HH:MM)

	Time *TimeSimpleType `xml:"Time,attr,omitempty"`

	// Date Application. Example: Departure, Arrival, Connection

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`
}

type DescriptionList__2 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__3 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__4 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__5 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__6 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__7 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__8 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__9 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type Detail__5 struct {

	// Penalty Type.
	// Examples: Cancellation, Change, NoShow, Upgrade, Other
	Type *PenaltySimpleType `xml:"Type,omitempty"`

	// Penalty application type.
	//
	// Encoding scheme: IATA Padis Codeset FAT - Fare or Application Penalty Type
	Application *IATA_CodeType `xml:"Application,omitempty"`

	Amounts *Amounts__1 `xml:"Amounts,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Detail__6 struct {

	// Price breakdown sub-total.
	//
	// Note: This is the total of all price breakdown items, excluding tax and/ or surcharge.
	SubTotal *CurrencyAmountOptType `xml:"SubTotal,omitempty"`

	// Price application. Example: Base Fare
	Application *ProperNameSimpleType `xml:"Application,omitempty"`

	// When true, this price amount is refundable.

	RefundInd bool `xml:"RefundInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Detail__7 struct {

	// Price application.  Example: Base Fare
	Application *ContextSimpleType `xml:"Application,omitempty"`

	// Price breakdown amount.  Example: 60 USD
	//
	// Notes:
	// 1. This is the individual price excluding base price, taxes and fees/ surcharges.
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`
}

type Device__3 struct {
	*CodesetType

	Position *Position `xml:"Position,omitempty"`
}

type DirectPreferences__1 struct {
	Value *PreferencesLevelSimpleType `xml:",chardata"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type DiscountLevel__1 struct {
	DiscountAmount *DiscountAmount `xml:"DiscountAmount,omitempty"`

	DiscountPercent *DiscountPercent `xml:"DiscountPercent,omitempty"`
}

type DisplayCriteria__1 struct {

	// If true, only display electronic tickets.

	ET_OnlyInd bool `xml:"ET_OnlyInd,attr,omitempty"`

	// When true, only display EMDs.

	EMD_OnlyInd bool `xml:"EMD_OnlyInd,attr,omitempty"`
}

type Embargo__1 struct {

	// The embargo information

	Info *AlphaNumericStringLength1to71 `xml:"Info,attr,omitempty"`
}

type Embargo__2 struct {

	// The embargo information

	Info *AlphaNumericStringLength1to71 `xml:"Info,attr,omitempty"`
}

type EncodingScheme__1 struct {
	*EncSchemeType
}

type End__1 struct {
	*CoreDateGrpType
}

type Endorsements__1 struct {

	// Ticket endorsement text.
	// Example: NONREF
	Endorsement []*ShortDescSimpleType `xml:"Endorsement,omitempty"`
}

type Equipment__1 struct {
	*AircraftCodeQueryType
}

type ExpirationDate__1 struct {
	*CoreDateGrpType
}

type FOPQualifier__1 struct {

	// Association to multiple Passenger instance(s). Example: Passenger1 Passenger2
	//
	// Note: May be Recognized or Anonymous Passenger (by PTC) instance(s).
	PassengerReferences *InstanceClassRefSimpleType `xml:"PassengerReferences,omitempty"`

	// The form of payment type. Examples: Credit Card, Cash.
	//
	// Encoding Scheme: IATA PADIS code list data element [9888] Form of Payment Identification
	Type []*IATA_CodeType `xml:"Type,omitempty"`
}

type FareBasisCode__1 struct {

	// Fare basis code. Example: Y26
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Fare basis application.
	// Examples: Requested, Ticketed, Other
	Application *FareBasisAppSimpleType `xml:"Application,omitempty"`
}

type FareBasis__2 struct {
	*FareBasisCodeType

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`
}

type Fare__1 struct {
	FareCode *FareCode `xml:"FareCode,omitempty"`

	FareDetail *FareDetail `xml:"FareDetail,omitempty"`
}

type FeeExemption__1 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__3 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__10 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__4 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__11 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__5 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__12 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__6 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__13 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__7 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__2 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__8 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__3 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__9 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__4 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__10 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__5 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__11 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__6 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__12 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__7 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__13 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__8 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__14 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type FeeExemption__9 struct {
	*AssociatedObjectBaseType

	Fee []*Fee__15 `xml:"Fee,omitempty"`

	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`

	// Exempt province(s).
	ProvinceCode []*ProperNameSimpleType `xml:"ProvinceCode,omitempty"`

	// =notes=:
	// 1. This must be provided for certain exemptions in the Canadian market.
	GovernmentBody *ProperNameSimpleType `xml:"GovernmentBody,omitempty"`
}

type Fee__1 struct {

	// Fee Amount. Example: 500 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Local fee amount. Example: 7 CHF
	LocalAmount *CurrencyAmountOptType `xml:"LocalAmount,omitempty"`

	// Fee designator. Example: USC
	Designator *CodesetValueSimpleType `xml:"Designator,omitempty"`

	// Fee/ surcharge Description.  Example: U.S Customs User Fee
	Description *ShortDescSimpleType `xml:"Description,omitempty"`

	// Fee nature.
	Nature *ProperNameSimpleType `xml:"Nature,omitempty"`

	// When true, this fee is approximate.

	ApproxInd bool `xml:"ApproxInd,attr,omitempty"`

	// When true, this fee amount is refundable.

	RefundInd bool `xml:"RefundInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__2 struct {

	// Carrier Fee Type.
	// Encoding Scheme: IATA Padis Codeset - List for data element 9750 (Option)
	//
	// Note: This is the type of the carrier fee related to a booking or ticketing or service.
	Type *IATA_CodeType `xml:"Type,omitempty"`

	FeeAmount []*FeeAmount__1 `xml:"FeeAmount,omitempty"`

	Taxes *Taxes__3 `xml:"Taxes,omitempty"`

	PaymentForm *PaymentForm `xml:"PaymentForm,omitempty"`

	FareComponent *FareComponent__1 `xml:"FareComponent,omitempty"`

	AirlineID *AirlineID__2 `xml:"AirlineID,omitempty"`

	// Fare class code. Example: M
	//
	// Note: This is the fare class code that must be used when matching alternate cateory data as specifed by the carrier fee fare rule code, carrier fee rule number, and carrier fee tariff number fields.

	FareClassCode string `xml:"FareClassCode,omitempty"`

	// Carrier fee pricing method. Example: A

	ReportingCode string `xml:"ReportingCode,omitempty"`
}

type Fees__4 struct {
	*FeeSurchargeType
}

type Fees__5 struct {
	*FeeSurchargeType
}

type Fees__6 struct {
	*FeeSurchargeType
}

type Fees__7 struct {
	*FeeSurchargeType
}

type FieldName__1 struct {
	Value string `xml:",chardata"`

	// If this field is required then true, otherwise false.

	Mandatory bool `xml:"Mandatory,attr,omitempty"`
}

type FieldName__2 struct {
	Value string `xml:",chardata"`

	// If this field is required then true, otherwise false.

	Mandatory bool `xml:"Mandatory,attr,omitempty"`
}

type FiledInCurrency__1 struct {
	CurrCode *CurrCode `xml:"CurrCode,omitempty"`

	// Base Fare Amount as originally filed.

	Amount *NumericStringLength1to19 `xml:"Amount,attr,omitempty"`
}

type Filters__1 struct {
	Agency *Agency__1 `xml:"Agency,omitempty"`

	Airline *Airline__3 `xml:"Airline,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	CancelDateRange *CancelDateRange__1 `xml:"CancelDateRange,omitempty"`

	CreateDateRange *CreateDateRange__1 `xml:"CreateDateRange,omitempty"`

	Flight *Flight__11 `xml:"Flight,omitempty"`

	Group *Group__10 `xml:"Group,omitempty"`

	Passenger *Passenger__15 `xml:"Passenger,omitempty"`

	Payments *Payments__7 `xml:"Payments,omitempty"`

	TicketDocument *TicketDocument__2 `xml:"TicketDocument,omitempty"`

	TravelDateRange *TravelDateRange__1 `xml:"TravelDateRange,omitempty"`

	Service *Service__7 `xml:"Service,omitempty"`
}

type Filters__2 struct {
	OrderID *OrderID `xml:"OrderID,omitempty"`

	Flight *Flight__12 `xml:"Flight,omitempty"`

	Passengers *Passengers__3 `xml:"Passengers,omitempty"`

	TicketDocument *TicketDocument__3 `xml:"TicketDocument,omitempty"`

	Group *Group__11 `xml:"Group,omitempty"`

	Payments *Payments__8 `xml:"Payments,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`
}

type FlightList__2 struct {
	Flight []*Flight__13 `xml:"Flight,omitempty"`
}

type FlightList__3 struct {
	Flight []*Flight__14 `xml:"Flight,omitempty"`
}

type FlightList__4 struct {
	Flight []*Flight__15 `xml:"Flight,omitempty"`
}

type FlightList__5 struct {
	Flight []*Flight__16 `xml:"Flight,omitempty"`
}

type FlightList__6 struct {
	Flight []*Flight__17 `xml:"Flight,omitempty"`
}

type FlightList__7 struct {
	Flight []*Flight__18 `xml:"Flight,omitempty"`
}

type FlightList__8 struct {
	Flight []*Flight__19 `xml:"Flight,omitempty"`
}

type FlightList__9 struct {
	Flight []*Flight__20 `xml:"Flight,omitempty"`
}

type FlightSegmentList__2 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__3 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__4 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__5 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__6 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__7 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__8 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__9 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegment__2 struct {
	AirlineID string `xml:"AirlineID,omitempty"`

	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	FlightNumber *FlightNumber `xml:"FlightNumber,omitempty"`

	ClassOfService *ClassOfService__1 `xml:"ClassOfService,omitempty"`
}

type Flight__10 struct {
	*FlightOnlyType
}

type Flight__6 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__4 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__7 struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	FlightNumber *FlightNumber `xml:"FlightNumber,omitempty"`

	DepartureDate *DepartureDate `xml:"DepartureDate,omitempty"`

	DepartureCode *DepartureCode `xml:"DepartureCode,omitempty"`

	ArrivalCode *ArrivalCode `xml:"ArrivalCode,omitempty"`
}

type Flight__8 struct {
	*FlightOnlyType
}

type Flight__9 struct {
	*FlightOnlyType
}

type FlightsOverview__1 struct {
	FlightRef []*FlightRef__1 `xml:"FlightRef,omitempty"`

	// Itinerary-level price class (eg. most restrictive applies)
	ItineraryPriceClassRef string `xml:"ItineraryPriceClassRef,omitempty"`
}

type Fulfillment__2 struct {
	OfferValidDates *OfferValidDates__3 `xml:"OfferValidDates,omitempty"`

	Location *Location__4 `xml:"Location,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Given__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Given__2 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Group__7 struct {

	// Reference to globally unique TARGET GROUP instance/ class Key.
	//
	// Example: A3E9CF38-B140-4E03-A550-493A817A2BC9

	GroupKeyRef *InstanceClassRefSimpleType `xml:"GroupKeyRef,attr,omitempty"`

	// Reference to globally unique TARGET GROUP COLLECTION instance/ class Key.
	//
	// Example: {AEF93466-0464-46C6-89B5-487DF5007D3E}

	TokenRef *TokenID_SimpleType `xml:"TokenRef,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type Group__8 struct {
	*GroupType

	ActionType *ActionType__2 `xml:"ActionType,omitempty"`
}

type Group__9 struct {
	*GroupType

	ActionType *ActionType__3 `xml:"ActionType,omitempty"`
}

type Guarantee__1 struct {

	// Unique Inventory Guarantee ID. Examples: INVREF123456, 68E0-675C
	//
	// Note: This is a unique identifier issued by an Airline to reference that inventory for a specified offer will be guaranteed as available for a period.
	InvGuaranteeID *UniqueStringID_SimpleType `xml:"InvGuaranteeID,omitempty"`

	InventoryGuaranteeTimeLimits *InventoryGuaranteeTimeLimits `xml:"InventoryGuaranteeTimeLimits,omitempty"`

	Association *Association__2 `xml:"Association,omitempty"`

	// When true, the inventory was waitlisted.

	WaitlistedInd bool `xml:"WaitlistedInd,attr,omitempty"`
}

type Guarantees__1 struct {
	Guarantee []*Guarantee__2 `xml:"Guarantee,omitempty"`
}

type ID__2 struct {
	Value *UniqueStringID_SimpleType `xml:",chardata"`

	// Airline Merchant ID context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Indicators__1 struct {

	// When true, this flight OD pair should be priced.

	PricingIndicator bool `xml:"PricingIndicator,attr,omitempty"`

	// When true, there are one or more connections for this flight.

	ConnectionIndicator bool `xml:"ConnectionIndicator,attr,omitempty"`

	// When true, an electronic ticket may be issued.

	E_TicketIndicator bool `xml:"E_TicketIndicator,attr,omitempty"`

	// When true, the fare can be purchased without issuing a ticket.

	TicketlessIndicator bool `xml:"TicketlessIndicator,attr,omitempty"`
}

type Interline__1 struct {
	Value *IATA_CodeType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type IntermediateStop__1 struct {

	// Airport city code.

	AiportCode string `xml:"AiportCode,attr,omitempty"`
}

type InventoryGuarantee__1 struct {

	//
	// Unique Inventory Guarantee ID. Examples: INVREF123456, 68E0-675C Note: This is a unique identifier issued by an Airline to reference that inventory for a specified offer will be guaranteed as available for a period.
	//
	InventoryGuaranteeID *UniqueStringID_SimpleType `xml:"InventoryGuaranteeID,omitempty"`

	InventoryGuaranteeTimeLimits *InventoryGuaranteeTimeLimits `xml:"InventoryGuaranteeTimeLimits,omitempty"`
}

type InventoryGuarantee__2 struct {

	//
	// Unique Inventory Guarantee ID. Examples: INVREF123456, 68E0-675C Note: This is a unique identifier issued by an Airline to reference that inventory for a specified offer will be guaranteed as available for a period.
	//
	InvGuaranteeID *UniqueStringID_SimpleType `xml:"InvGuaranteeID,omitempty"`

	InventoryGuaranteeTimeLimits *InventoryGuaranteeTimeLimits `xml:"InventoryGuaranteeTimeLimits,omitempty"`

	//
	// Inventory Guarantee Association(s), including Order, Order Item, Passenger, Group, Offer Item and Service.
	//
	Associations *MultiAssociationType `xml:"Associations,omitempty"`
}

type KeyWord__1 struct {
	*KeyWordType

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type KeywordPreference__1 struct {
	*KeyWordType

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type List__2 struct {

	// Reference to globally unique TARGET LIST instance/ class Key.
	//
	// Example: {E7A28E6D-045C-4BE1-B85E-304262911773}

	ListKeyRef *InstanceClassRefSimpleType `xml:"ListKeyRef,attr,omitempty"`

	// Reference to globally unique TARGET LIST COLLECTION instance/ class Key.
	//
	// Example: E20C732E-17AE-40E8-B3DB-FCC04585DD4C

	TokenRef *TokenID_SimpleType `xml:"TokenRef,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type Location__3 struct {
	AirportFulfillmentLocation *AirportFulfillmentLocation `xml:"AirportFulfillmentLocation,omitempty"`

	OtherFulfillmentLocation *OtherFulfillmentLocation `xml:"OtherFulfillmentLocation,omitempty"`
}

type Match__1 struct {
	AugmentationPoint *AugmentationPoint `xml:"AugmentationPoint,omitempty"`
}

type Middle__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Middle__2 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MinValue__1 struct {
}

type Name__10 struct {
	Value string `xml:",chardata"`

	// Airline Merchant Name context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Name__11 struct {
	Surname *Surname__3 `xml:"Surname,omitempty"`

	Given *Given__3 `xml:"Given,omitempty"`

	// Name Title. Examples: MR, MRS, DR
	Title string `xml:"Title,omitempty"`

	SurnameSuffix *SurnameSuffix__2 `xml:"SurnameSuffix,omitempty"`

	Middle *Middle__3 `xml:"Middle,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	ObjectMetaReferences *InstanceClassRefSimpleType `xml:"ObjectMetaReferences,attr,omitempty"`
}

type Named__1 struct {
	Countries *Countries__2 `xml:"Countries,omitempty"`

	Entities *Entities__2 `xml:"Entities,omitempty"`

	Territories *Territories__2 `xml:"Territories,omitempty"`

	TaxCodes *TaxCodes__1 `xml:"TaxCodes,omitempty"`
}

type Node__1 struct {
	*NodePathType
}

type NonStopPreferences__1 struct {
	Value *PreferencesLevelSimpleType `xml:",chardata"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type Number__2 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferID__1 struct {
}

type OfferItem__1 struct {

	// Reference to passenger(s) for which this OfferItem and selected Services (in case of Service Bundles) applies.
	PassengerRefs string `xml:"PassengerRefs,omitempty"`

	ALaCarteSelection *ALaCarteSelection__1 `xml:"ALaCarteSelection,omitempty"`

	ServiceSelection []*ServiceSelection__1 `xml:"ServiceSelection,omitempty"`

	SeatSelection *SeatSelection__1 `xml:"SeatSelection,omitempty"`

	// Reference to the OfferItemID of the selected OfferItem (contained in either a standard Offer or an a-la-carte Offer) returned in a previous shopping response.

	OfferItemID string `xml:"OfferItemID,attr,omitempty"`
}

type OfferSubCode__1 struct {
	Value *CodesetValueSimpleType `xml:",chardata"`
}

type OfferValidDates__2 struct {
	Start *Start__2 `xml:"Start,omitempty"`

	End *End__2 `xml:"End,omitempty"`
}

type Offer__3 struct {
	*OfferType

	FlightsOverview *FlightsOverview__2 `xml:"FlightsOverview,omitempty"`

	// A set of one or more Service s. The Offer Item assigns a total price for all included services for all passengers and all segments referenced. Once constructed, the OfferItem cannot be modifed.
	OfferItem []*OfferItemType `xml:"OfferItem,omitempty"`
}

type Offer__4 struct {

	// Reference to the segment for which seat maps are required. Absence of this element is equivalent to an all-segments request
	SegmentID []string `xml:"SegmentID,omitempty"`

	// Reference to the passenger for which seat maps are required. Absence of this element is equivalent to an all-passengers request
	PassengerID []string `xml:"PassengerID,omitempty"`

	// Reference to the OfferID of the selected Offer (either a standard Offer or an a-la-carte Offer) returned in a previous shopping response.

	OfferID string `xml:"OfferID,attr,omitempty"`

	// Designator of Airline that owns/ assigned these IDs. Examples: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code

	Owner string `xml:"Owner,attr,omitempty"`

	// Reference to unique shopping session response ID, as provided in the airline's previous shopping response.

	ResponseID string `xml:"ResponseID,attr,omitempty"`
}

type Offers__1 struct {
	Offer []*Offer__6 `xml:"Offer,omitempty"`
}

type OperatingCarrier__5 struct {
	*OperatingCarrierFlightType

	Disclosures *Disclosures `xml:"Disclosures,omitempty"`
}

type OrderID__1 struct {
	Value string `xml:",chardata"`

	// Airline Designator of airline that owns/ assigned this ID. Example: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Codes

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`
}

type OrderServicing__1 struct {
	AcceptOffer *AcceptOffer__1 `xml:"AcceptOffer,omitempty"`

	Delete *Delete__1 `xml:"Delete,omitempty"`
}

type Order__1 struct {

	// Reference to the passenger for which seat maps are required. Absence of this element out is equivalent to an all-passengers request
	PassengerID []string `xml:"PassengerID,omitempty"`

	// Reference to the segment for which seat maps are required. Absence of this element out is equivalent to an all-segments request
	SegmentID []string `xml:"SegmentID,omitempty"`

	// The airline-assigned unique Order ID. Example: ORDER-c98c-4759-a20b

	OrderID *UniqueID_SimpleType `xml:"OrderID,attr,omitempty"`

	// Airline Designator of airline that owns/ assigned this ID. Example: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Codes

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`
}

type Order__2 struct {

	// The airline-assigned unique Order ID. Example: ORDER-c98c-4759-a20b

	OrderID *UniqueID_SimpleType `xml:"OrderID,attr,omitempty"`

	// Airline Designator of airline that owns/ assigned this ID. Example: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Codes

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`

	// Deep linking into another site to complete the transaction.

	WebAddressID string `xml:"WebAddressID,attr,omitempty"`

	// Object Metadata Association(s). Example: meta1 meta3

	MetadataRefs *InstanceClassRefSimpleType `xml:"MetadataRefs,attr,omitempty"`
}

type Order__3 struct {
	*OrderRequestType
}

type Order__4 struct {
	*OrderType

	// Order Item Detail.
	OrderItems *OrderItemType `xml:"OrderItems,omitempty"`
}

type Orders__1 struct {
	Order []*Order__5 `xml:"Order,omitempty"`
}

type OriginDestinationList__2 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__3 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__4 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__5 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__6 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__7 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__8 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__9 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestination__4 struct {
	DepartureCode *DepartureCode `xml:"DepartureCode,omitempty"`

	ArrivalCode *ArrivalCode `xml:"ArrivalCode,omitempty"`

	CheckedBags *CheckedBags `xml:"CheckedBags,omitempty"`

	CarryOnBags *CarryOnBags `xml:"CarryOnBags,omitempty"`

	Services *Services__5 `xml:"Services,omitempty"`

	BaggageDeterminingCarrier *BaggageDeterminingCarrier__1 `xml:"BaggageDeterminingCarrier,omitempty"`
}

type OriginDestination__5 struct {
	*FlightType
}

type OriginDestination__6 struct {
	*FlightType
}

type OriginDestination__7 struct {
	*FlightType
}

type OriginDestination__8 struct {
	*FlightType
}

type OriginalTransactionID__3 struct {
	Value string `xml:",chardata"`

	// ID or name of the source of this Transaction ID.  Examples: UA, ABC123
	//
	// Note: If this is an airline ID, use IATA/ A4A (two or three character) Airline Designator Code Encoding Scheme.

	Source *ProperNameSimpleType `xml:"source,attr,omitempty"`
}

type OtherAssociation__5 struct {

	//
	// Named Instance Association Type. Examples: CarryOnAllowance, MediaGroup
	//

	Type *OtherOrderAssocListType `xml:"Type,attr,omitempty"`

	//
	// Associated object instance value. Example: mediagrp1
	//

	RefValue string `xml:"RefValue,attr,omitempty"`
}

type OtherID__2 struct {
	Value string `xml:",chardata"`

	// Other ID name.
	// Example: Datalex

	Name *ProperNameSimpleType `xml:"name,attr,omitempty"`
}

type OtherID__3 struct {
	Value *CodesetValueSimpleType `xml:",chardata"`

	// Other identification description.  Examples: Federal Tax ID, TICO ID

	Description *ShortDescSimpleType `xml:"Description,attr,omitempty"`
}

type OtherID__4 struct {
	Value string `xml:",chardata"`

	// Other identification description. Examples: Federal Tax ID, TICO ID

	Description *ShortDescSimpleType `xml:"Description,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OtherLimit__1 struct {
	PriceGuaranteeTimeLimit *PriceGuaranteeTimeLimit `xml:"PriceGuaranteeTimeLimit,omitempty"`

	TicketByTimeLimit *TicketByTimeLimit `xml:"TicketByTimeLimit,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`

	// Object globally unique Instance ID. Example: obj1

	ObjectKey string `xml:"ObjectKey,attr,omitempty"`
}

type OtherMetadata__1 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__10 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__11 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	ContentMetadatas *ContentMetadatas `xml:"ContentMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__12 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__13 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	ContentMetadatas *ContentMetadatas `xml:"ContentMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__14 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__15 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__16 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__17 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__18 struct {
	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	ContentMetadatas *ContentMetadatas `xml:"ContentMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__19 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	ContentMetadatas *ContentMetadatas `xml:"ContentMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__2 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__20 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__3 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__4 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__5 struct {
	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	ContentMetadatas *ContentMetadatas `xml:"ContentMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__6 struct {
	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`

	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`
}

type OtherMetadata__7 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__8 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OtherMetadata__9 struct {
	AircraftMetadatas *AircraftMetadatas `xml:"AircraftMetadatas,omitempty"`

	AirportMetadatas *AirportMetadatas `xml:"AirportMetadatas,omitempty"`

	CityMetadatas *CityMetadatas `xml:"CityMetadatas,omitempty"`

	CodesetMetadatas *CodesetMetadatas `xml:"CodesetMetadatas,omitempty"`

	ContactMetadatas *ContactMetadatas `xml:"ContactMetadatas,omitempty"`

	CountryMetadatas *CountryMetadatas `xml:"CountryMetadatas,omitempty"`

	CurrencyMetadatas *CurrencyMetadatas `xml:"CurrencyMetadatas,omitempty"`

	DescriptionMetadatas *DescriptionMetadatas `xml:"DescriptionMetadatas,omitempty"`

	EquivalentID_Metadatas *EquivalentID_Metadatas `xml:"EquivalentID_Metadatas,omitempty"`

	LanguageMetadatas *LanguageMetadatas `xml:"LanguageMetadatas,omitempty"`

	PaymentCardMetadatas *PaymentCardMetadatas `xml:"PaymentCardMetadatas,omitempty"`

	PaymentFormMetadatas *PaymentFormMetadatas `xml:"PaymentFormMetadatas,omitempty"`

	PriceMetadatas *PriceMetadatas `xml:"PriceMetadatas,omitempty"`

	RuleMetadatas *RuleMetadatas `xml:"RuleMetadatas,omitempty"`

	StateProvMetadatas *StateProvMetadatas `xml:"StateProvMetadatas,omitempty"`

	ZoneMetadatas *ZoneMetadatas `xml:"ZoneMetadatas,omitempty"`

	AddressMetadatas *AddressMetadatas `xml:"AddressMetadatas,omitempty"`
}

type OvernightStopPreferences__1 struct {
	Value *PreferencesLevelSimpleType `xml:",chardata"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type OwnerID__1 struct {
	Value string `xml:",chardata"`

	// Owner Name. Example: British Airways

	Name string `xml:"Name,attr,omitempty"`
}

type Parameters__4 struct {

	// Challenge Question.
	// Example: What is a memorable place?
	ChallengeQuestion *ShortDescSimpleType `xml:"ChallengeQuestion,omitempty"`

	// Answer Characters Prompt.
	// Example: Please provide the 1st, 3rd, 4th and the last characters from your memorable place.
	PhrasePrompt *ShortDescSimpleType `xml:"PhrasePrompt,omitempty"`

	Positions *Positions__1 `xml:"Positions,omitempty"`
}

type Participant__1 struct {
	AggregatorParticipant *AggregatorParticipant `xml:"AggregatorParticipant,omitempty"`

	EnabledSystemParticipant *EnabledSystemParticipant `xml:"EnabledSystemParticipant,omitempty"`

	MarketingCarrierParticipant *MarketingCarrierParticipant `xml:"MarketingCarrierParticipant,omitempty"`

	ORA_Participant *ORA_Participant `xml:"ORA_Participant,omitempty"`

	OperatingCarrierParticipant *OperatingCarrierParticipant `xml:"OperatingCarrierParticipant,omitempty"`

	POA_Participant *POA_Participant `xml:"POA_Participant,omitempty"`

	RetailSupplierParticipant *RetailSupplierParticipant `xml:"RetailSupplierParticipant,omitempty"`

	TravelAgencyParticipant *TravelAgencyParticipant `xml:"TravelAgencyParticipant,omitempty"`

	CorporateParticipant *CorporateParticipant `xml:"CorporateParticipant,omitempty"`
}

type PassengerList__1 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__10 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__11 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__12 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__13 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__14 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__15 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__16 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__17 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__18 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__19 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__2 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__3 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__4 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__5 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__6 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__7 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__8 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__9 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerRefs__2 struct {
	Value string `xml:",chardata"`

	// If 'true', this service applies to any passenger

	AnyPassengerInd bool `xml:"AnyPassengerInd,attr,omitempty"`
}

type PassengerServicing__1 struct {
	New *New__1 `xml:"New,omitempty"`

	Previous *Previous__1 `xml:"Previous,omitempty"`
}

type Passengers__2 struct {
	PassengerReference *PassengerReference `xml:"PassengerReference,omitempty"`

	GroupReference *GroupReference `xml:"GroupReference,omitempty"`
}

type PaymentTimeLimit__2 struct {
	*CoreDateGrpType

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Payment__1 struct {
	*OrderPaymentFormType

	Offers *Offers__2 `xml:"Offers,omitempty"`
}

type Payment__2 struct {
	*OrderPaymentFormType

	Offers *Offers__3 `xml:"Offers,omitempty"`
}

type Payments__4 struct {
	Payment []*Payment__3 `xml:"Payment,omitempty"`
}

type Payments__5 struct {
	Payment []*Payment__4 `xml:"Payment,omitempty"`
}

type Payments__6 struct {

	// Payment detail, including association(s).
	Payment []*PaymentMethodType `xml:"Payment,omitempty"`
}

type PriceClassList__1 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__2 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__3 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__4 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__5 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__6 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__7 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__8 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceDetail__2 struct {
	TotalAmount *TotalAmount__6 `xml:"TotalAmount,omitempty"`

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	FareFiledIn *FareFiledIn `xml:"FareFiledIn,omitempty"`

	// Discount Information
	Discount *DiscountType `xml:"Discount,omitempty"`

	Surcharges *Surcharges__8 `xml:"Surcharges,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	//
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	Fees *Fees__8 `xml:"Fees,omitempty"`

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`
}

type PriceQuotes__1 struct {
	PriceQuote []*PriceQuote__1 `xml:"PriceQuote,omitempty"`
}

type PriceVarianceRule__1 struct {

	// Rule sequence (or order) number. Example: 1
	SequenceNbr int32 `xml:"SequenceNbr,omitempty"`

	RuleID *RuleID__2 `xml:"RuleID,omitempty"`

	AcceptableVariance *AcceptableVariance__2 `xml:"AcceptableVariance,omitempty"`

	Name *Name__12 `xml:"Name,omitempty"`

	//
	// Entity that owns/ assigned this Rule. Example: BA Note: If this is an airline, the IATA/ A4A (two or three character) Airline Designator Code should be used.
	//
	Owner *ContextSimpleType `xml:"Owner,omitempty"`

	RuleValid *RuleValid__2 `xml:"RuleValid,omitempty"`

	Currencies *Currencies__2 `xml:"Currencies,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`

	Remarks *Remarks `xml:"Remarks,omitempty"`
}

type PriceVariance__1 struct {
	RuleID *RuleID__3 `xml:"RuleID,omitempty"`

	Amount *Amount__7 `xml:"Amount,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`
}

type PricingParameters__1 struct {

	// When true, this request is to be handled by an auto-exchange process.

	AutoExchRequestInd bool `xml:"AutoExchRequestInd,attr,omitempty"`

	// When true, award eligible in addition to priced offers and fares is requested.

	IncludeAwardRequestInd bool `xml:"IncludeAwardRequestInd,attr,omitempty"`

	// When true, only award eligible offers/ fares are requested.

	AwardOnlyRequestInd bool `xml:"AwardOnlyRequestInd,attr,omitempty"`

	// When true, Simple Pricing  for flight offers is requested.

	SimpleRequestInd bool `xml:"SimpleRequestInd,attr,omitempty"`
}

type ProcessingInfo__1 struct {
	AddrVerification *AddrVerification__1 `xml:"AddrVerification,omitempty"`

	// The unique Cardholder Authentication Verification Value (CAVV) associated with the transaction, provided by the card issuer.
	// Example: Q0FWVkNBVlZDQVZWQ0FWVkNBVlY=
	//
	// Note: Only returned if card is enrolled and authenticated.
	CAVV string `xml:"CAVV,omitempty"`

	CustomerAuthStatus *CustomerAuthStatus__1 `xml:"CustomerAuthStatus,omitempty"`

	// The ECI (E-Commerce Indicator) security level associated with the transaction.
	// Example: 05
	//
	// Note: Only returned if card is enrolled and authenticated.
	ECI *CodesetValueSimpleType `xml:"ECI,omitempty"`
}

type Promotion__1 struct {
	*PromotionType

	Associations *Associations `xml:"Associations,omitempty"`
}

type Promotion__2 struct {
	*PromotionType

	Associations *Associations `xml:"Associations,omitempty"`
}

type Promotions__5 struct {
	Promotion []*Promotion__3 `xml:"Promotion,omitempty"`
}

type Promotions__6 struct {
	Promotion []*Promotion__4 `xml:"Promotion,omitempty"`
}

type Qualifiers__1 struct {
	PaymentCards *PaymentCards__1 `xml:"PaymentCards,omitempty"`

	Programs *Programs__1 `xml:"Programs,omitempty"`

	Promotions *Promotions__7 `xml:"Promotions,omitempty"`

	Seat *Seat__1 `xml:"Seat,omitempty"`

	// Social Media Account Qualifier.
	SocialMedia *SocialQualiferType `xml:"SocialMedia,omitempty"`

	SpecialNeeds *SpecialNeeds__1 `xml:"SpecialNeeds,omitempty"`

	// TRIP PURPOSE Qualifier.
	TripPurpose *TripPurposeListType `xml:"TripPurpose,omitempty"`

	Locations *Locations__1 `xml:"Locations,omitempty"`
}

type Query__21 struct {

	// When true, the Seller wants to proceed with Order creation if one of multiple forms of payment provided fails. Note: This supports multi payment form-enabled systems where one Traveler may provide multiple FOPs, or individual Travelers may each provide their own FOP.
	//

	ProceedOnFailureInd bool `xml:"ProceedOnFailureInd,attr,omitempty"`
}

type RedEyePreferences__1 struct {
	Value *PreferencesLevelSimpleType `xml:",chardata"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type ReferencePoint__1 struct {
	Value *ContextSimpleType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type ReferencePoint__2 struct {
	Value *ContextSimpleType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type RefundFOP_Preference__2 struct {
	Voucher *Voucher `xml:"Voucher,omitempty"`

	PaymentCard *PaymentCard `xml:"PaymentCard,omitempty"`

	Cash *Cash `xml:"Cash,omitempty"`

	BankAccount *BankAccount `xml:"BankAccount,omitempty"`

	Check *Check `xml:"Check,omitempty"`

	// If true, preference is to apply refund to carrier credit.
	CarrierCredit bool `xml:"CarrierCredit,omitempty"`

	// When true, it is requested that the refund be applied to the original FOP

	OriginalFOP_Ind bool `xml:"OriginalFOP_Ind,attr,omitempty"`
}

type Reprice__1 struct {

	// Optionally specify which OrderItem needs to be repriced.
	OrderItemID []string `xml:"OrderItemID,omitempty"`
}

type RepricedOffer__1 struct {
	RepricedOfferItem []*RepricedOfferItem__1 `xml:"RepricedOfferItem,omitempty"`

	// Airline-assigned unique Offer identifier.

	OfferID string `xml:"OfferID,attr,omitempty"`

	// Airline designator of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code

	Owner *AirlineDesigSimpleType `xml:"Owner,attr,omitempty"`

	// The POA OrderID should only go to the ORA, not back to the seller.
	// 1. ORA
	// 2. POA

	OwnerType string `xml:"OwnerType,attr,omitempty"`

	// Indicator to specify if the offer relates to requested date. For example in calendar search, this indicator will be set to 'true' if this airline offer is for a requested date and will not be present (or will be set to 'false' if airline offer is for another date than requested one.

	RequestedDateInd bool `xml:"RequestedDateInd,attr,omitempty"`
}

type ReshopOffers__1 struct {
	ReshopOffer []*ReshopOffer__1 `xml:"ReshopOffer,omitempty"`

	ALaCarteOffer *ALaCarteOffer__5 `xml:"ALaCarteOffer,omitempty"`
}

type Reshop__1 struct {
	OrderServicing *OrderServicing__2 `xml:"OrderServicing,omitempty"`

	NameChange *NameChange__1 `xml:"NameChange,omitempty"`
}

type Results__6 struct {

	//
	// Payment Failure Code (and optional definition.) Encoding Scheme: IATA Padis Codeset - List for data element [9321] Application Error, coded
	//
	Code *IATA_CodeType `xml:"Code,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`

	//
	// When true, one of multiple forms of payment provided failed.
	//

	PaymentFailureInd bool `xml:"PaymentFailureInd,attr,omitempty"`
}

type Rows__1 struct {
	Feature []*Feature__2 `xml:"Feature,omitempty"`

	Number []*Number__3 `xml:"Number,omitempty"`
}

type RuleCategories__1 struct {
	FareRuleCategory []*FareRuleCategory `xml:"FareRuleCategory,omitempty"`
}

type Rule__2 struct {
	FareRuleCategory *FareRuleCategory `xml:"FareRuleCategory,omitempty"`

	// Fare Rule Text.
	Text []*DescriptionSimpleType `xml:"Text,omitempty"`
}

type SeatData__1 struct {
	*SeatDataType
}

type SeatDefinitionList__1 struct {
	SeatDefinition []*SeatDefinition__1 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__2 struct {
	SeatDefinition []*SeatDefinition__2 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__3 struct {
	SeatDefinition []*SeatDefinition__3 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__4 struct {
	SeatDefinition []*SeatDefinition__4 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__5 struct {
	SeatDefinition []*SeatDefinition__5 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__6 struct {
	SeatDefinition []*SeatDefinition__6 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__7 struct {
	SeatDefinition []*SeatDefinition__7 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__8 struct {
	SeatDefinition []*SeatDefinition__8 `xml:"SeatDefinition,omitempty"`
}

type Seats__1 struct {
	Characteristic []*Characteristic__3 `xml:"Characteristic,omitempty"`

	Position *Position__1 `xml:"Position,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type SegmentRef__1 struct {
	Value string `xml:",chardata"`

	// Flight slice on point. Example: TPA
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code

	OnPoint *AirportCitySimpleType `xml:"OnPoint,attr,omitempty"`

	// Flight slice off point. Example: LHR
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code

	OffPoint *AirportCitySimpleType `xml:"OffPoint,attr,omitempty"`
}

type SegmentRefs__2 struct {
	Value string `xml:",chardata"`

	// If 'true', this service applies to any segment

	AnySegmentInd bool `xml:"AnySegmentInd,attr,omitempty"`
}

type SelectedSeat__1 struct {
	Seat *Seat__2 `xml:"Seat,omitempty"`

	SegmentRef *SegmentRef__2 `xml:"SegmentRef,omitempty"`

	ServiceDefinitionRef *ServiceDefinitionRef__4 `xml:"ServiceDefinitionRef,omitempty"`
}

type Selection__1 struct {

	// MINIMUM quantity of bundle items that must be selected.  Example: 2
	MinimumQuantity int32 `xml:"MinimumQuantity,omitempty"`

	// MAXIMUM quantity of bundle items that may be selected.  Example: 4
	MaximumQuantity int32 `xml:"MaximumQuantity,omitempty"`
}

type ServiceAttribute__1 struct {

	// SSR Field Name.
	Name string `xml:"Name,omitempty"`

	// Field Value
	Value string `xml:"Value,omitempty"`
}

type ServiceDefinitionList__1 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__2 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__3 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__4 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__5 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__6 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__7 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__8 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionRef__1 struct {
	Value string `xml:",chardata"`

	// Set to 'true' when this Service Definition is optional (i.e. can be selected or not by the passenger)

	OptionalInd bool `xml:"OptionalInd,attr,omitempty"`
}

type ServiceDefinitionRef__2 struct {
	Value string `xml:",chardata"`
}

type ServiceDefinitionRef__3 struct {
	Value string `xml:",chardata"`

	// Reference to one or more segments in the Datalists to restrict the eligibility of the associated ServiceDefinition.

	SegmentRefs string `xml:"SegmentRefs,attr,omitempty"`
}

type Service__5 struct {
	PassengerRef string `xml:"PassengerRef,omitempty"`

	// Create dependencies with parent services to which this particular ServiceItem is linked to (eg. a meal to a flight). Can reference ServiceItems across different OfferItems within the same Offer.
	ServiceRef string `xml:"ServiceRef,omitempty"`

	// Reference a segment being sold as part of this OrderItem/Service.
	SegmentRef string `xml:"SegmentRef,omitempty"`

	ServiceDefinitionRef *ServiceDefinitionRef__5 `xml:"ServiceDefinitionRef,omitempty"`

	SelectedSeat *SelectedSeat__2 `xml:"SelectedSeat,omitempty"`

	// ID for the Service contained this OrderItem. While the OrderItem would be a direct transference of the originating OfferItem, the Services within are broken down to a more granular level (i.e. a single deliverable unit of a specific service per passenger per flight segment). Therefore, the ServiceIDs in an Order do not reflect a 1-to-1 mapping to the originating Offer’s ServiceIDs.

	ServiceID string `xml:"ServiceID,attr,omitempty"`

	// Current Service status.
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 4405 (Status, coded)

	ServiceStatus string `xml:"ServiceStatus,attr,omitempty"`
}

type Service__6 struct {
	BundleReference *BundleReference `xml:"BundleReference,omitempty"`

	ServiceReferences *ServiceReferences `xml:"ServiceReferences,omitempty"`
}

type Services__4 struct {

	// Service detail.
	Service []*ServiceDetailType `xml:"Service,omitempty"`
}

type SignInID__1 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Start__1 struct {
	*CoreDateGrpType
}

type StateCode__2 struct {
	*StateProvCodeType

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type Status__6 struct {

	//
	// Current Order Item status. Example: OK (Confirmed) Encoding Scheme: IATA Padis Codeset - List for data element 4405 (Status, coded)
	//
	StatusCode *IATA_CodeType `xml:"StatusCode,omitempty"`

	//
	// When true, the order item cannot be fulfilled due to an aircraft change.
	//

	ChangeOfGaugeInd bool `xml:"ChangeOfGaugeInd,attr,omitempty"`

	//
	// When true, the order item cannot be fulfilled due to a flight schedule change.
	//

	ScheduleChangeInd bool `xml:"ScheduleChangeInd,attr,omitempty"`
}

type StopLocation__2 struct {
	AirportCode *AirportCode `xml:"AirportCode,omitempty"`
}

type SubTotal__2 struct {
	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`
}

type SupportedDomain__1 struct {

	// Supported NDC Domain Name.
	//
	// Examples: Shopping, OrderManagement, PaymentTicketing, AirlineProfile, Utility
	//
	// Note: Supports pre-defined enumerated list and/ or bilaterally-agreed upon values.

	Name *DomainListType `xml:"Name,attr,omitempty"`

	// Associated Encoding Scheme Version(s). Example: 1.7, 1.0 - 1.7

	Version *ContextSimpleType `xml:"Version,attr,omitempty"`
}

type Surcharges__4 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type Surcharges__5 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type Surcharges__6 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type Surcharges__7 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type SurnameSuffix__1 struct {
}

type Surname__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Surname__2 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TaxExemption__1 struct {
	RuleID *RuleID__4 `xml:"RuleID,omitempty"`

	Associations *Associations `xml:"Associations,omitempty"`
}

type Tax__2 struct {

	// Indicate whether a tax is paid or new etc. , PADIS codeset, 5305
	Qualifier string `xml:"Qualifier,omitempty"`

	// Amount. Example: 15000 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Tax Nation or Designator. Example: US, GB
	Nation string `xml:"Nation,omitempty"`

	// Tax Code. Example: AY, GB
	TaxCode string `xml:"TaxCode,omitempty"`

	// Tax type. Used to specify where the tax was applied. May be nice to have for auditing purposes.    Example: 001, 002
	TaxType string `xml:"TaxType,omitempty"`

	CollectionPoint []*CollectionPoint__1 `xml:"CollectionPoint,omitempty"`

	// Local tax amount. Example: 24 CHF
	LocalAmount *CurrencyAmountOptType `xml:"LocalAmount,omitempty"`

	// Tax short description.
	// Example: $4 per flight segment, per passenger (U.S. domestic segment tax)
	Description *ShortDescSimpleType `xml:"Description,omitempty"`

	Conversion *Conversion__2 `xml:"Conversion,omitempty"`

	// The tax filed amount.
	FiledAmount *CurrencyAmountOptType `xml:"FiledAmount,omitempty"`

	// The filed ticket tax code assigned by IATA..

	FileTaxType *AlphaNumericStringLength1to3 `xml:"FileTaxType,omitempty"`

	// A qualifier to the Tax Code to distinguish taxes/fees/charges with the same tax code but with different business uses.

	AddlTaxType *AlphaNumericStringLength1to3 `xml:"AddlTaxType,omitempty"`

	// A qualfier to the filed tax code to distinguish taxes/fees/charges with the same tax code but with different business uses.

	AddlFiledTaxType *AlphaNumericStringLength1to3 `xml:"AddlFiledTaxType,omitempty"`

	// When true, this tax is approximate.

	ApproxInd bool `xml:"ApproxInd,attr,omitempty"`

	// When true, this tax must be collected.

	CollectionInd bool `xml:"CollectionInd,attr,omitempty"`

	// When true, this tax amount is refundable.

	RefundInd bool `xml:"RefundInd,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TicketDesig__1 struct {
	*TicketDesignatorType

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type TicketDocInfos__1 struct {
	TicketDocInfo []*TicketDocInfo__1 `xml:"TicketDocInfo,omitempty"`
}

type TicketDocInfos__2 struct {
	TicketDocInfo []*TicketDocInfo__2 `xml:"TicketDocInfo,omitempty"`
}

type TicketDocInfos__3 struct {
	TicketDocInfo []*TicketDocInfo__3 `xml:"TicketDocInfo,omitempty"`
}

type TicketNumber__1 struct {
	Value int32 `xml:",chardata"`

	// Passenger type code.
	// Example: ADT (ADULT)
	//
	// Encoding Scheme: IATA (three character) Passenger Type Code (PTC)

	PTC *PaxSimpleType `xml:"PTC,attr,omitempty"`
}

type TotalAmount__2 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type TotalAmount__3 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type TotalAmount__4 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type TotalAmount__5 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type TotalPrice__3 struct {
	*FarePriceDetailType

	// When true, indicates the baggage is Pre paid

	PrepaidInd bool `xml:"PrepaidInd,attr,omitempty"`
}

type TxnDatas__1 struct {

	// Other Transaction Data.
	TxnDate *ShortDescSimpleType `xml:"TxnDate,omitempty"`
}

type TxnDatas__2 struct {

	// Other Transaction Data.
	TxnDate *ShortDescSimpleType `xml:"TxnDate,omitempty"`
}

type Type__2 struct {
	Value *ServiceAssocListType `xml:",chardata"`

	// Value of the SSR code.

	Code string `xml:"Code,attr,omitempty"`
}

type Type__3 struct {
}

type Type__4 struct {
	Value *IATA_CodeType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type USDOT__2 struct {
	*BagDisclosureType

	BagDisclosureKey *BagDisclosureKey `xml:"BagDisclosureKey,omitempty"`
}

type UniqueKeyID__1 struct {

	// A reference to a Unique (string-based) Object ID. Example: OBJ001

	UniqueID_Ref *UniqueID_SimpleType `xml:"UniqueID_Ref,attr,omitempty"`

	// Sequence ID. Example: 1

	Seq int32 `xml:"Seq,attr,omitempty"`
}

type UpgradeMethod__1 struct {
	Value string `xml:",chardata"`

	// New class of service.
	// Example: B

	NewClass string `xml:"NewClass,attr,omitempty"`
}

type UpgradeMethod__2 struct {
	Value string `xml:",chardata"`

	// New class of service.
	// Example: B

	NewClass string `xml:"NewClass,attr,omitempty"`
}

type ValidPeriod__1 struct {
	*CorePeriodGrpType
}

type Value__3 struct {
	NodePath []*NodePath `xml:"NodePath,omitempty"`

	Instruction *Instruction__2 `xml:"Instruction,omitempty"`
}

type WaitListPreferences__1 struct {
	Value *PreferencesLevelSimpleType `xml:",chardata"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type ALaCarteOffer__4 struct {
	*OfferType

	// One Service or Service  Bundle which is priced per unit. A La Carte Offer Items are optional and variable quantities of these can be selected by any of the eligible passengers for the applicable segments and/or price classes.
	ALaCarteOfferItem []*ALaCarteOfferItemType `xml:"ALaCarteOfferItem,omitempty"`
}

type ALaCarteOffer__5 struct {
	*OfferType

	// One Service or Service  Bundle which is priced per unit. A La Carte Offer Items are optional and variable quantities of these can be selected by any of the eligible passengers for the applicable segments and/or price classes.
	ALaCarteOfferItem []*ALaCarteOfferItemType `xml:"ALaCarteOfferItem,omitempty"`
}

type ALaCarteSelection__1 struct {

	// Quantity to allow the ordering of more than one instances of the related a la carte OfferItem.
	Quantity int32 `xml:"Quantity,omitempty"`

	// Reference to segment proposed in original Offer Item's elibigility rules.
	SegmentID string `xml:"SegmentID,omitempty"`
}

type AcceptOffer__1 struct {
	*OrderRequestType
}

type AcceptableVariance__2 struct {
	CurrencyAmountValue *CurrencyAmountValue `xml:"CurrencyAmountValue,omitempty"`

	PercentageValue *PercentageValue `xml:"PercentageValue,omitempty"`
}

type ActionType__1 struct {
	Value *OrderItemActionListType `xml:",chardata"`

	// Action Type Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type ActionType__2 struct {
	Value *OrderItemActionListType `xml:",chardata"`

	// Action Type Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type ActionType__3 struct {
	Value *OrderItemActionListType `xml:",chardata"`

	// Action Type Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type AddrVerification__1 struct {

	// AVS Response Code.
	//
	// Examples:
	// X - Match: Street address and 9-digit ZIP code both match
	// Y - Match: Street address and 5-digit ZIP code both match
	// A - Partial Match: Street address matches, but both 5-digit and 9-digit ZIP Code do not match
	// W - Partial Match: Street address does not match, but 9-digit ZIP code matches
	// Z - Partial Match: Street address does not match, but 5-digit ZIP code matches
	// N - No Match: Street address, 5-digit ZIP code, and 9-digit ZIP code all do not match
	// U - System Unavailable: Address information unavailable. Returned if non-US. AVS is not available or if the AVS in a U.S. bank is not functioning properly.
	// R - System Unavailable: Retry - Issuer's System Unavailable or Timed Out.
	// E - Invalid: AVS data is invalid
	// S - Not Supported: U.S. issuing bank does not support AVS
	//
	// Note: This is the address verification response code (AVS) when the ticketing agency performs address verification.

	Code *ContextSimpleType `xml:"Code,attr,omitempty"`

	// Additional Response Text from 3DS Provider.

	Text *ShortDescSimpleType `xml:"Text,attr,omitempty"`

	// When true, the specified address was invalid.

	InvalidInd bool `xml:"InvalidInd,attr,omitempty"`

	// When true, the specified address could not be matched with issuing bank address on record.

	NoMatchInd bool `xml:"NoMatchInd,attr,omitempty"`
}

type Agency__1 struct {
	AgencyID *AgencyID `xml:"AgencyID,omitempty"`

	// Agency Seller Name.  Example: Carson Travel
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Agency Seller IATA number. Example: 98417900
	IATA_Number *IATA_NbrSimpleType `xml:"IATA_Number,omitempty"`
}

type AirlineID__2 struct {
	*AirlineID_Type

	// Carrier Fee Commercial Name. Example: British Airways

	Name *ProperNameSimpleType `xml:"Name,attr,omitempty"`
}

type Airline__3 struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	// Airline Name. Example: British Airways
	Name *ProperNameSimpleType `xml:"Name,omitempty"`
}

type Amendment__1 struct {
	ActionType *ActionType__4 `xml:"ActionType,omitempty"`

	OfferItem *OfferItem__2 `xml:"OfferItem,omitempty"`

	TicketDocInfo *TicketDocInfo__4 `xml:"TicketDocInfo,omitempty"`
}

type Amount__7 struct {
	CurrencyAmountValue *CurrencyAmountValue `xml:"CurrencyAmountValue,omitempty"`

	PercentageValue *PercentageValue `xml:"PercentageValue,omitempty"`
}

type Amounts__1 struct {
	Amount []*Amount__8 `xml:"Amount,omitempty"`
}

type AppliedFilter__1 struct {
	*ServiceFilterType

	Associations *Associations__5 `xml:"Associations,omitempty"`
}

type Association__2 struct {
	ServiceID *ServiceID `xml:"ServiceID,omitempty"`

	OfferItemID *OfferItemID `xml:"OfferItemID,omitempty"`

	OrderID *OrderID `xml:"OrderID,omitempty"`

	OrderItemID *OrderItemID `xml:"OrderItemID,omitempty"`

	OtherAssociation *OtherAssociation__6 `xml:"OtherAssociation,omitempty"`
}

type BaggageAllowanceList__10 struct {
	BaggageAllowance []*BaggageAllowance__11 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__11 struct {
	BaggageAllowance []*BaggageAllowance__12 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowanceList__12 struct {
	BaggageAllowance []*BaggageAllowance__13 `xml:"BaggageAllowance,omitempty"`
}

type BaggageAllowance__10 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__3 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__4 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__5 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__6 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__7 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__8 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__9 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageDeterminingCarrier__1 struct {
	AirlineID *AirlineID `xml:"AirlineID,omitempty"`

	// Airline Name.  Example: British Airways
	Name *ProperNameSimpleType `xml:"Name,omitempty"`
}

type CabinLayout__1 struct {
	Columns []*Columns__1 `xml:"Columns,omitempty"`

	Rows *Rows__2 `xml:"Rows,omitempty"`

	WingPosition []*WingPosition__1 `xml:"WingPosition,omitempty"`

	ExitRowPosition []*ExitRowPosition__1 `xml:"ExitRowPosition,omitempty"`
}

type CabinTypeCode__1 struct {
	Value string `xml:",chardata"`
}

type CabinTypeName__1 struct {
	Value string `xml:",chardata"`
}

type CabinType__2 struct {

	// Cabin class marketing name. Example: Premium Economy
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Code value. Example: 003
	Code *CodesetValueSimpleType `xml:"Code,omitempty"`

	// Code Definition. Example: Travel Agency
	Definition *ProperNameSimpleType `xml:"Definition,omitempty"`

	// Code set table name.
	TableName *ProperNameSimpleType `xml:"TableName,omitempty"`

	// Codeset location uri.  Example: http://anysite.com/codeset
	Link string `xml:"Link,omitempty"`
}

type Cabin__2 struct {
	Value *IATA_CodeType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type CancelDateRange__1 struct {
	*DatePeriodRepType
}

type Characteristic__3 struct {
	Value *IATA_CodeType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type ClassOfService__1 struct {
	Code *Code__7 `xml:"Code,omitempty"`

	// Fare basis code. Example: Y26CH
	FareBasisCode string `xml:"FareBasisCode,omitempty"`
}

type Class__1 struct {
	Value string `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type Code__6 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type CollectionPoint__1 struct {
	CurrCode *CurrCode `xml:"CurrCode,omitempty"`

	AirportAmount *AirportAmount__1 `xml:"AirportAmount,omitempty"`

	AirportCode *AirportCode `xml:"AirportCode,omitempty"`
}

type Component__1 struct {

	// Cabin component.
	// Examples:
	// 701 (Movable compartment divider)
	// 702 (Convertible seats)
	// AR (Air phone)
	// BA (Bar)
	// BK (Bulkhead)
	// CL (Closet)
	// G (Galley)
	// LA (Lavatory)
	// LG (Luggage storage)
	// MV (Movie screen)
	// SO (Storage space)
	// ST (Stairs to upper deck)
	// TA (Table)
	//
	// Encoding Scheme: IATA PADIS Code List for data element 9978 - Cabin Facilities Characteristic
	Type *IATA_CodeType `xml:"Type,omitempty"`

	Location *Location__5 `xml:"Location,omitempty"`

	Dimensions *Dimensions__3 `xml:"Dimensions,omitempty"`
}

type ContactList__20 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__21 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__22 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__23 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type ContactList__24 struct {

	// The electronic or geographic address which a party has provided as the contact channel. For example, contact email, contact postal address, contact phone number.
	ContactInformation []*ContactInformationType `xml:"ContactInformation,omitempty"`
}

type Conversion__2 struct {
	CurrencyAmount *CurrencyAmount `xml:"CurrencyAmount,omitempty"`

	// Define a date of the converion amount
	ConversionRate string `xml:"ConversionRate,omitempty"`
}

type Countries__2 struct {
	CountryCode []*CountryCode `xml:"CountryCode,omitempty"`
}

type CreateDateRange__1 struct {
	*DatePeriodRepType
}

type Currencies__2 struct {

	//
	// Input Payment Currency code. Example: USD Encoding Scheme: ISO 4217 (three alpha character) Currency Code
	//
	InputCode []*CurrencyCodeType `xml:"InputCode,omitempty"`

	//
	// Settlement Payment Currency code. Example: CHF Encoding Scheme: ISO 4217 (three alpha character) Currency Code
	//
	SettlementCode []*CurrencyCodeType `xml:"SettlementCode,omitempty"`
}

type CustomerAuthStatus__1 struct {
	Value *CustomerAuthStatusSimpleType `xml:",chardata"`

	// Enrollment Status context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Delete__1 struct {
	OrderItemID []string `xml:"OrderItemID,omitempty"`
}

type DescriptionList__10 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__11 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type DescriptionList__12 struct {
	Description []*Description `xml:"Description,omitempty"`
}

type End__2 struct {
	*CoreDateGrpType
}

type Entities__2 struct {

	// Exempt tax entity name. Example: Military, IBM

	Entity *ProperNameSimpleType `xml:"Entity,omitempty"`
}

type FareComponent__1 struct {

	// Fare Component calculation order (sequence number.) Example: 001

	Number int32 `xml:"Number,omitempty"`

	// Tariff number for where the fare data is filed. Example: 9171

	TariffNumber string `xml:"TariffNumber,omitempty"`

	// Rule number. Example: 126
	//
	// Note: This is the rule number within the tariff where the fare data is filed.

	RuleNumber string `xml:"RuleNumber,omitempty"`

	// Rule Code. Example: 12BE
	//
	// Note: This is a system generated code indicating that the ticketed fare is from a specific rule filed fare sent by the issuing system.

	RuleCode string `xml:"RuleCode,omitempty"`
}

type Feature__2 struct {
	Value *IATA_CodeType `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type FeeAmount__1 struct {

	// Carrier fee code type.

	Type string `xml:"Type,omitempty"`

	// Carrier fee amount. Example: 100 USD
	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`

	// Currency encoding for the Carrier Fee Amount. Example: USD
	CurrencyCode *CurrencySimpleType `xml:"CurrencyCode,omitempty"`

	// Application code. Example: 15 (Not commissionable)
	//
	// Encoding Scheme: IATA Padis Codeset - List for data element 9988 (Data Indicator)
	//
	// Note: This is used to specify if the fee is not interlineable, not refundable, commissionable or not commissionable.
	ApplicationCode *IATA_CodeType `xml:"ApplicationCode,omitempty"`

	DepartureCode *DepartureCode `xml:"DepartureCode,omitempty"`

	ArrivalCode *ArrivalCode `xml:"ArrivalCode,omitempty"`
}

type Fee__10 struct {
	Code *Code__8 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code. Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__11 struct {
	Code *Code__9 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code. Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__12 struct {
	Code *Code__10 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code. Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__13 struct {
	Code *Code__11 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code. Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__14 struct {
	Code *Code__12 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code.
	// Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__15 struct {
	Code *Code__13 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code. Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__3 struct {
	Code *Code__14 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code.
	// Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__4 struct {
	Code *Code__15 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code.
	// Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__5 struct {
	Code *Code__16 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code. Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__6 struct {
	Code *Code__17 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code.
	// Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__7 struct {
	Code *Code__18 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code. Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__8 struct {
	Code *Code__19 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code. Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fee__9 struct {
	Code *Code__20 `xml:"Code,omitempty"`

	// Tax type(s) within the tax code.
	// Examples: I, C
	TaxType []string `xml:"TaxType,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fees__8 struct {
	*FeeSurchargeType
}

type FlightList__10 struct {
	Flight []*Flight__21 `xml:"Flight,omitempty"`
}

type FlightList__11 struct {
	Flight []*Flight__22 `xml:"Flight,omitempty"`
}

type FlightList__12 struct {
	Flight []*Flight__23 `xml:"Flight,omitempty"`
}

type FlightRef__1 struct {
	Value string `xml:",chardata"`

	ODRef string `xml:"ODRef,attr,omitempty"`

	// Flight-level price class

	PriceClassRef string `xml:"PriceClassRef,attr,omitempty"`
}

type FlightSegmentList__10 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__11 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type FlightSegmentList__12 struct {
	FlightSegment []*ListOfFlightSegmentType `xml:"FlightSegment,omitempty"`
}

type Flight__11 struct {
	FlightNumber *FlightNumber `xml:"FlightNumber,omitempty"`

	ClassOfService *ClassOfService `xml:"ClassOfService,omitempty"`

	FareBasisCode *FareBasisCode `xml:"FareBasisCode,omitempty"`

	Arrival *Arrival__1 `xml:"Arrival,omitempty"`

	Departure *Departure__1 `xml:"Departure,omitempty"`

	OriginDestination *OriginDestination__9 `xml:"OriginDestination,omitempty"`

	Segment []*Segment__1 `xml:"Segment,omitempty"`
}

type Flight__12 struct {
	ClassOfService *ClassOfService `xml:"ClassOfService,omitempty"`

	FareBasisCode *FareBasisCode `xml:"FareBasisCode,omitempty"`

	OriginDestination *OriginDestination__10 `xml:"OriginDestination,omitempty"`

	Segment []*Segment__2 `xml:"Segment,omitempty"`
}

type Flight__13 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__5 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__14 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__6 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__15 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__7 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__16 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__8 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__17 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__9 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__18 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__10 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__19 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__11 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__20 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__12 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightsOverview__2 struct {
	FlightRef []*FlightRef__2 `xml:"FlightRef,omitempty"`

	// Itinerary-level price class (eg. most restrictive applies)
	ItineraryPriceClassRef string `xml:"ItineraryPriceClassRef,omitempty"`
}

type Given__3 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Group__10 struct {

	// Group Name. Example: ABC Tour Club
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// The Complete Party (TCP) indicating total party size. Example: 12
	TotalPartySize int32 `xml:"TotalPartySize,omitempty"`

	Contacts *Contacts `xml:"Contacts,omitempty"`
}

type Group__11 struct {

	// Group Name. Example: ABC Tour Club
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// The Complete Party (TCP) indicating total party size. Example: 12
	TotalPartySize int32 `xml:"TotalPartySize,omitempty"`

	Contacts *Contacts `xml:"Contacts,omitempty"`
}

type Guarantee__2 struct {

	// Unique Inventory Guarantee ID. Examples: INVREF123456, 68E0-675C
	//
	// Note: This is a unique identifier issued by an Airline to reference that inventory for a specified offer will be guaranteed as available for a period.
	InvGuaranteeID *UniqueStringID_SimpleType `xml:"InvGuaranteeID,omitempty"`

	InventoryGuaranteeTimeLimits *InventoryGuaranteeTimeLimits `xml:"InventoryGuaranteeTimeLimits,omitempty"`

	Associations *Associations__6 `xml:"Associations,omitempty"`

	Price *Price__3 `xml:"Price,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	// When true, the inventory is waitlisted.

	WaitlistInd bool `xml:"WaitlistInd,attr,omitempty"`
}

type Instruction__2 struct {
	Value string `xml:",chardata"`
}

type Location__4 struct {
	AirportCode *AirportCode `xml:"AirportCode,omitempty"`

	StructuredAddress *StructuredAddress `xml:"StructuredAddress,omitempty"`
}

type Locations__1 struct {
	*AssociatedObjectBaseType

	LocationCode []*LocationCode__3 `xml:"LocationCode,omitempty"`
}

type Middle__3 struct {
	Value string `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type NameChange__1 struct {

	// Identifier of the Passenger within the Order in the Order Management System. This is the PassengerID that is assigned at the time of Order creation by the Airline.
	PassengerID string `xml:"PassengerID,omitempty"`

	// Individual's name title. Examples: MR, MRS, DRn.
	NameTitle *ShortNameType `xml:"NameTitle,omitempty"`

	// Individual's first or given name. Example: JOHN.
	GivenName *ProperNameType `xml:"GivenName,omitempty"`

	// Individual's middle name or initial.  Examples: G, GEORGE
	MiddleName *ProperNameType `xml:"MiddleName,omitempty"`

	// Individual's family name, last name. Example: SMITH.
	Surname *ProperNameType `xml:"Surname,omitempty"`

	// Individual's surname suffixes and letters. Examples: Jr., Sr., III, Ret., Esq.
	SurnameSuffix *ShortNameType `xml:"SurnameSuffix,omitempty"`
}

type Name__12 struct {
	Value *ProperNameSimpleType `xml:",chardata"`
}

type New__1 struct {

	// Type code applying to the Passenger which typically drives pricing (e.g. ADT, CHD, etc).
	PTC *PassengerTypeCodeType `xml:"PTC,omitempty"`

	// Residence Country Code. Examples: US, FR.
	ResidenceCountryCode *ISO_3166CountryCodeType `xml:"ResidenceCountryCode,omitempty"`

	// Citizenship Country Code. Examples: US, FR.
	CitizenshipCountryCode *ISO_3166CountryCodeType `xml:"CitizenshipCountryCode,omitempty"`

	// A single human being as distinct from a group, class, or family.
	Individual *IndividualType `xml:"Individual,omitempty"`

	// Passenger Profile ID
	ProfileID *SimpleTextType `xml:"ProfileID,omitempty"`

	// An account set up for a customer within a rewards program which holds funds on behalf of that customer.
	LoyaltyProgramAccount []*LoyaltyProgramAccountType `xml:"LoyaltyProgramAccount,omitempty"`

	// Form of identification.  Typically used to identify that the passenger is who he says he is.
	//
	// This is the type of FOID as defined in AIRIMP (FF Number, Credit Card Number, etc.).
	//
	FOID *FOID `xml:"FOID,omitempty"`

	// Any document which may be used to identify a person or verify aspects of a person's personal identity.
	IdentityDocument []*IdentityDocumentType `xml:"IdentityDocument,omitempty"`

	// Reference to Contact Information, within the context of one message.
	ContactInfoRef string `xml:"ContactInfoRef,omitempty"`

	// Reference to Passenger instance within the context of one message, associating an infant on lap to this adult passenger.
	InfantRef string `xml:"InfantRef,omitempty"`

	// Language Code representation.
	Language []*LanguageUsageType `xml:"Language,omitempty"`

	Remark []*Remark__3 `xml:"Remark,omitempty"`

	ActionType *ActionType__5 `xml:"ActionType,omitempty"`

	// The Age of the Passenger.  To be used in NDC Anonymous Shopping requests or when the birthdate (in Individual) is not known.
	Age *MeasureType `xml:"Age,omitempty"`

	// The Date of Birth of the Passenger.  Anonymous Shopping requests or when the birthdate (in Individual) is not known.
	Birthdate string `xml:"Birthdate,omitempty"`

	// Uniquely identifies a Passenger within the context of one message.

	PassengerID string `xml:"PassengerID,attr,omitempty"`

	// When true, passenger authorizes the airline to share his/her profile information or send promotional emails.

	ProfileConsentIndicator *IndicatorType `xml:"ProfileConsentIndicator,attr,omitempty"`
}

type Number__3 struct {
	Value int32 `xml:",chardata"`

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

type OfferValidDates__3 struct {
	Start *Start__3 `xml:"Start,omitempty"`

	End *End__3 `xml:"End,omitempty"`
}

type Offer__5 struct {
	*OfferType

	FlightsOverview *FlightsOverview__3 `xml:"FlightsOverview,omitempty"`

	// A set of one or more Services. The Offer Item assigns a total price for all included services for all passengers and all segments referenced. Once constructed, the OfferItem cannot be modifed.
	OfferItem []*OfferItemType `xml:"OfferItem,omitempty"`

	BaggageAllowance []*BaggageAllowance__14 `xml:"BaggageAllowance,omitempty"`
}

type Offer__6 struct {

	// Globally unique Offer instance ID. It is not recommended to exceed 64, and it is not recommended to use dashes. Example: QWASZXERDFCVTYGHBNUIJKNMF67D5F9GHR567SWER41SD458F9456FMDIRTN34DF
	OfferID *ItemID_Type `xml:"OfferID,omitempty"`

	OfferItemIDs *OfferItemIDs__1 `xml:"OfferItemIDs,omitempty"`
}

type Offers__2 struct {
	Offer []*Offer__7 `xml:"Offer,omitempty"`
}

type Offers__3 struct {
	Offer []*Offer__8 `xml:"Offer,omitempty"`
}

type OrderServicing__2 struct {
	Add *Add__1 `xml:"Add,omitempty"`

	Delete *Delete__2 `xml:"Delete,omitempty"`
}

type Order__5 struct {
	Agency *Agency__2 `xml:"Agency,omitempty"`

	// Order Creation Date.
	CreationDate string `xml:"CreationDate,omitempty"`

	Departure *Departure__2 `xml:"Departure,omitempty"`

	Arrival *Arrival__2 `xml:"Arrival,omitempty"`

	NbrInParty *NbrInParty__1 `xml:"NbrInParty,omitempty"`

	Passengers *Passengers__4 `xml:"Passengers,omitempty"`

	TicketingStatus *TicketingStatus__1 `xml:"TicketingStatus,omitempty"`

	// Order Identificatio
	OrderID string `xml:"OrderID,omitempty"`

	Status *Status__7 `xml:"Status,omitempty"`
}

type OriginDestinationList__10 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__11 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type OriginDestinationList__12 struct {
	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type PassengerList__20 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__21 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__22 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__23 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type PassengerList__24 struct {

	// Any person except members of the crew carried or to be carried with the consent of the carrier, on board of any transport vehicle such as aircraft, train, bus, ship.
	Passenger []*PassengerType `xml:"Passenger,omitempty"`
}

type Passenger__15 struct {
	Individual *Individual__1 `xml:"Individual,omitempty"`

	// Passenger Profile ID
	ProfileID *SimpleTextType `xml:"ProfileID,omitempty"`

	LoyaltyProgramAccount []*LoyaltyProgramAccount__1 `xml:"LoyaltyProgramAccount,omitempty"`

	// Form of identification.  Typically used to identify that the passenger is who he says he is.
	//
	// This is the type of FOID as defined in AIRIMP (FF Number, Credit Card Number, etc.).
	//
	FOID *FOID `xml:"FOID,omitempty"`

	// Any document which may be used to identify a person or verify aspects of a person's personal identity.
	IdentityDocument []*IdentityDocumentType `xml:"IdentityDocument,omitempty"`

	ContactInformation []*ContactInformation__1 `xml:"ContactInformation,omitempty"`
}

type Passengers__3 struct {
	Individual *Individual__2 `xml:"Individual,omitempty"`

	// Passenger Profile ID
	ProfileID *SimpleTextType `xml:"ProfileID,omitempty"`

	LoyaltyProgramAccount []*LoyaltyProgramAccount__2 `xml:"LoyaltyProgramAccount,omitempty"`

	// Form of identification.  Typically used to identify that the passenger is who he says he is.
	//
	// This is the type of FOID as defined in AIRIMP (FF Number, Credit Card Number, etc.).
	//
	FOID *FOID `xml:"FOID,omitempty"`

	// Any document which may be used to identify a person or verify aspects of a person's personal identity.
	IdentityDocument []*IdentityDocumentType `xml:"IdentityDocument,omitempty"`

	ContactInformation []*ContactInformation__2 `xml:"ContactInformation,omitempty"`
}

type PaymentCards__1 struct {

	// Payment Card.
	PaymentCard []*CardQualifierType `xml:"PaymentCard,omitempty"`
}

type Payment__3 struct {
	*OrderPaymentFormType

	Offers *Offers__4 `xml:"Offers,omitempty"`

	OrderItemID []string `xml:"OrderItemID,omitempty"`
}

type Payment__4 struct {
	*OrderPaymentFormType

	Offers *Offers__5 `xml:"Offers,omitempty"`
}

type Payments__7 struct {

	// The amount for this form of payment. Example: 300 USD
	Amount *SimpleCurrencyPriceType `xml:"Amount,omitempty"`

	Method *Method__5 `xml:"Method,omitempty"`

	Status *Status__8 `xml:"Status,omitempty"`
}

type Payments__8 struct {
	Method *Method__6 `xml:"Method,omitempty"`
}

type Position__1 struct {
	*CodesetType

	// Seat Row Number.  Example: 3
	SeatRowNmber *CodesetValueSimpleType `xml:"SeatRowNmber,omitempty"`
}

type Positions__1 struct {

	// Character Position. Example: 5

	Position int32 `xml:"Position,omitempty"`
}

type Previous__1 struct {

	// Type code applying to the Passenger which typically drives pricing (e.g. ADT, CHD, etc).
	PTC *PassengerTypeCodeType `xml:"PTC,omitempty"`

	// Residence Country Code. Examples: US, FR.
	ResidenceCountryCode *ISO_3166CountryCodeType `xml:"ResidenceCountryCode,omitempty"`

	// Citizenship Country Code. Examples: US, FR.
	CitizenshipCountryCode *ISO_3166CountryCodeType `xml:"CitizenshipCountryCode,omitempty"`

	// A single human being as distinct from a group, class, or family.
	Individual *IndividualType `xml:"Individual,omitempty"`

	// Passenger Profile ID
	ProfileID *SimpleTextType `xml:"ProfileID,omitempty"`

	// An account set up for a customer within a rewards program which holds funds on behalf of that customer.
	LoyaltyProgramAccount []*LoyaltyProgramAccountType `xml:"LoyaltyProgramAccount,omitempty"`

	// Form of identification.  Typically used to identify that the passenger is who he says he is.
	//
	// This is the type of FOID as defined in AIRIMP (FF Number, Credit Card Number, etc.).
	//
	FOID *FOID `xml:"FOID,omitempty"`

	// Any document which may be used to identify a person or verify aspects of a person's personal identity.
	IdentityDocument []*IdentityDocumentType `xml:"IdentityDocument,omitempty"`

	// Reference to Contact Information, within the context of one message.
	ContactInfoRef string `xml:"ContactInfoRef,omitempty"`

	// Reference to Passenger instance within the context of one message, associating an infant on lap to this adult passenger.
	InfantRef string `xml:"InfantRef,omitempty"`

	// Language Code representation.
	Language []*LanguageUsageType `xml:"Language,omitempty"`

	Remark []*Remark__4 `xml:"Remark,omitempty"`

	ActionType *ActionType__6 `xml:"ActionType,omitempty"`

	// The Age of the Passenger.  To be used in NDC Anonymous Shopping requests or when the birthdate (in Individual) is not known.
	Age *MeasureType `xml:"Age,omitempty"`

	// The Date of Birth of the Passenger.  Anonymous Shopping requests or when the birthdate (in Individual) is not known.
	Birthdate string `xml:"Birthdate,omitempty"`

	// Uniquely identifies a Passenger within the context of one message.

	PassengerID string `xml:"PassengerID,attr,omitempty"`

	// When true, passenger authorizes the airline to share his/her profile information or send promotional emails.

	ProfileConsentIndicator *IndicatorType `xml:"ProfileConsentIndicator,attr,omitempty"`
}

type PriceCalendar__1 struct {
	PriceCalendarDate []*PriceCalendarDate__1 `xml:"PriceCalendarDate,omitempty"`

	// The total price for all Travelers associated with this offer.
	TotalPrice *EncodedPriceType `xml:"TotalPrice,omitempty"`

	PTC []*PTC__1 `xml:"PTC,omitempty"`

	// When true, this is a lead calendar shopping price for a date that is prior to or after the required travel date.

	LeadPriceInd string `xml:"LeadPriceInd,attr,omitempty"`
}

type PriceClassList__10 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__11 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceClassList__9 struct {
	PriceClass []*PriceClassType `xml:"PriceClass,omitempty"`
}

type PriceQuote__1 struct {
	Amount *Amount__9 `xml:"Amount,omitempty"`

	Source *Source__2 `xml:"Source,omitempty"`

	Commission *Commission `xml:"Commission,omitempty"`

	PriceGuaranteeTimeLimit *PriceGuaranteeTimeLimit `xml:"PriceGuaranteeTimeLimit,omitempty"`

	// Order creation timestamp.
	// Example: 2015-01-13T13:59:38Z

	CreatedDate string `xml:"CreatedDate,attr,omitempty"`
}

type Price__1 struct {

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`

	// A (detailed) CURRENCY-based Price with Price Break-down for Tax and/ or Fee information.
	DetailCurrencyPrice *DetailCurrencyPriceType `xml:"DetailCurrencyPrice,omitempty"`

	// Monetary value amount and currency code.
	EncodedCurrencyPrice *EncodedPriceType `xml:"EncodedCurrencyPrice,omitempty"`

	// A (simple) CURRENCY-based Price with NO taxes and/ or fees.
	// Examples: 100.00, 100, 100 (USD)
	SimpleCurrencyPrice *SimpleCurrencyPriceType `xml:"SimpleCurrencyPrice,omitempty"`
}

type Price__2 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`
}

type Programs__1 struct {

	// Program Qualifier detail.
	Program []*ProgramQualifierType `xml:"Program,omitempty"`
}

type Promotion__3 struct {
	*PromotionType

	Associations *Associations `xml:"Associations,omitempty"`
}

type Promotion__4 struct {
	*PromotionType

	Passengers *Passengers__5 `xml:"Passengers,omitempty"`
}

type Promotions__7 struct {

	// Promotion(s) Information.
	Promotion []*PromoQualifierType `xml:"Promotion,omitempty"`
}

type RepricedOfferItem__1 struct {
	TotalPriceDetail *TotalPriceDetail__3 `xml:"TotalPriceDetail,omitempty"`

	// Fare Detail, including Fare Component and Fare Rules.
	FareDetail []*FareDetailType `xml:"FareDetail,omitempty"`

	OriginalOrderItem *OriginalOrderItem__1 `xml:"OriginalOrderItem,omitempty"`

	// Unique identifier for this OfferItem instance. Must be unique within XML message. Exceeding 64 characters or use of dashes is not recommended.

	OfferItemID string `xml:"OfferItemID,attr,omitempty"`
}

type ReshopOffer__1 struct {
	*OfferType

	FlightsOverview *FlightsOverview__4 `xml:"FlightsOverview,omitempty"`

	DeleteOfferItem []*DeleteOfferItem__1 `xml:"DeleteOfferItem,omitempty"`

	AddOfferItem []*AddOfferItem__1 `xml:"AddOfferItem,omitempty"`

	NameChangeOfferItem *NameChangeOfferItem__1 `xml:"NameChangeOfferItem,omitempty"`

	BaggageAllowance []*BaggageAllowance__15 `xml:"BaggageAllowance,omitempty"`
}

type Row__3 struct {

	// Seat row number. Example: 2
	Number *SeatMapRowNbrType `xml:"Number,omitempty"`

	RowCharacteristics *RowCharacteristics__1 `xml:"RowCharacteristics,omitempty"`

	Seat []*Seat__3 `xml:"Seat,omitempty"`
}

type RuleID__2 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Rule ID Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`

	//
	// Rule Name. Example: Acceptable Order Item Price Variance
	//

	Name string `xml:"Name,attr,omitempty"`
}

type RuleID__3 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Rule ID Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`

	//
	// Rule Name. Example: Acceptable Order Item Price Variance
	//

	Name string `xml:"Name,attr,omitempty"`
}

type RuleID__4 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Rule ID Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`

	//
	// Rule Name. Example: Acceptable Order Item Price Variance
	//

	Name string `xml:"Name,attr,omitempty"`
}

type RuleValid__2 struct {
	DatePeriod *DatePeriod `xml:"DatePeriod,omitempty"`

	DateTimePeriod *DateTimePeriod `xml:"DateTimePeriod,omitempty"`

	DayPeriod *DayPeriod `xml:"DayPeriod,omitempty"`

	MonthPeriod *MonthPeriod `xml:"MonthPeriod,omitempty"`

	QuarterPeriod *QuarterPeriod `xml:"QuarterPeriod,omitempty"`

	TimePeriod *TimePeriod `xml:"TimePeriod,omitempty"`

	YearMonthPeriod *YearMonthPeriod `xml:"YearMonthPeriod,omitempty"`

	YearPeriod *YearPeriod `xml:"YearPeriod,omitempty"`
}

type SeatDefinitionList__10 struct {
	SeatDefinition []*SeatDefinition__9 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__11 struct {
	SeatDefinition []*SeatDefinition__10 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinitionList__9 struct {
	SeatDefinition []*SeatDefinition__11 `xml:"SeatDefinition,omitempty"`
}

type SeatDefinition__1 struct {
	Description []*Description__3 `xml:"Description,omitempty"`

	Marketing *Marketing__2 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__3 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__2 struct {
	Description []*Description__4 `xml:"Description,omitempty"`

	Marketing *Marketing__3 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__4 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__3 struct {
	Description []*Description__5 `xml:"Description,omitempty"`

	Marketing *Marketing__4 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__5 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__4 struct {
	Description []*Description__6 `xml:"Description,omitempty"`

	Marketing *Marketing__5 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__6 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__5 struct {
	Description []*Description__7 `xml:"Description,omitempty"`

	Marketing *Marketing__6 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__7 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__6 struct {
	Description []*Description__8 `xml:"Description,omitempty"`

	Marketing *Marketing__7 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__8 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__7 struct {
	Description []*Description__9 `xml:"Description,omitempty"`

	Marketing *Marketing__8 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__9 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__8 struct {
	Description []*Description__10 `xml:"Description,omitempty"`

	Marketing *Marketing__9 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__10 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatSelection__1 struct {

	// Seat row number. Example: 2
	Row int32 `xml:"Row,omitempty"`

	// Seat column to identify a particular seat position on an aircraft
	Column string `xml:"Column,omitempty"`
}

type Seat__1 struct {

	// Seat assignment information.
	Assignment []*SeatCoreType `xml:"Assignment,omitempty"`
}

type Seat__2 struct {

	// Seat row number. Example: 2
	Row int32 `xml:"Row,omitempty"`

	// Seat column to identify a particular seat position on an aircraft
	Column string `xml:"Column,omitempty"`
}

type SegmentRef__2 struct {
}

type SelectedSeat__2 struct {
	Seat *Seat__4 `xml:"Seat,omitempty"`

	SegmentRef *SegmentRef__3 `xml:"SegmentRef,omitempty"`

	ServiceDefinitionRef *ServiceDefinitionRef__6 `xml:"ServiceDefinitionRef,omitempty"`
}

type ServiceDefinitionList__10 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__11 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionList__9 struct {
	ServiceDefinition []*ServiceDefinitionType `xml:"ServiceDefinition,omitempty"`
}

type ServiceDefinitionRef__4 struct {
}

type ServiceDefinitionRef__5 struct {
	Value string `xml:",chardata"`

	// Reference to a segment in the Datalists to restrict the eligibility of the associated ServiceDefinition.

	SegmentRef string `xml:"SegmentRef,attr,omitempty"`
}

type ServiceSelection__1 struct {
	*RequestedServiceType

	// Reference to the Service (within the OfferItem) from which the bundling begins

	ServiceID string `xml:"ServiceID,attr,omitempty"`
}

type Service__7 struct {
	ServiceID *ServiceID `xml:"ServiceID,omitempty"`

	Description *Description `xml:"Description,omitempty"`
}

type Services__5 struct {

	// Service detail.
	Service []*ServiceDetailType `xml:"Service,omitempty"`
}

type Settlement__4 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type SpecialNeeds__1 struct {

	// Passenger Special Needs Attributes.
	SpecialNeed []*SpecialQualiferType `xml:"SpecialNeed,omitempty"`
}

type Start__2 struct {
	*CoreDateGrpType
}

type Surcharges__8 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type SurnameSuffix__2 struct {
}

type Surname__3 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type TaxCodes__1 struct {
	TaxCode []*TaxCode__1 `xml:"TaxCode,omitempty"`
}

type TaxCouponInfo__1 struct {

	// The sold cabin of passenger travel for the coupon.

	Cabin string `xml:"Cabin,attr,omitempty"`

	// The standard code of the equipment used for the coupon flight.

	AirEquipType *AlphaLength3 `xml:"AirEquipType,attr,omitempty"`
}

type Tax__3 struct {
	*TaxDetailType

	// The airport code identifying the airort to which the coupon tax applies.

	AirportCode *StringLength1to5 `xml:"AirportCode,attr,omitempty"`

	// The tax amount aplicable to the coupon as published in the IATA TTBS or other applicable filing mechanism.

	ApplicableAmount float64 `xml:"ApplicableAmount,attr,omitempty"`

	// The ISO currency code representing the currency code in which the coupon tax applicable amount was published or filed in.  Use ISO 4217, three alpha code.

	CurrencyType *AlphaLength3 `xml:"CurrencyType,attr,omitempty"`

	// The tax amaount applicable to a coupon expressed in the currency of payment.

	ReportedAmount float64 `xml:"ReportedAmount,attr,omitempty"`

	// The origin airport code identifyng multiple segment taxes.

	SegmentOriginAirportCode *StringLength1to5 `xml:"SegmentOriginAirportCode,attr,omitempty"`

	// The destination airport code identifying multiple segment taxes.

	SegmentDestAirportCode *StringLength1to5 `xml:"SegmentDestAirportCode,attr,omitempty"`
}

type Taxes__3 struct {
	*TaxDetailType
}

type Territories__2 struct {

	//
	// Exempt tax province/ territory name or code. Example: QC
	//

	Territory *ProperNameSimpleType `xml:"Territory,omitempty"`
}

type TicketDocInfo__1 struct {
	AgentIDs *AgentIDs__1 `xml:"AgentIDs,omitempty"`

	IssuingAirlineInfo *IssuingAirlineInfo `xml:"IssuingAirlineInfo,omitempty"`

	TicketDocument []*TicketDocument `xml:"TicketDocument,omitempty"`

	// Fare Tax information.
	Price *ServicePriceType `xml:"Price,omitempty"`

	CarrierFeeInfo *CarrierFeeInfo `xml:"CarrierFeeInfo,omitempty"`

	OriginalIssueInfo *OriginalIssueInfo `xml:"OriginalIssueInfo,omitempty"`

	PassengerReference *PassengerReference `xml:"PassengerReference,omitempty"`
}

type TicketDocInfo__2 struct {

	// Association to a passenger.
	PassengerReference string `xml:"PassengerReference,omitempty"`

	AgentIDs *AgentIDs__2 `xml:"AgentIDs,omitempty"`

	IssuingAirlineInfo *IssuingAirlineInfo `xml:"IssuingAirlineInfo,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	Payments *Payments__9 `xml:"Payments,omitempty"`

	OriginDestination *OriginDestination__11 `xml:"OriginDestination,omitempty"`

	// Endorsement/ Restriction text.

	EndorsementText string `xml:"EndorsementText,omitempty"`

	AddlReferenceIDs *AddlReferenceIDs__1 `xml:"AddlReferenceIDs,omitempty"`

	FareInfo *FareInfo__1 `xml:"FareInfo,omitempty"`

	TicketDocument *TicketDocument `xml:"TicketDocument,omitempty"`

	// Fare Tax information.
	Price *ServicePriceType `xml:"Price,omitempty"`

	// Associated Order ID(s) information.
	OrderReference *CouponOrderKeyType `xml:"OrderReference,omitempty"`

	// Commission information.
	Commission *CommissionType `xml:"Commission,omitempty"`

	CarrierFeeInfo *CarrierFeeInfo `xml:"CarrierFeeInfo,omitempty"`

	OriginalIssueInfo *OriginalIssueInfo `xml:"OriginalIssueInfo,omitempty"`

	PricingInfo *PricingInfo `xml:"PricingInfo,omitempty"`

	// Agency or airline specified information associated to the passenger.
	PassengerSpecificData *StringLength1to32 `xml:"PassengerSpecificData,omitempty"`

	// Used to specify tax information for a coupon.
	TaxCouponInfo *TaxCouponInfoType `xml:"TaxCouponInfo,omitempty"`

	// The reissued flown flight coupon information.
	ReissuedFlown *ReissuedFlownType `xml:"ReissuedFlown,omitempty"`
}

type TicketDocInfo__3 struct {
	AgentIDs *AgentIDs__3 `xml:"AgentIDs,omitempty"`

	IssuingAirlineInfo *IssuingAirlineInfo `xml:"IssuingAirlineInfo,omitempty"`

	BookingReferences *BookingReferences `xml:"BookingReferences,omitempty"`

	Payments *Payments__10 `xml:"Payments,omitempty"`

	OriginDestination *OriginDestination__12 `xml:"OriginDestination,omitempty"`

	// Endorsement/ Restriction text.

	EndorsementText string `xml:"EndorsementText,omitempty"`

	AddlReferenceIDs *AddlReferenceIDs__2 `xml:"AddlReferenceIDs,omitempty"`

	FareInfo *FareInfo__2 `xml:"FareInfo,omitempty"`

	TicketDocument *TicketDocument `xml:"TicketDocument,omitempty"`

	// Associated Order ID(s) information.
	OrderReference *CouponOrderKeyType `xml:"OrderReference,omitempty"`

	// Commission information.
	Commission *CommissionType `xml:"Commission,omitempty"`

	CarrierFeeInfo *CarrierFeeInfo `xml:"CarrierFeeInfo,omitempty"`

	OriginalIssueInfo *OriginalIssueInfo `xml:"OriginalIssueInfo,omitempty"`

	PricingInfo *PricingInfo `xml:"PricingInfo,omitempty"`
}

type TicketDocument__2 struct {
	IssueDateRange *IssueDateRange__1 `xml:"IssueDateRange,omitempty"`

	// Coupon Document Number.
	//
	// Note: This is the document number comprised of the airline code, form code, and serial number.

	TicketDocNbr string `xml:"TicketDocNbr,omitempty"`

	// Airport or City Code. Example: JFK
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code
	TicketingLocation *AirportCitySimpleType `xml:"TicketingLocation,omitempty"`

	// Applicable coupon number. Example: 1234

	CouponNumber int32 `xml:"CouponNumber,omitempty"`

	Status *Status__9 `xml:"Status,omitempty"`
}

type TicketDocument__3 struct {

	// Coupon Document Number.
	//
	// Note: This is the document number comprised of the airline code, form code, and serial number.

	TicketDocNbr string `xml:"TicketDocNbr,omitempty"`

	// Date of Issue. Example: 2017-01-13
	DateOfIssue string `xml:"DateOfIssue,omitempty"`

	// Airport or City Code. Example: JFK
	//
	// Encoding Scheme: IATA/ A4A (three character) Airport or City Code
	TicketingLocation *AirportCitySimpleType `xml:"TicketingLocation,omitempty"`

	// Applicable coupon number. Example: 1234

	CouponNumber int32 `xml:"CouponNumber,omitempty"`
}

type TotalAmount__6 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type TravelDateRange__1 struct {
	*DatePeriodRepType
}

type UnticketedPointInfo__1 struct {

	// The airport or city code identifying an unticketed point which occurs between the coupon origin and destination.

	CityAirportCode *StringLength1to8 `xml:"CityAirportCode,attr,omitempty"`

	// The date and time of arrival in GMT at the unticketed point.

	ArrivalDate string `xml:"ArrivalDate,attr,omitempty"`

	// The date and time of depature in GMT from the unticketed point.

	DepartureDate string `xml:"DepartureDate,attr,omitempty"`

	// The standard code of the quipment used for the coupon flight departing from the unticketed point.

	AirEquipType *AlphaLength3 `xml:"AirEquipType,attr,omitempty"`
}

type ActionType__4 struct {
	Value *OrderItemActionListType `xml:",chardata"`

	// Action Type Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type ActionType__5 struct {
}

type ActionType__6 struct {
}

type AddOfferItem__1 struct {
	*OfferItemType

	ReshopDifferential *ReshopDifferential__1 `xml:"ReshopDifferential,omitempty"`

	// Reference to one or more OrderItems that are going to be replaced by this OfferItem.

	OrderItemIDs string `xml:"OrderItemIDs,attr,omitempty"`
}

type Add__1 struct {
	FlightQuery *FlightQuery__1 `xml:"FlightQuery,omitempty"`

	Qualifier []*Qualifier__4 `xml:"Qualifier,omitempty"`

	Preference *Preference__3 `xml:"Preference,omitempty"`

	Passengers *Passengers__6 `xml:"Passengers,omitempty"`
}

type AddlReferenceIDs__1 struct {
	AddlReferenceID *AddlReferenceID `xml:"AddlReferenceID,omitempty"`
}

type AddlReferenceIDs__2 struct {
	AddlReferenceID *AddlReferenceID `xml:"AddlReferenceID,omitempty"`
}

type Agency__2 struct {
	AgencyID *AgencyID `xml:"AgencyID,omitempty"`

	// Agency Seller Name.  Example: Carson Travel
	Name *ProperNameSimpleType `xml:"Name,omitempty"`

	// Agency Seller IATA number. Example: 98417900
	IATA_Number *IATA_NbrSimpleType `xml:"IATA_Number,omitempty"`
}

type AgentIDs__1 struct {
	AgentID *AgentID `xml:"AgentID,omitempty"`
}

type AgentIDs__2 struct {
	AgentID *AgentID `xml:"AgentID,omitempty"`
}

type AgentIDs__3 struct {
	AgentID *AgentID `xml:"AgentID,omitempty"`
}

type AirportAmount__1 struct {
}

type Amount__8 struct {

	// Penalty Amount Application.
	// Examples: MinimumPenaltyAmount, MaximumPenaltyAmount, Other
	AmountApplication *PenaltyAppSimpleType `xml:"AmountApplication,omitempty"`

	ApplicableFeeRemarks *ApplicableFeeRemarks__2 `xml:"ApplicableFeeRemarks,omitempty"`

	CurrencyAmountValue *CurrencyAmountValue `xml:"CurrencyAmountValue,omitempty"`

	PercentageValue *PercentageValue `xml:"PercentageValue,omitempty"`
}

type Amount__9 struct {
	CurrencyAmount *CurrencyAmount `xml:"CurrencyAmount,omitempty"`
}

type Arrival__1 struct {
	AirportCode *AirportCode__3 `xml:"AirportCode,omitempty"`

	// Arrival date. Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Arrival__2 struct {
	AirportCode *AirportCode__4 `xml:"AirportCode,omitempty"`

	// Arrival date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Associations__5 struct {
	Offer *Offer__9 `xml:"Offer,omitempty"`

	// Order Association(s).
	Order *OrderItemAssociationType `xml:"Order,omitempty"`
}

type Associations__6 struct {
	ServiceID *ServiceID `xml:"ServiceID,omitempty"`

	OfferItemID *OfferItemID `xml:"OfferItemID,omitempty"`

	OrderID *OrderID `xml:"OrderID,omitempty"`

	OrderItemID *OrderItemID `xml:"OrderItemID,omitempty"`

	OtherAssociation *OtherAssociation__7 `xml:"OtherAssociation,omitempty"`
}

type BaggageAllowance__11 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__12 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory string `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__13 struct {

	// Enumeration:
	//
	// CarryOn
	// Checked
	BaggageCategory *BaggageCategoryListType `xml:"BaggageCategory,omitempty"`

	AllowanceDescription *AllowanceDescription `xml:"AllowanceDescription,omitempty"`

	DimensionAllowance *DimensionAllowance `xml:"DimensionAllowance,omitempty"`

	PieceAllowance []*PieceAllowance `xml:"PieceAllowance,omitempty"`

	WeightAllowance *WeightAllowance `xml:"WeightAllowance,omitempty"`

	// Baggage Determining Carrier as defined in resolution 722 (f), and who’s baggage rules apply.
	BaggageDeterminingCarrier *BaggageDeterminingCarrierType `xml:"BaggageDeterminingCarrier,omitempty"`

	BaggageAllowanceID string `xml:"BaggageAllowanceID,attr,omitempty"`
}

type BaggageAllowance__14 struct {

	// Reference to FlightIDs in DataLists
	FlightRefs string `xml:"FlightRefs,omitempty"`

	// Reference to PassengerIDs in DataLists
	PassengerRefs string `xml:"PassengerRefs,omitempty"`

	// Reference to BaggageAllowanceIDs in DataLists
	BaggageAllowanceRef string `xml:"BaggageAllowanceRef,omitempty"`
}

type BaggageAllowance__15 struct {

	// Reference to FlightIDs in DataLists
	FlightRefs string `xml:"FlightRefs,omitempty"`

	// Reference to PassengerIDs in DataLists
	PassengerRefs string `xml:"PassengerRefs,omitempty"`

	// Reference to BaggageAllowanceIDs in DataLists
	BaggageAllowanceRef string `xml:"BaggageAllowanceRef,omitempty"`
}

type Code__10 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__11 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__12 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__13 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__14 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__15 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__16 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__17 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__18 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__19 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__20 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__7 struct {
	Value *Flight_COS_SimpleType `xml:",chardata"`
}

type Code__8 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Code__9 struct {
	Value string `xml:",chardata"`

	// For maximum interoperability, it is recommended that IATA (three character) Airport/ City Code values be used. Use an IATA code or a proprietary string value.
	//
	// http://www.iata.org/publications/Pages/code-search.aspx

	CollectionPoint string `xml:"CollectionPoint,attr,omitempty"`
}

type Columns__1 struct {
	Value string `xml:",chardata"`

	// Column position in of the seat.
	// Example: A (AISLE SEAT)
	//
	// For maximum interoperability, refer to IATA PADIS Code List for data element 9825 - Seat Characteristic, Coded.

	Position string `xml:"Position,attr,omitempty"`
}

type ContactInformation__1 struct {

	// Classification for a particular set of contact information (e.g. Primary, Payment, etc.)
	ContactType *SimpleTextType `xml:"ContactType,omitempty"`

	// The address used for postal service. Examples are post office boxes address, postal physical address, postal code
	PostalAddress []*PostalAddressType `xml:"PostalAddress,omitempty"`

	// The email address which should be used for contact purposes.
	EmailAddress []*EmailAddressType `xml:"EmailAddress,omitempty"`

	// A telephone number is a sequence of digits assigned to a fixed-line telephone subscriber station connected to a telephone line or to a wireless electronic telephony device, such as a radio telephone or a mobile telephone, or to other devices for data transmission via the public switched telephone network (PSTN) or other private networks.
	//
	Phone []*PhoneTypeAIDM `xml:"Phone,omitempty"`

	// Other Contact Method information.   (i.e. social media handle, website, etc.)
	OtherAddress []*OtherAddressType `xml:"OtherAddress,omitempty"`
}

type ContactInformation__2 struct {

	// Classification for a particular set of contact information (e.g. Primary, Payment, etc.)
	ContactType *SimpleTextType `xml:"ContactType,omitempty"`

	// The address used for postal service. Examples are post office boxes address, postal physical address, postal code
	PostalAddress []*PostalAddressType `xml:"PostalAddress,omitempty"`

	// The email address which should be used for contact purposes.
	EmailAddress []*EmailAddressType `xml:"EmailAddress,omitempty"`

	// A telephone number is a sequence of digits assigned to a fixed-line telephone subscriber station connected to a telephone line or to a wireless electronic telephony device, such as a radio telephone or a mobile telephone, or to other devices for data transmission via the public switched telephone network (PSTN) or other private networks.
	//
	Phone []*PhoneTypeAIDM `xml:"Phone,omitempty"`

	// Other Contact Method information.   (i.e. social media handle, website, etc.)
	OtherAddress []*OtherAddressType `xml:"OtherAddress,omitempty"`
}

type DeleteOfferItem__1 struct {
	ReshopDifferential *ReshopDifferential__2 `xml:"ReshopDifferential,omitempty"`

	// Unique identifier for this OfferItem instance. Must be unique within XML message. Exceeding 64 characters or use of dashes is not recommended.

	OfferItemID string `xml:"OfferItemID,attr,omitempty"`

	OrderItemID string `xml:"OrderItemID,attr,omitempty"`

	// If set to 'true', indicates mandatory Offer Items which cannot be removed from the Offer. Mandatory Offer Items transition into Order Items. If not present or 'false', the Offer item is optional. The aggregate price at the Offer level initially reflects the sum of the prices for all Mandatory Offer Items within it.

	MandatoryInd bool `xml:"MandatoryInd,attr,omitempty"`

	// POA to ORA only: to indicate that the offer is non-modifiable. This indicates to ORA that its offer is non-modifiable (eg. Regulatory or brand protection reasons). If indicator is set to true, nodifications to the POA’s offer ARE NOT allowed.

	ModificationProhibitedInd bool `xml:"ModificationProhibitedInd,attr,omitempty"`
}

type Delete__2 struct {
	OrderItem []*OrderItem__2 `xml:"OrderItem,omitempty"`
}

type Departure__1 struct {
	AirportCode *AirportCode__5 `xml:"AirportCode,omitempty"`

	// Departure date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Departure__2 struct {
	AirportCode *AirportCode__6 `xml:"AirportCode,omitempty"`

	// Departure date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Description__10 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__3 `xml:"Media,omitempty"`
}

type Description__3 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__4 `xml:"Media,omitempty"`
}

type Description__4 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__5 `xml:"Media,omitempty"`
}

type Description__5 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__6 `xml:"Media,omitempty"`
}

type Description__6 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__7 `xml:"Media,omitempty"`
}

type Description__7 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__8 `xml:"Media,omitempty"`
}

type Description__8 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__9 `xml:"Media,omitempty"`
}

type Description__9 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__10 `xml:"Media,omitempty"`
}

type Dimensions__3 struct {
	ActualSize *ActualSize__1 `xml:"ActualSize,omitempty"`

	// Length in number of ROWS value. Example: 2.5
	RowEquivalent float64 `xml:"RowEquivalent,omitempty"`

	// Width in number of COLUMNS value. Example: 2.5
	ColumnEquivalent float64 `xml:"ColumnEquivalent,omitempty"`
}

type End__3 struct {
	*CoreDateGrpType
}

type ExitRowPosition__1 struct {
	RowPosition []*RowPosition__1 `xml:"RowPosition,omitempty"`
}

type FareInfo__1 struct {
	BaseFare *BaseFare `xml:"BaseFare,omitempty"`

	EquivFare *EquivFare `xml:"EquivFare,omitempty"`

	Total *TotalFareTransactionType `xml:"Total,omitempty"`

	Taxes *Taxes__4 `xml:"Taxes,omitempty"`

	UnstructuredFareCalcInfo *UnstructuredFareCalcInfo `xml:"UnstructuredFareCalcInfo,omitempty"`

	FareInfo *FareInfo `xml:"FareInfo,omitempty"`
}

type FareInfo__2 struct {
	BaseFare *BaseFare `xml:"BaseFare,omitempty"`

	EquivFare *EquivFare `xml:"EquivFare,omitempty"`

	Total *Total `xml:"Total,omitempty"`

	Taxes *Taxes__5 `xml:"Taxes,omitempty"`

	UnstructuredFareCalcInfo *UnstructuredFareCalcInfo `xml:"UnstructuredFareCalcInfo,omitempty"`

	FareInfo *FareInfo `xml:"FareInfo,omitempty"`
}

type FlightRef__2 struct {
	Value string `xml:",chardata"`

	ODRef string `xml:"ODRef,attr,omitempty"`

	// Flight-level price class

	PriceClassRef string `xml:"PriceClassRef,attr,omitempty"`
}

type Flight__21 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__13 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__22 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__14 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Flight__23 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	Settlement *Settlement__15 `xml:"Settlement,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type FlightsOverview__3 struct {
	FlightRef []*FlightRef__3 `xml:"FlightRef,omitempty"`

	// Itinerary-level price class (eg. most restrictive applies)
	ItineraryPriceClassRef string `xml:"ItineraryPriceClassRef,omitempty"`
}

type FlightsOverview__4 struct {
	FlightRef []*FlightRef__4 `xml:"FlightRef,omitempty"`

	// Itinerary-level price class (eg. most restrictive applies)
	ItineraryPriceClassRef string `xml:"ItineraryPriceClassRef,omitempty"`
}

type Individual__1 struct {

	// Individual's first or given name. Example: JOHN.
	GivenName *ProperNameType `xml:"GivenName,omitempty"`

	// Individual's middle name or initial.  Examples: G, GEORGE
	MiddleName *ProperNameType `xml:"MiddleName,omitempty"`

	// Individual's family name, last name. Example: SMITH.
	Surname *ProperNameType `xml:"Surname,omitempty"`
}

type Individual__2 struct {

	// Individual's first or given name. Example: JOHN.
	GivenName *ProperNameType `xml:"GivenName,omitempty"`

	// Individual's middle name or initial.  Examples: G, GEORGE
	MiddleName *ProperNameType `xml:"MiddleName,omitempty"`

	// Individual's family name, last name. Example: SMITH.
	Surname *ProperNameType `xml:"Surname,omitempty"`
}

type IssueDateRange__1 struct {
	*DatePeriodRepType
}

type Keywords__10 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__3 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__4 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__5 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__6 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__7 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__8 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__9 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type LocationCode__3 struct {
	Value *AirportCitySimpleType `xml:",chardata"`
}

type Location__5 struct {
	RowPosition *RowPosition__2 `xml:"RowPosition,omitempty"`
}

type LoyaltyProgramAccount__1 struct {

	// An enterprise operating aircraft for commercial purposes
	Airline *AirlineTypeAIDM `xml:"Airline,omitempty"`

	// Loyalty Program Name. Example: Miles and More
	ProgramName *SimpleNameType `xml:"ProgramName,omitempty"`

	// Loyalty Program ID: Example: MAM
	ProgramCode *SimpleCodeType `xml:"ProgramCode,omitempty"`

	// Loyalty Program account number. Example: ABC123456
	AccountNumber *SimpleCodeType `xml:"AccountNumber,omitempty"`

	// Loyalty Program sign-in ID (or username).
	SignInID *SimpleTextType `xml:"SignInID,omitempty"`
}

type LoyaltyProgramAccount__2 struct {

	// An enterprise operating aircraft for commercial purposes
	Airline *AirlineTypeAIDM `xml:"Airline,omitempty"`

	// Loyalty Program Name. Example: Miles and More
	ProgramName *SimpleNameType `xml:"ProgramName,omitempty"`

	// Loyalty Program ID: Example: MAM
	ProgramCode *SimpleCodeType `xml:"ProgramCode,omitempty"`

	// Loyalty Program account number. Example: ABC123456
	AccountNumber *SimpleCodeType `xml:"AccountNumber,omitempty"`

	// Loyalty Program sign-in ID (or username).
	SignInID *SimpleTextType `xml:"SignInID,omitempty"`
}

type Marketing__2 struct {
	*SeatMapMessageType
}

type Marketing__3 struct {
	*SeatMapMessageType
}

type Marketing__4 struct {
	*SeatMapMessageType
}

type Marketing__5 struct {
	*SeatMapMessageType
}

type Marketing__6 struct {
	*SeatMapMessageType
}

type Marketing__7 struct {
	*SeatMapMessageType
}

type Marketing__8 struct {
	*SeatMapMessageType
}

type Marketing__9 struct {
	*SeatMapMessageType
}

type Method__5 struct {

	// Credit card issuer code. Example: MC
	//
	// Note: This is the 2 character code of the credit card issuer.
	CardCode *PayCardCodeSimpleType `xml:"CardCode,omitempty"`

	MaskedCardNumber *MaskedCardNumber__3 `xml:"MaskedCardNumber,omitempty"`

	// Tokenized card number.
	//
	// Note: This capability may not be supported by all EDIST-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	TokenizedCardNumber string `xml:"TokenizedCardNumber,omitempty"`

	EffectiveExpireDate *EffectiveExpireDate__5 `xml:"EffectiveExpireDate,omitempty"`

	CardHolderName *CardHolderName__3 `xml:"CardHolderName,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Method__6 struct {

	// Credit card issuer code. Example: MC
	//
	// Note: This is the 2 character code of the credit card issuer.
	CardCode *PayCardCodeSimpleType `xml:"CardCode,omitempty"`

	MaskedCardNumber *MaskedCardNumber__4 `xml:"MaskedCardNumber,omitempty"`

	// Tokenized card number.
	//
	// Note: This capability may not be supported by all EDIST-enabled systems or may be supported by bilateral agreement only. If supported, the technical implementation of this capability is not dictated by this specification.
	TokenizedCardNumber string `xml:"TokenizedCardNumber,omitempty"`

	EffectiveExpireDate *EffectiveExpireDate__6 `xml:"EffectiveExpireDate,omitempty"`

	CardHolderName *CardHolderName__4 `xml:"CardHolderName,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type NameChangeOfferItem__1 struct {
	*NameChangeOfferItemType

	NameChange *NameChange__2 `xml:"NameChange,omitempty"`
}

type NbrInParty__1 struct {
	Value int32 `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OfferItemIDs__1 struct {
	OfferItemID []*OfferItemID `xml:"OfferItemID,omitempty"`
}

type OfferItem__2 struct {
	*AssociatedObjectBaseType

	OfferItemID *OfferItemID `xml:"OfferItemID,omitempty"`

	Passengers *Passengers__7 `xml:"Passengers,omitempty"`

	Services *Services__6 `xml:"Services,omitempty"`

	OtherAssociation []*OtherAssociation__8 `xml:"OtherAssociation,omitempty"`
}

type Offer__7 struct {

	//
	// Association to one or multiple Offer Items instance(s). Example:OI1 OI2
	//
	OfferItemID []string `xml:"OfferItemID,omitempty"`

	// Reference to the OfferID of the selected Offer (either a standard Offer or an a-la-carte Offer) returned in a previous shopping response.

	OfferID string `xml:"OfferID,attr,omitempty"`

	// Designator of Airline that owns/ assigned these IDs. Examples: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code

	Owner string `xml:"Owner,attr,omitempty"`

	// Reference to unique shopping session response ID, as provided in the airline's previous shopping response.

	ResponseID string `xml:"ResponseID,attr,omitempty"`
}

type Offer__8 struct {

	//
	// Association to one or multiple Offer Items instance(s). Example:OI1 OI2
	//
	OfferItemID []string `xml:"OfferItemID,omitempty"`

	// Reference to the OfferID of the selected Offer (either a standard Offer or an a-la-carte Offer) returned in a previous shopping response.

	OfferID string `xml:"OfferID,attr,omitempty"`

	// Designator of Airline that owns/ assigned these IDs. Examples: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code

	Owner string `xml:"Owner,attr,omitempty"`

	// Reference to unique shopping session response ID, as provided in the airline's previous shopping response.

	ResponseID string `xml:"ResponseID,attr,omitempty"`
}

type Offers__4 struct {
	Offer []*Offer__10 `xml:"Offer,omitempty"`
}

type Offers__5 struct {
	Offer []*Offer__11 `xml:"Offer,omitempty"`
}

type OriginDestination__10 struct {
	Departure *Departure__3 `xml:"Departure,omitempty"`

	Arrival *Arrival__3 `xml:"Arrival,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OriginDestination__11 struct {

	// The origin city code.
	Origin *AirportCitySimpleType `xml:"Origin,omitempty"`

	// The destination city code.
	Destination *AirportCitySimpleType `xml:"Destination,omitempty"`
}

type OriginDestination__12 struct {

	// The origin city code.
	Origin *AirportCitySimpleType `xml:"Origin,omitempty"`

	// The destination city code.
	Destination *AirportCitySimpleType `xml:"Destination,omitempty"`
}

type OriginDestination__9 struct {
	Departure *Departure__4 `xml:"Departure,omitempty"`

	Arrival *Arrival__4 `xml:"Arrival,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type OriginalOrderItem__1 struct {
	TotalPriceDetail *TotalPriceDetail__4 `xml:"TotalPriceDetail,omitempty"`

	// Fare Detail, including Fare Component and Fare Rules.
	FareDetail []*FareDetailType `xml:"FareDetail,omitempty"`

	OrderItemID string `xml:"OrderItemID,attr,omitempty"`
}

type OtherAssociation__6 struct {

	// Named Instance Association Type. Examples: CarryOnAllowance, MediaGroup

	Type *OtherOrderAssocListType `xml:"Type,attr,omitempty"`

	// Associated object instance value.
	// Example: mediagrp1

	ReferenceValue string `xml:"ReferenceValue,attr,omitempty"`
}

type PTC__1 struct {
	Value *PaxSimpleType `xml:",chardata"`

	// Number of Traveler(s) for associated passenger type and country of residence.
	//
	// Example: 2

	Quantity int32 `xml:"Quantity,attr,omitempty"`
}

type Passengers__4 struct {

	// Group Information.
	Group *GroupType `xml:"Group,omitempty"`

	FullName []*FullName__1 `xml:"FullName,omitempty"`
}

type Passengers__5 struct {
	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`

	GroupReference *GroupReference `xml:"GroupReference,omitempty"`
}

type Payments__10 struct {

	// Payment detail.
	Payment []*PaymentMethodType `xml:"Payment,omitempty"`
}

type Payments__9 struct {

	// Payment detail.
	Payment []*OrderPaymentFormType `xml:"Payment,omitempty"`
}

type PriceCalendarDate__1 struct {
	Value string `xml:",chardata"`

	// Association to one Origin/Destination instance. Example: od1

	OriginDestinationReference string `xml:"OriginDestinationReference,attr,omitempty"`
}

type Price__3 struct {
	*PriceCoreType

	Amount *CurrencyAmountOptType `xml:"Amount,omitempty"`
}

type Remark__3 struct {
	*RemarkTypeAIDM
}

type Remark__4 struct {
	*RemarkTypeAIDM
}

type RowCharacteristics__1 struct {

	// Row characteristic. Use only if all seats within this row share the same characteristics.
	//
	// Examples:
	// A (Extra Leg Room)
	// B (Buffer Row)
	// MV (Row With Movie Screen)
	//
	// Encoding Scheme: IATA PADIS Code List for data element 9864 - Row Characteristic
	Code []*CodesetValueSimpleType `xml:"Code,omitempty"`
}

type Rows__2 struct {

	// First row number. Example: 08

	First int32 `xml:"First,omitempty"`

	// Last row number.  Example: 44

	Last int32 `xml:"Last,omitempty"`
}

type SeatDefinition__10 struct {
	Description []*Description__11 `xml:"Description,omitempty"`

	Marketing *Marketing__10 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__11 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__11 struct {
	Description []*Description__12 `xml:"Description,omitempty"`

	Marketing *Marketing__11 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__12 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type SeatDefinition__9 struct {
	Description []*Description__13 `xml:"Description,omitempty"`

	Marketing *Marketing__12 `xml:"Marketing,omitempty"`

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	SeatCharacteristicCode []*CodesetValueSimpleType `xml:"SeatCharacteristicCode,omitempty"`

	// Associated Keyword Unit of Measure, if relevant. Example: INCH
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Lowest Width Measurement value for this section. Example: 20
	SeatWidthLow float64 `xml:"SeatWidthLow,omitempty"`

	// Lowest Pitch Measurement value for this section. Example: 32
	SeatPitchLow float64 `xml:"SeatPitchLow,omitempty"`

	Keywords *Keywords__13 `xml:"Keywords,omitempty"`

	SeatDefinitionID string `xml:"SeatDefinitionID,attr,omitempty"`
}

type Seat__3 struct {
	Column string `xml:"Column,omitempty"`

	// Seat status.
	//
	// Encoding Scheme: IATA PADIS Code List for data element 9865 - Seat Occupation
	SeatStatus *IATA_CodeType `xml:"SeatStatus,omitempty"`

	SeatCharacteristics *SeatCharacteristics__1 `xml:"SeatCharacteristics,omitempty"`

	// Reference to the price point applicable to this individual seat. Multiple seats can reference the same OfferItem.
	OfferItemRefs string `xml:"OfferItemRefs,omitempty"`

	// Assign additional propoerties of this seat instance by referencing a SeatDefinition (in DataLists).
	SeatDefinitionRef []string `xml:"SeatDefinitionRef,omitempty"`
}

type Seat__4 struct {

	// Seat row number. Example: 2
	Row int32 `xml:"Row,omitempty"`

	// Seat column to identify a particular seat position on an aircraft
	Column string `xml:"Column,omitempty"`
}

type SegmentRef__3 struct {
}

type Segment__1 struct {
	Departure *Departure__5 `xml:"Departure,omitempty"`

	Arrival *Arrival__5 `xml:"Arrival,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Segment__2 struct {
	Departure *Departure__6 `xml:"Departure,omitempty"`

	Arrival *Arrival__6 `xml:"Arrival,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type ServiceDefinitionRef__6 struct {
}

type Settlement__10 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__11 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__12 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__5 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__6 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__7 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__8 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__9 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Source__2 struct {

	// Airline designator or CRS code of the owner/ assigner of the Offer ID, typically used for offer ordering purposes.  Example: UA, BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline or CRS Designator Code

	Owner string `xml:"Owner,attr,omitempty"`

	Reference string `xml:"Reference,attr,omitempty"`
}

type Start__3 struct {
	*CoreDateGrpType
}

type Status__7 struct {

	//
	// Current Order Item status. Example: OK (Confirmed) Encoding Scheme: IATA Padis Codeset - List for data element 4405 (Status, coded)
	//
	StatusCode *IATA_CodeType `xml:"StatusCode,omitempty"`

	//
	// When true, the order item cannot be fulfilled due to an aircraft change.
	//

	ChangeOfGaugeInd bool `xml:"ChangeOfGaugeInd,attr,omitempty"`

	//
	// When true, the order item cannot be fulfilled due to a flight schedule change.
	//

	ScheduleChangeInd bool `xml:"ScheduleChangeInd,attr,omitempty"`
}

type Status__8 struct {
	Value *PaymentStatusListType `xml:",chardata"`

	// Payment Status Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type Status__9 struct {
	Value *TicketDesigAppListType `xml:",chardata"`

	// Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type TaxCode__1 struct {

	// Tax designator. Example: XY

	Designator string `xml:"Designator,omitempty"`

	// Tax nature. Example: I

	Nature string `xml:"Nature,omitempty"`
}

type TicketDocInfo__4 struct {
	AgentIDs *AgentIDs__4 `xml:"AgentIDs,omitempty"`

	IssuingAirlineInfo *IssuingAirlineInfo `xml:"IssuingAirlineInfo,omitempty"`

	TicketDocument *TicketDocument `xml:"TicketDocument,omitempty"`

	CarrierFeeInfo *CarrierFeeInfo `xml:"CarrierFeeInfo,omitempty"`

	OriginalIssueInfo *OriginalIssueInfo `xml:"OriginalIssueInfo,omitempty"`

	Passengers *Passengers__8 `xml:"Passengers,omitempty"`
}

type TicketingStatus__1 struct {
	Value *TicketDesigAppListType `xml:",chardata"`

	// Context.

	Context *ContextSimpleType `xml:"Context,attr,omitempty"`
}

type TotalPriceDetail__3 struct {
	TotalAmount *TotalAmount__7 `xml:"TotalAmount,omitempty"`

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	FareFiledIn *FareFiledIn `xml:"FareFiledIn,omitempty"`

	// Discount Information
	Discount *DiscountType `xml:"Discount,omitempty"`

	Surcharges *Surcharges__9 `xml:"Surcharges,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	Fees *Fees__9 `xml:"Fees,omitempty"`

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`
}

type WingPosition__1 struct {

	// Last row number.
	// Example: 16
	LastRow *CodesetValueSimpleType `xml:"LastRow,omitempty"`

	// First row number.
	// Example: 5
	FirstRow *CodesetValueSimpleType `xml:"FirstRow,omitempty"`
}

type ActualSize__1 struct {

	// First row number.
	// Example: 15
	UOM *SizeUnitSimpleType `xml:"UOM,omitempty"`

	// Front to back LENGTH measurement value. Example: 70
	Length *CodesetValueSimpleType `xml:"Length,omitempty"`

	// Front to back WIDTH measurement value. Example: 70
	Width *CodesetValueSimpleType `xml:"Width,omitempty"`
}

type AgentIDs__4 struct {
	AgentID *AgentID `xml:"AgentID,omitempty"`
}

type AirportCode__3 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__4 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__5 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__6 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type ApplicableFeeRemarks__2 struct {
	*RemarkType
}

type Arrival__3 struct {
	AirportCode *AirportCode__7 `xml:"AirportCode,omitempty"`

	// Arrival date. Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Arrival__4 struct {
	AirportCode *AirportCode__8 `xml:"AirportCode,omitempty"`

	// Arrival date. Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Arrival__5 struct {
	AirportCode *AirportCode__9 `xml:"AirportCode,omitempty"`

	// Arrival date. Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Arrival__6 struct {
	AirportCode *AirportCode__10 `xml:"AirportCode,omitempty"`

	// Arrival date. Example: 2017-01-14
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type CardHolderName__3 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type CardHolderName__4 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Departure__3 struct {
	AirportCode *AirportCode__11 `xml:"AirportCode,omitempty"`

	// Departure date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Departure__4 struct {
	AirportCode *AirportCode__12 `xml:"AirportCode,omitempty"`

	// Departure date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Departure__5 struct {
	AirportCode *AirportCode__13 `xml:"AirportCode,omitempty"`

	// Departure date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Departure__6 struct {
	AirportCode *AirportCode__14 `xml:"AirportCode,omitempty"`

	// Departure date. Example: 2017-01-13
	//
	// Encoding Scheme: ISO 8601 Date Format (YYYY-MM-DD)
	Date string `xml:"Date,omitempty"`
}

type Description__11 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__11 `xml:"Media,omitempty"`
}

type Description__12 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__12 `xml:"Media,omitempty"`
}

type Description__13 struct {

	// LINK to Description information source.
	Link string `xml:"Link,omitempty"`

	Media []*Media__13 `xml:"Media,omitempty"`
}

type EffectiveExpireDate__5 struct {

	// Payment Card Effective Date. Example: 0116
	Effective *PayCardDateSimpleType `xml:"Effective,omitempty"`

	// Payment Card Expiration Date. Example: 0119
	Expiration *PayCardDateSimpleType `xml:"Expiration,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type EffectiveExpireDate__6 struct {

	// Payment Card Effective Date. Example: 0116
	Effective *PayCardDateSimpleType `xml:"Effective,omitempty"`

	// Payment Card Expiration Date. Example: 0119
	Expiration *PayCardDateSimpleType `xml:"Expiration,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Fees__9 struct {
	*FeeSurchargeType
}

type FlightQuery__1 struct {
	Affinity *Affinity__1 `xml:"Affinity,omitempty"`

	OriginDestinations *OriginDestinations__1 `xml:"OriginDestinations,omitempty"`

	FlightSpecific *FlightSpecific__1 `xml:"FlightSpecific,omitempty"`
}

type FlightRef__3 struct {
	Value string `xml:",chardata"`

	// Reference to the Origin/Destination ID specified within this Offer.

	ODRef string `xml:"ODRef,attr,omitempty"`

	// Flight-level price class

	PriceClassRef string `xml:"PriceClassRef,attr,omitempty"`
}

type FlightRef__4 struct {
	Value string `xml:",chardata"`

	// Reference to the Origin/Destination ID specified within this Offer.

	ODRef string `xml:"ODRef,attr,omitempty"`

	// Flight-level price class

	PriceClassRef string `xml:"PriceClassRef,attr,omitempty"`
}

type FullName__1 struct {
	Value *ProperNameSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Keywords__11 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__12 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Keywords__13 struct {

	// Key-Value detail.
	KeyWord []*KeyWordType `xml:"KeyWord,omitempty"`
}

type Marketing__10 struct {
	*SeatMapMessageType
}

type Marketing__11 struct {
	*SeatMapMessageType
}

type Marketing__12 struct {
	*SeatMapMessageType
}

type MaskedCardNumber__3 struct {
	Value *MaskedCardNmbrSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type MaskedCardNumber__4 struct {
	Value *MaskedCardNmbrSimpleType `xml:",chardata"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type Media__10 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__3 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__4 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__5 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__6 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__7 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__8 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__9 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type NameChange__2 struct {

	// Identifier of the Passenger within the Order in the Order Management System. This is the PassengerID that is assigned at the time of Order creation by the Airline.
	PassengerID string `xml:"PassengerID,omitempty"`

	// Individual's name title. Examples: MR, MRS, DRn.
	NameTitle *ShortNameType `xml:"NameTitle,omitempty"`

	// Individual's first or given name. Example: JOHN.
	GivenName *ProperNameType `xml:"GivenName,omitempty"`

	// Individual's middle name or initial.  Examples: G, GEORGE
	MiddleName *ProperNameType `xml:"MiddleName,omitempty"`

	// Individual's family name, last name. Example: SMITH.
	Surname *ProperNameType `xml:"Surname,omitempty"`

	// Individual's surname suffixes and letters. Examples: Jr., Sr., III, Ret., Esq.
	SurnameSuffix *ShortNameType `xml:"SurnameSuffix,omitempty"`
}

type Offer__10 struct {

	//
	// Association to one or multiple Offer Items instance(s). Example:OI1 OI2
	//
	OfferItemID []string `xml:"OfferItemID,omitempty"`

	// Reference to the OfferID of the selected Offer (either a standard Offer or an a-la-carte Offer) returned in a previous shopping response.

	OfferID string `xml:"OfferID,attr,omitempty"`

	// Designator of Airline that owns/ assigned these IDs. Examples: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code

	Owner string `xml:"Owner,attr,omitempty"`

	// Reference to unique shopping session response ID, as provided in the airline's previous shopping response.

	ResponseID string `xml:"ResponseID,attr,omitempty"`
}

type Offer__11 struct {

	//
	// Association to one or multiple Offer Items instance(s). Example:OI1 OI2
	//
	OfferItemID []string `xml:"OfferItemID,omitempty"`

	// Reference to the OfferID of the selected Offer (either a standard Offer or an a-la-carte Offer) returned in a previous shopping response.

	OfferID string `xml:"OfferID,attr,omitempty"`

	// Designator of Airline that owns/ assigned these IDs. Examples: BA
	//
	// Encoding Scheme: IATA/ A4A (two or three character) Airline Designator Code

	Owner string `xml:"Owner,attr,omitempty"`

	// Reference to unique shopping session response ID, as provided in the airline's previous shopping response.

	ResponseID string `xml:"ResponseID,attr,omitempty"`
}

type Offer__9 struct {

	// Associated Shoppers. Note: Includes Anonymous, Recognized and/or PTC shopper association.
	//
	Shopper *ShopperInfoAssocType `xml:"Shopper,omitempty"`

	// Associated Flight(s).
	Flight *FlightInfoAssocType `xml:"Flight,omitempty"`

	PriceClass *PriceClass__3 `xml:"PriceClass,omitempty"`

	// Baggage Detail Associations.
	BagDetails *BagDetailAssocType `xml:"BagDetails,omitempty"`

	// Offer Detail Association(s).
	OfferDetails *OfferDetailInfoAssocType `xml:"OfferDetails,omitempty"`

	OtherAssociation []*OtherAssociation__9 `xml:"OtherAssociation,omitempty"`
}

type OrderItem__2 struct {

	// Reference to the Services within the specified Order Item which the Passenger would like the Airline to retain and return within the proposed Offer Item(s) in the OrderReshopRS.
	ServiceRetainRequestIDs string `xml:"ServiceRetainRequestIDs,omitempty"`

	// Reference to the Order Item requested for deletion.

	OrderItemID string `xml:"OrderItemID,attr,omitempty"`
}

type OtherAssociation__7 struct {

	// Named Instance Association Type. Examples: CarryOnAllowance, MediaGroup

	Type *OtherOrderAssocListType `xml:"Type,attr,omitempty"`

	// Associated object instance value.
	// Example: mediagrp1

	ReferenceValue string `xml:"ReferenceValue,attr,omitempty"`
}

type OtherAssociation__8 struct {

	// Named Instance Association Type. Examples: CarryOnAllowance, MediaGroup

	Type *OtherOrderAssocListType `xml:"Type,attr,omitempty"`

	// Associated object instance value.
	// Example: mediagrp1

	ReferenceValue string `xml:"ReferenceValue,attr,omitempty"`
}

type Passengers__6 struct {
	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`
}

type Passengers__7 struct {
	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`

	GroupReference *GroupReference `xml:"GroupReference,omitempty"`
}

type Passengers__8 struct {
	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`

	GroupReference *GroupReference `xml:"GroupReference,omitempty"`
}

type Preference__3 struct {
	AirlinePreferences *AirlinePreferences `xml:"AirlinePreferences,omitempty"`

	AlliancePreferences *AlliancePreferences `xml:"AlliancePreferences,omitempty"`

	FarePreferences *FarePreferences `xml:"FarePreferences,omitempty"`

	FlightPreferences *FlightPreferences `xml:"FlightPreferences,omitempty"`

	PricingMethodPreference *PricingMethodPreference `xml:"PricingMethodPreference,omitempty"`

	SegMaxTimePreferences *SegMaxTimePreferences `xml:"SegMaxTimePreferences,omitempty"`

	ServicePricingOnlyPreference *ServicePricingOnlyPreference `xml:"ServicePricingOnlyPreference,omitempty"`

	TransferPreferences *TransferPreferences `xml:"TransferPreferences,omitempty"`

	CabinPreferences *CabinPreferences `xml:"CabinPreferences,omitempty"`
}

type Qualifier__4 struct {
	BaggagePricingQualifier *BaggagePricingQualifier `xml:"BaggagePricingQualifier,omitempty"`

	ExistingOrderQualifier *ExistingOrderQualifier `xml:"ExistingOrderQualifier,omitempty"`

	PaymentCardQualifiers []*PaymentCardQualifiers `xml:"PaymentCardQualifiers,omitempty"`

	ProgramQualifiers *ProgramQualifiers `xml:"ProgramQualifiers,omitempty"`

	PromotionQualifiers *PromotionQualifiers `xml:"PromotionQualifiers,omitempty"`

	SeatQualifier *SeatQualifier `xml:"SeatQualifier,omitempty"`

	ServiceQualifier *ServiceQualifier `xml:"ServiceQualifier,omitempty"`

	SocialMediaQualifiers *SocialMediaQualifiers `xml:"SocialMediaQualifiers,omitempty"`

	SpecialFareQualifiers *SpecialFareQualifiers `xml:"SpecialFareQualifiers,omitempty"`

	SpecialNeedQualifiers *SpecialNeedQualifiers `xml:"SpecialNeedQualifiers,omitempty"`

	TripPurposeQualifier *TripPurposeQualifier `xml:"TripPurposeQualifier,omitempty"`

	FOPQualifier *FOPQualifier__2 `xml:"FOPQualifier,omitempty"`
}

type ReshopDifferential__1 struct {
	OriginalOrderItem *OriginalOrderItem__2 `xml:"OriginalOrderItem,omitempty"`

	NewOfferItem *NewOfferItem__1 `xml:"NewOfferItem,omitempty"`

	PenaltyAmount *PenaltyAmount__1 `xml:"PenaltyAmount,omitempty"`

	FeesAmount *FeesAmount__1 `xml:"FeesAmount,omitempty"`

	ReshopDue *ReshopDue__1 `xml:"ReshopDue,omitempty"`
}

type ReshopDifferential__2 struct {
	OriginalOrderItem *OriginalOrderItem__3 `xml:"OriginalOrderItem,omitempty"`

	NewOfferItem *NewOfferItem__2 `xml:"NewOfferItem,omitempty"`

	PenaltyAmount *PenaltyAmount__2 `xml:"PenaltyAmount,omitempty"`

	FeesAmount *FeesAmount__2 `xml:"FeesAmount,omitempty"`

	ReshopDue *ReshopDue__2 `xml:"ReshopDue,omitempty"`
}

type RowPosition__1 struct {
	First *First__1 `xml:"First,omitempty"`

	Last *Last__1 `xml:"Last,omitempty"`

	// Exit row position.
	// Examples:
	// B (Back)
	// C (Center section)
	// F (Front)
	// FB (Front and Back)
	// FMB (Front, Middle and Back)
	// L (Left side section)
	// LC (Left center section)
	// R (Right side section)
	// RC (Right center section)
	//
	// Encoding Scheme: IATA PADIS Code List for data element 3227 - Place/Location Qualifier
	Position *IATA_CodeType `xml:"Position,omitempty"`
}

type RowPosition__2 struct {

	// First row occupied by this item. Example: 13
	Begin int32 `xml:"Begin,omitempty"`

	// Last row occupied by this item. Example: 17
	End int32 `xml:"End,omitempty"`

	// Location of the component relative to the row position defined (use values 'Before' or 'After').
	BeforeOrAfter *BeforeOrAfterListType `xml:"BeforeOrAfter,omitempty"`

	// All columns covered on the map by this item.
	ColumnPosition []string `xml:"ColumnPosition,omitempty"`

	// Orientation of Component in cabin row.
	//
	// Examples:
	// 1  Back
	// 2  Front
	// 3  Front and back
	// 4  Front, middle and back
	// C  Center Section
	// L  Left side section
	// LC Left center section
	// R  Right side section
	// RC Right center section
	//
	// Encoding Scheme: IATA PADIS code list 3227
	Orientation *IATA_CodeType `xml:"Orientation,omitempty"`
}

type SeatCharacteristics__1 struct {

	// Refers to aircraft seat characteristics; seat option codes.  Examples: E (EXIT ROW), M (Middle Seat), A (Aisle seat), L (Left side of aircraft), Q (Bulk Head).  Refer to PADIS code list 9825.
	//
	// This Code may be further described in the SeatCharacteristicsList in DataLists.
	Code []*CodesetValueSimpleType `xml:"Code,omitempty"`
}

type Services__6 struct {
	ServiceID []*ServiceID `xml:"ServiceID,omitempty"`

	Passengers *Passengers__9 `xml:"Passengers,omitempty"`
}

type Settlement__13 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__14 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Settlement__15 struct {

	// Service settlement method.
	// Examples:
	// AD (Internal Airline Document)
	// DS (Direct Settlement)
	// EA (EMD Associated or Internal Airline Document)
	// ES (EMD Standalone )
	// FI (Fare Integrated)
	// MA (Flight Associated, Settled via MCO)
	// MS (Standalone, Settled via MCO)
	//
	// Encoding Scheme: IATA PADIS Codeset SST (Service Settlement Type)
	Method *IATA_CodeType `xml:"Method,omitempty"`

	// Settlement (Price) Value. Example: 300 (USD)
	//
	// Note: This represents a Settlement value that is only used between the POA and ORA.
	InterlineSettlementValue *CurrencyAmountOptType `xml:"InterlineSettlementValue,omitempty"`
}

type Surcharges__9 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type Taxes__4 struct {
	*TaxDetailType
}

type Taxes__5 struct {
	*TaxDetailType
}

type TotalAmount__7 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type TotalPriceDetail__4 struct {
	TotalAmount *TotalAmount__8 `xml:"TotalAmount,omitempty"`

	// Total Base Fare Amount.  Example: 200000
	//
	// Note: This includes  surcharges (if applicable).
	BaseAmount *CurrencyAmountOptType `xml:"BaseAmount,omitempty"`

	FareFiledIn *FareFiledIn `xml:"FareFiledIn,omitempty"`

	// Discount Information
	Discount *DiscountType `xml:"Discount,omitempty"`

	Surcharges *Surcharges__10 `xml:"Surcharges,omitempty"`

	// Ticket Tax/fee/charge details to indicate taxes that apply to country of commencement of travel and routing.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	TaxExemption *TaxExemption `xml:"TaxExemption,omitempty"`

	Fees *Fees__10 `xml:"Fees,omitempty"`

	// AWARD (Redemption Unit-based) Pricing information.
	AwardPricing *AwardPriceUnitType `xml:"AwardPricing,omitempty"`

	// PARTIAL CURRENCY and AWARD Pricing Combination information.
	CombinationPricing *CombinationPriceType `xml:"CombinationPricing,omitempty"`
}

type Affinity__1 struct {
	OriginDestination []*OriginDestination__13 `xml:"OriginDestination,omitempty"`

	StayPeriodDateRange *StayPeriodDateRange `xml:"StayPeriodDateRange,omitempty"`

	StayPeriodSeason *StayPeriodSeason `xml:"StayPeriodSeason,omitempty"`

	TripDistance *TripDistance `xml:"TripDistance,omitempty"`

	TripTime *TripTime `xml:"TripTime,omitempty"`

	Budget *Budget__2 `xml:"Budget,omitempty"`

	KeywordPreferences *KeywordPreferences__2 `xml:"KeywordPreferences,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`
}

type AirportCode__10 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__11 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__12 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__13 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__14 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__7 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__8 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type AirportCode__9 struct {
	Value *AirportCitySimpleType `xml:",chardata"`

	// Search radius application. Example: Driving

	Application *ContextSimpleType `xml:"Application,attr,omitempty"`

	// A maximum search radius value, e.g. distance from specified location. Example: 20

	Area int32 `xml:"Area,attr,omitempty"`

	// Distance unit of measure. Examples: Miles, Kilometers

	UOM *DistanceUnitListType `xml:"UOM,attr,omitempty"`
}

type FOPQualifier__2 struct {

	// Association to multiple Passenger instance(s). Example: Passenger1 Passenger2
	//
	// Note: May be Recognized or Anonymous Passenger (by PTC) instance(s).
	PassengerReferences *InstanceClassRefSimpleType `xml:"PassengerReferences,omitempty"`

	// The form of payment type. Examples: Credit Card, Cash.
	//
	// Encoding Scheme: IATA PADIS code list data element [9888] Form of Payment Identification
	Type []*IATA_CodeType `xml:"Type,omitempty"`
}

type FeesAmount__1 struct {
	Total *Total `xml:"Total,omitempty"`

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`
}

type FeesAmount__2 struct {
	Total *Total `xml:"Total,omitempty"`

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`
}

type Fees__10 struct {
	*FeeSurchargeType
}

type First__1 struct {
	Value *CodesetValueSimpleType `xml:",chardata"`

	// Specifies the exit row position in wide body Aircraft.

	Columns int32 `xml:"Columns,attr,omitempty"`
}

type FlightSpecific__1 struct {
	FlightSegment []*FlightSegment__3 `xml:"FlightSegment,omitempty"`

	Flight []*Flight__24 `xml:"Flight,omitempty"`

	OriginDestination []*OriginDestination `xml:"OriginDestination,omitempty"`
}

type Last__1 struct {
	Value *CodesetValueSimpleType `xml:",chardata"`

	// Specifies the exit row position in wide body Aircraft.

	Columns int32 `xml:"Columns,attr,omitempty"`
}

type Media__11 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__12 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type Media__13 struct {

	// Description-associated MEDIA OBJECT ID or Key. Example: IMG1
	ObjectID *MediaID_Type `xml:"ObjectID,omitempty"`

	MediaLink *MediaLink `xml:"MediaLink,omitempty"`

	// Description-associated Media Attachment ID. Example: ATT1.
	AttachmentID *MediaID_Type `xml:"AttachmentID,omitempty"`
}

type NewOfferItem__1 struct {
	Total *Total `xml:"Total,omitempty"`

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`
}

type NewOfferItem__2 struct {
	Total *Total `xml:"Total,omitempty"`

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`
}

type OriginDestinations__1 struct {
	OriginDestination []*OriginDestination__14 `xml:"OriginDestination,omitempty"`
}

type OriginalOrderItem__2 struct {
	Total *Total `xml:"Total,omitempty"`

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`
}

type OriginalOrderItem__3 struct {
	Total *Total `xml:"Total,omitempty"`

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`
}

type OtherAssociation__9 struct {

	//
	// Named Instance Association Type. Examples: CarryOnAllowance, MediaGroup
	//

	Type *OtherOrderAssocListType `xml:"Type,attr,omitempty"`

	//
	// Associated object instance value. Example: mediagrp1
	//

	RefValue string `xml:"RefValue,attr,omitempty"`
}

type Passengers__9 struct {
	PassengerReferences *PassengerReferences `xml:"PassengerReferences,omitempty"`

	GroupReference *GroupReference `xml:"GroupReference,omitempty"`
}

type PenaltyAmount__1 struct {
	Total *Total `xml:"Total,omitempty"`

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`
}

type PenaltyAmount__2 struct {
	Total *Total `xml:"Total,omitempty"`

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`
}

type PriceClass__3 struct {
	PriceClassReference *PriceClassReference `xml:"PriceClassReference,omitempty"`
}

type ReshopDue__1 struct {

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	ByPassenger *ByPassenger__1 `xml:"ByPassenger,omitempty"`

	ByAirline *ByAirline__1 `xml:"ByAirline,omitempty"`
}

type ReshopDue__2 struct {

	// Tax Information.
	Taxes *TaxDetailType `xml:"Taxes,omitempty"`

	ByPassenger *ByPassenger__2 `xml:"ByPassenger,omitempty"`

	ByAirline *ByAirline__2 `xml:"ByAirline,omitempty"`
}

type Surcharges__10 struct {

	// Surcharge detail.
	Surcharge []*FeeSurchargeType `xml:"Surcharge,omitempty"`
}

type TotalAmount__8 struct {
	AwardPricing *AwardPricing `xml:"AwardPricing,omitempty"`

	CombinationPricing *CombinationPricing `xml:"CombinationPricing,omitempty"`

	DetailCurrencyPrice *DetailCurrencyPrice `xml:"DetailCurrencyPrice,omitempty"`

	EncodedCurrencyPrice *EncodedCurrencyPrice `xml:"EncodedCurrencyPrice,omitempty"`

	SimpleCurrencyPrice *SimpleCurrencyPrice `xml:"SimpleCurrencyPrice,omitempty"`
}

type Budget__2 struct {
	GroupBudget *GroupBudget `xml:"GroupBudget,omitempty"`

	PerPersonBudget *PerPersonBudget `xml:"PerPersonBudget,omitempty"`
}

type ByAirline__1 struct {
	Total *Total `xml:"Total,omitempty"`
}

type ByAirline__2 struct {
	Total *Total `xml:"Total,omitempty"`
}

type ByPassenger__1 struct {
	Total *Total `xml:"Total,omitempty"`
}

type ByPassenger__2 struct {
	Total *Total `xml:"Total,omitempty"`
}

type FlightSegment__3 struct {
	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	// Marketing Carrier information.
	MarketingAirline *MarketingCarrierFlightType `xml:"MarketingAirline,omitempty"`

	// Operating Carrier information.
	//
	// Note: This is the carrier that holds the Air Operator’s Certificate for the aircraft used for that flight.
	OperatingAirline *OperatingCarrierFlightType `xml:"OperatingAirline,omitempty"`

	// A globally unique identifier for this Flight Segment instance. Example: segment1

	SegmentKey int32 `xml:"SegmentKey,attr,omitempty"`
}

type Flight__24 struct {

	// Flight journey information.
	Journey *TotalJourneyType `xml:"Journey,omitempty"`

	SegmentReferences *SegmentReferences `xml:"SegmentReferences,omitempty"`

	// A globally unique identifier for this Flight instance. Example: flight1

	FlightKey *KeyIdentifier `xml:"FlightKey,attr,omitempty"`

	// Object association(s) between this object and any other object or metadata instance(s).

	Refs *MultiAssocSimpleType `xml:"refs,attr,omitempty"`
}

type KeywordPreferences__2 struct {
	KeywordPreference []*KeywordPreference__2 `xml:"KeywordPreference,omitempty"`
}

type OriginDestination__13 struct {
	*AssociatedObjectBaseType

	AirportCityDeparture *AirportCityDeparture `xml:"AirportCityDeparture,omitempty"`

	CountryDeparture *CountryDeparture `xml:"CountryDeparture,omitempty"`

	ReferencePointDeparture *ReferencePointDeparture `xml:"ReferencePointDeparture,omitempty"`

	StateProvDeparture *StateProvDeparture `xml:"StateProvDeparture,omitempty"`

	AirportCityArrival *AirportCityArrival `xml:"AirportCityArrival,omitempty"`

	CountryArrival *CountryArrival `xml:"CountryArrival,omitempty"`

	ReferencePointArrival *ReferencePointArrival `xml:"ReferencePointArrival,omitempty"`

	StateProvArrival *StateProvArrival `xml:"StateProvArrival,omitempty"`

	SegMaxTimePreferences *SegMaxTimePreferences `xml:"SegMaxTimePreferences,omitempty"`
}

type OriginDestination__14 struct {
	*AssociatedObjectBaseType

	Departure *Departure `xml:"Departure,omitempty"`

	Arrival *Arrival `xml:"Arrival,omitempty"`

	SegMaxTimePreferences *SegMaxTimePreferences `xml:"SegMaxTimePreferences,omitempty"`

	ShoppingResponseID *ShoppingResponseID `xml:"ShoppingResponseID,omitempty"`

	MarketingCarrierAirline *MarketingCarrierAirline `xml:"MarketingCarrierAirline,omitempty"`

	CalendarDates *CalendarDates__2 `xml:"CalendarDates,omitempty"`

	// A globally unique identifier for this OriginDestination instance. Example: origDest1

	OriginDestinationKey string `xml:"OriginDestinationKey,attr,omitempty"`
}

type CalendarDates__2 struct {

	// Number of days  befiore the specified date.

	DaysBefore int32 `xml:"DaysBefore,attr,omitempty"`

	// Number  of days after the specified date.

	DaysAfter int32 `xml:"DaysAfter,attr,omitempty"`
}

type KeywordPreference__2 struct {
	*KeyWordType

	// Preference Level.  Example: Preferred, Required, Exclude, Other

	PreferencesLevel *PreferencesLevelSimpleType `xml:"PreferencesLevel,attr,omitempty"`

	// Preference Level Context.  Example: MyContext

	PreferencesContext *ContextSimpleType `xml:"PreferencesContext,attr,omitempty"`
}

/*autogenerated code ends here*/

/* client connection starts here*/

type NdcResService17_2Port interface {
	ShopAir(request *AirShoppingRQ) (*AirShoppingRS, error)
}

type ndcResService17_2Port struct {
	client *wsdl2goEdit.Client
}

func NewNdcResService17_2Port(client *wsdl2goEdit.Client) NdcResService17_2Port {
	return &ndcResService17_2Port{
		client: client,
	}
}

func (service *ndcResService17_2Port) ShopAir(request *AirShoppingRQ) (*AirShoppingRS, error) {
	α := struct {
		AirShoppingBody `xml:"tns:AirShoppingBody"`
	}{
		AirShoppingBody: AirShoppingBody{
			AirShoppingRQ: request,
		},
	}
	γ := struct {
		AirShoppingResponse `xml:"AirShoppingResponse"`
	}{}

	if err := service.client.RoundTripWithAction("https://iflyrestest.ibsgen.com:6013/iRes_NdcRes_WS/services/NdcResService172SOAPPort?", α, &γ); err != nil {
		return nil, err
	}
	//log.Print("response")
	//log.Print(γ.AirShoppingResponse.AirShoppingRS)
	return γ.AirShoppingResponse.AirShoppingRS, nil
}

/* client connection ends here*/
